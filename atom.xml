<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.sky123.top/atom.xml" rel="self"/>
  
  <link href="http://blog.sky123.top/"/>
  <updated>2021-05-27T04:35:20.571Z</updated>
  <id>http://blog.sky123.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dockerfile</title>
    <link href="http://blog.sky123.top/2021/05/28/docker/Docker07dockerfile/"/>
    <id>http://blog.sky123.top/2021/05/28/docker/Docker07dockerfile/</id>
    <published>2021-05-27T16:00:00.000Z</published>
    <updated>2021-05-27T04:35:20.571Z</updated>
    
    <content type="html"><![CDATA[<h1>Dockerfile</h1><h2 id="什么是 DockerfIle">什么是 DockerfIle?</h2><p>Dockerfile 就是用来 <code> 构建 Docker 镜像 </code> 的构建文件。一种命令脚本。<code>通过这个脚本可以生成镜像，镜像是一层层的，脚本也是一个个的，每个命令都是一层。</code></p><h2 id="创建 Dockerfile">创建 Dockerfile</h2><p>创建一个 dokcerfile 文件，名字建议为 <code>Dockerfile</code>。</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"volume01"</span>,<span class="string">"volume02"</span>] <span class="comment"># 匿名挂载</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"----end---"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></tbody></table></figure><p>将 <code>Dockerfile</code> 文件导入服务器后，执行 <code>build</code> 指令。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -f Dockerfile 文件路径 -t 自己定的镜像名:[tag] .（注意这里有个“ . ”!!!）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意一定要切换到  dockerfile 所在的目录再进行构建！！</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z /]<span class="comment"># cd /home/test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker build -f /home/test/Dockerfile -t zhang_new_centos:1.0 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"> ---&gt; 300e315adb2f</span><br><span class="line">Step 2/4 : VOLUME [<span class="string">"volume01"</span>,<span class="string">"volume02"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 07ae0ca19fa0</span><br><span class="line">Removing intermediate container 07ae0ca19fa0</span><br><span class="line"> ---&gt; 03b0163200ef</span><br><span class="line">Step 3/4 : CMD <span class="built_in">echo</span> <span class="string">"----end---"</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> b37d23b71e98</span><br><span class="line">Removing intermediate container b37d23b71e98</span><br><span class="line"> ---&gt; c11c71b6fbb8</span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 55037d2fbe2e</span><br><span class="line">Removing intermediate container 55037d2fbe2e</span><br><span class="line"> ---&gt; ffc16328649d</span><br><span class="line">Successfully built ffc16328649d</span><br><span class="line">Successfully tagged zhang_new_centos:1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看构建完成的镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">zhang_new_centos      1.0       ffc16328649d   10 seconds ago   209MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动自己写的容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker run -it ffc16328649d /bin/bash</span></span><br><span class="line">[root@967d6456ecb1 /]<span class="comment"># ls -l</span></span><br><span class="line">total 56</span><br><span class="line">.........</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 14 08:27 volume01   <span class="comment"># 这目录就是我们生成镜像时自动挂载的数据卷目录</span></span><br><span class="line">drwxr-xr-x   2 root root 4096 May 14 08:27 volume02   <span class="comment"># 这目录就是我们生成镜像时自动挂载的数据卷目录</span></span><br></pre></td></tr></tbody></table></figure><p>这两个卷一定和主机有同步目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">967d6456ecb1   ffc16328649d   <span class="string">"/bin/bash"</span>              4 minutes ago    Up 4 minutes                                                sharp_goldberg</span><br><span class="line">264b185cbccc   nginx          <span class="string">"/docker-entrypoint.…"</span>   49 minutes ago   Up 49 minutes   0.0.0.0:49154-&gt;80/tcp, :::49154-&gt;80/tcp     nginx02</span><br><span class="line">0f3e16361a94   nginx          <span class="string">"/docker-entrypoint.…"</span>   50 minutes ago   Up 50 minutes   0.0.0.0:49153-&gt;80/tcp, :::49153-&gt;80/tcp     nginx01</span><br><span class="line">1309cabd368d   centos         <span class="string">"/bin/bash"</span>              4 hours ago      Up 4 hours                                                  epic_neumann</span><br><span class="line">39f11d68d64d   tomcat         <span class="string">"catalina.sh run"</span>        6 hours ago      Up 6 hours      0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker inspect 967d6456ecb1</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514163246336.png" alt="image-20210514163246336"></p><h2 id="镜像发布步骤">镜像发布步骤</h2><p>注意：很多官方镜像都是基础包，我们通常需要搭建自己的镜像</p><ol><li>编写 <code>Dockerfile</code></li><li><code>docker build</code> 构建一个镜像</li><li><code>docker run</code> 运行一个镜像</li><li><code>docker push</code> 发布镜像（DockerHub ，阿里云镜像仓库）</li></ol><h2 id="Dockerfile 编写过程">Dockerfile 编写过程</h2><p>每一个指令都会提交一个新的镜像层，并提交。</p><p>我们以后发布项目做镜像，就需要编写 <code>Dockerfile</code> 文件。</p><h3 id="Dockerfile 指令">Dockerfile 指令</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210221215126162.png" alt="image-20210221215126162"></p><h3 id="编写 Dockerfile 文件">编写 Dockerfile 文件</h3><ol><li>对于官方的精简 OS，对其进行扩展，添加 <code>vim 命令和 net-tools</code></li></ol><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> zhang&lt;<span class="number">1404644784</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment"># 安装两个工具</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"---END----"</span></span></span><br><span class="line"><span class="comment"># 打开终端</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>导入 Dockerfile 文件到服务器之后，到其所在的目录中执行如下指令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker build -t new_ceontos:1.2 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/10 : FROM centos</span><br><span class="line"> ---&gt; 300e315adb2f</span><br><span class="line">Step 2/10 : MAINTAINER zhang&lt;1404644784@qq.com&gt;</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 1eff578beeaa</span><br><span class="line">Removing intermediate container 1eff578beeaa</span><br><span class="line"> ---&gt; 8b55dbb5776a</span><br><span class="line">Step 3/10 : ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">.......</span><br><span class="line">Step 10/10 : CMD /bin/bash</span><br><span class="line">Successfully built 30e7e21aa1ad</span><br><span class="line">Successfully tagged new_ceontos:1.2</span><br></pre></td></tr></tbody></table></figure></li><li><p>查看效果：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker run -it new_ceontos:1.2</span></span><br><span class="line"><span class="comment"># 发现工作目录是 /usr/local</span></span><br><span class="line">[root@653b95461f2b <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment"># 一些命令也可以执行</span></span><br><span class="line">[root@653b95461f2b <span class="built_in">local</span>]<span class="comment"># ifconfig</span></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.18.0.6  netmask 255.255.0.0  broadcast 172.18.255.255</span><br><span class="line">        ether 02:42:ac:12:00:06  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@653b95461f2b <span class="built_in">local</span>]<span class="comment"># vim</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~                                                                                                                                               </span><br><span class="line">~                                                                                           </span><br></pre></td></tr></tbody></table></figure></li><li><p>查看镜像的构建历史：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker history new_ceontos:1.2</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">30e7e21aa1ad   11 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh" "-c" "/bin…   0B        </span></span><br><span class="line">76922605002d   11 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span></span><br><span class="line">a700583c8e1f   11 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh" "-c" "echo…   0B        </span></span><br><span class="line">84455e325565   11 minutes ago   /bin/sh -c <span class="comment">#(nop)  EXPOSE 80                    0B        </span></span><br><span class="line">549ff08ad87d   11 minutes ago   /bin/sh -c yum -y install net-tools             14.3MB    </span><br><span class="line">fc67fe1c8167   11 minutes ago   /bin/sh -c yum -y install vim                   58MB      </span><br><span class="line">4206512d4d06   11 minutes ago   /bin/sh -c <span class="comment">#(nop) WORKDIR /usr/local            0B        </span></span><br><span class="line">f49aff605737   11 minutes ago   /bin/sh -c <span class="comment">#(nop)  ENV MYPATH=/usr/local        0B        </span></span><br><span class="line">8b55dbb5776a   11 minutes ago   /bin/sh -c <span class="comment">#(nop)  MAINTAINER zhang&lt;14046447…   0B        </span></span><br><span class="line">300e315adb2f   5 months ago     /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/bash"]            0B        </span></span><br><span class="line">&lt;missing&gt;      5 months ago     /bin/sh -c <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B        </span></span><br><span class="line">&lt;missing&gt;      5 months ago     /bin/sh -c <span class="comment">#(nop) ADD file:bd7a2aed6ede423b7…   209MB    </span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="制作 Tomcat 镜像">制作 Tomcat 镜像</h2><ol><li><p>准备镜像文件 <code>tomcat 压缩包</code> ，<code>JDK 压缩包</code></p></li><li><p>将两个安装和 <code>Dockerfile</code> 文件导入服务器</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516155027189.png" alt="image-20210516155027189"></p></li><li><p>编写 Dockerfile 文件：</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line">MAINTAINET zhang&lt;<span class="number">1404644784</span>@qq.com&gt;</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> readme.txt /usr/<span class="built_in">local</span>/readme.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u291-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-10.0.6.tar.gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_291</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">10.0</span>.<span class="number">6</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="number">10.0</span>.<span class="number">6</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/<span class="built_in">local</span>/apache-tomcat-10.0.6/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-10.0.6/bin/logs/catalina.out</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>构建镜像</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z test]# ls</span><br><span class="line">apache-tomcat-10.0.6.tar.gz  dockerfile  jdk-8u291-linux-aarch64.tar.gz</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z test]# docker build -t diytomcat:1.0 .</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516155148513.png" alt="image-20210516155148513"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516155219412.png" alt="image-20210516155219412"></p></li><li><p>启动镜像，访问测试</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker run -d -p 8080:8080 --name test-tomcat -v /home/test/index:/usr/local/apache-tomcat-10.0.6/webapps/test -v /home/test/tomcat-logs/:/usr/local/apache-tomcat-10.0.6/logs diytomcat:1.0</span></span><br><span class="line"></span><br><span class="line">599b8cced9e5026b009a25b993dce1fa51ab2a8523f6604a96202158fb84db16</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516164942941.png" alt="image-20210516164942941"></p></li><li><p>发布项目（由于做了卷挂载，我们可以直接在本地编写项目就可以发布了）：</p><p>在主机目录部署一个静态项目测试：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516170652430.png" alt="image-20210516170652430"></p><p>由于我们之前挂载的是 <code>webapps/test</code>，所以外网访问 <code>ip:8080/test</code> 就可以看到效果了。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516170841699.png" alt="image-20210516170841699"></p></li></ol><h2 id="发布自己的镜像">发布自己的镜像</h2><h3 id="在 DockerHub 上发布">在 DockerHub 上发布</h3><ol><li><p>注册一个账号。地址：<a class="link" href="https://hub.docker.com/">https://hub.docker.com/<i class="fas fa-external-link-alt"></i></a></p></li><li><p>在服务器上登陆 Docker</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker login --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log <span class="keyword">in</span> to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br></pre></td></tr></tbody></table></figure></li><li><p>在我们的服务器上提交自己的镜像（ <code>此时镜像的名字要改成 ---- 用户名 / 镜像名</code> ）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接推送会导致拒绝</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker push diytomcat:1.0</span></span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">a060fcb7eeae: Preparing </span><br><span class="line">68c5e3b0f4b8: Preparing </span><br><span class="line">0593ccf15be8: Preparing </span><br><span class="line">31211d2560f3: Preparing </span><br><span class="line">2653d992f4ef: Preparing </span><br><span class="line">denied: requested access to the resource is denied</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个 用户名 / 镜像名 的镜像再把这个镜像推上去</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker tag bc8ce317425c zhangruwang/diytomcat</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY              TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">diytomcat               1.0       bc8ce317425c   44 minutes ago   643MB</span><br><span class="line">diytomcat               latest    bc8ce317425c   44 minutes ago   643MB</span><br><span class="line">zhangruwang/diytomcat   latest    bc8ce317425c   44 minutes ago   643MB</span><br><span class="line">centos                  latest    300e315adb2f   5 months ago     209MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送成功</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker push zhangruwang/diytomcat</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [docker.io/zhangruwang/diytomcat]</span><br><span class="line">a060fcb7eeae: Pushed </span><br><span class="line">68c5e3b0f4b8: Pushed </span><br><span class="line">0593ccf15be8: Pushed </span><br><span class="line">31211d2560f3: Pushed </span><br><span class="line">2653d992f4ef: Pushed </span><br><span class="line">latest: digest: sha256:589e18e8e705f3a743ca7838301ec6b8f83c40f1e9b618315c6f4e584a4baaa7 size: 1374</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516174145349.png" alt="image-20210516174145349"></p></li><li><p>测试下载镜像：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker pull zhangruwang/diytomcat</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from zhangruwang/diytomcat</span><br><span class="line">Digest: sha256:589e18e8e705f3a743ca7838301ec6b8f83c40f1e9b618315c6f4e584a4baaa7</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> zhangruwang/diytomcat:latest</span><br><span class="line">docker.io/zhangruwang/diytomcat:latest</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="在阿里云镜像上发布">在阿里云镜像上发布</h3><ol><li><p>登陆阿里云</p></li><li><p>找到容器镜像服务</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516174458107.png" alt="image-20210516174458107"></p></li><li><p>创建命名空间</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516174433215.png" alt="image-20210516174433215"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516174630249.png" alt="image-20210516174630249"></p></li><li><p>创建容器镜像</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516174719504.png" alt="image-20210516174719504"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516174818648.png" alt="image-20210516174818648"></p></li><li><pre><code class="language-bash"># 登陆[root@izwz91mv6i3x6k12jjqh60z ~]# sudo docker login --username=xxxx registry.cn-beijing.aliyuncs.comPassword: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded#添加 tag[root@izwz91mv6i3x6k12jjqh60z ~]# sudo docker tag bc8ce317425c  registry.cn-beijing.aliyuncs.com/sky23333/diytomcat[root@izwz91mv6i3x6k12jjqh60z ~]# docker imagesREPOSITORY                                            TAG       IMAGE ID       CREATED             SIZEdiytomcat                                             1.0       bc8ce317425c   About an hour ago   643MBdiytomcat                                             latest    bc8ce317425c   About an hour ago   643MBzhangruwang/diytomcat                                 latest    bc8ce317425c   About an hour ago   643MBregistry.cn-beijing.aliyuncs.com/sky23333/diytomcat   latest    bc8ce317425c   About an hour ago   643MBcentos                                                latest    300e315adb2f   5 months ago        209MB#推送[root@izwz91mv6i3x6k12jjqh60z ~]# sudo docker push registry.cn-beijing.aliyuncs.com/sky23333/diytomcatUsing default tag: latestThe push refers to repository [registry.cn-beijing.aliyuncs.com/sky23333/diytomcat]a060fcb7eeae: Pushed 68c5e3b0f4b8: Pushed 0593ccf15be8: Pushed 31211d2560f3: Pushed 2653d992f4ef: Pushed latest: digest: sha256:589e18e8e705f3a743ca7838301ec6b8f83c40f1e9b618315c6f4e584a4baaa7 size: 1374#拉取[root@izwz91mv6i3x6k12jjqh60z ~]# sudo docker pull registry.cn-beijing.aliyuncs.com/sky23333/diytomcatUsing default tag: latestlatest: Pulling from sky23333/diytomcatDigest: sha256:589e18e8e705f3a743ca7838301ec6b8f83c40f1e9b618315c6f4e584a4baaa7Status: Image is up to date for registry.cn-beijing.aliyuncs.com/sky23333/diytomcat:latestregistry.cn-beijing.aliyuncs.com/sky23333/diytomcat:latest</code></pre></li></ol><h2 id="总结">总结</h2><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210516175542014.png" alt="image-20210516175542014" style="zoom: 67%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Dockerfile&lt;/h1&gt;
&lt;h2 id=&quot;什么是 DockerfIle&quot;&gt;什么是 DockerfIle?&lt;/h2&gt;
&lt;p&gt;Dockerfile 就是用来 &lt;code&gt; 构建 Docker 镜像 &lt;/code&gt; 的构建文件。一种命令脚本。&lt;code&gt;通过这个脚本可以生</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 网络</title>
    <link href="http://blog.sky123.top/2021/05/28/docker/Docker08docker%E7%BD%91%E7%BB%9C/"/>
    <id>http://blog.sky123.top/2021/05/28/docker/Docker08docker%E7%BD%91%E7%BB%9C/</id>
    <published>2021-05-27T16:00:00.000Z</published>
    <updated>2021-05-27T04:35:53.575Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker 网络</h1><h2 id="Docker0">Docker0</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># ip addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本机回环地址 127.0.0.1/8</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云内网地址  172.17.7.116/16</span></span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:16:3e:0e:35:6a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.7.116/18 brd 172.17.63.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 313667957sec preferred_lft 313667957sec</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker0 地址 172.18.0.1/16</span></span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN </span><br><span class="line">    link/ether 02:42:88:ea:49:a4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Docker 是如何处理容器网络访问的？">Docker 是如何处理容器网络访问的？</h2><p>我们每启动一个容器，Docker 就会给容器自动分配一个 <code>IP</code>，只要安装了 <code>Docker</code> ，就会有一个网卡 <code>Docker0</code> 桥接模式，使用的技术是 <code>evth-pairt</code> 技术。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line">2d9f156c40335f1c105e47e60b751b3e3a094808fbdeeca65856ac26291966b9</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络，发现得到一个 eth0@if91 的 Ip 地址  (90---91)</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec tomcat01 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">90: eth0@if91: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 测试主机是否能 Ping 通</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># ping 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.078 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.062 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.061 ms</span><br><span class="line">^C</span><br><span class="line">--- 172.18.0.2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 1999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.061/0.067/0.078/0.007 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次测试 ip addr, 发现多了一对网卡（ (91---90)）</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link/ether 00:16:3e:0e:35:6a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.7.116/18 brd 172.17.63.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 313667249sec preferred_lft 313667249sec</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP </span><br><span class="line">    link/ether 02:42:88:ea:49:a4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">91: veth57aecab@if90: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP </span><br><span class="line">    link/ether ae:a3:d9:3e:9f:7e brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br></pre></td></tr></tbody></table></figure><p>总结：我们发现这个容器带来的网卡都是一对对的。<code>evth-pair</code> 就是一对虚拟设备接口，他们都是成对出现的，一端连着协议，一段彼此相连。正因为这个特性，<code>evth-pair</code> 充当一个桥梁，连接着各种虚拟网络设备。<code>OpebStac,Docker 容器 </code> 之间的连接，<code>OVS</code>的连接都是使用的这个技术。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再开启一个容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name tomcat02 tomcat</span></span><br><span class="line">d45372d1407871511b6089434b41d48c18dcc0972571114f47800be5a76eda1c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器 tomcat01 ip 地址</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec tomcat01 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">90: eth0@if91: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器 tomcat02 ip 地址</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec tomcat02 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">92: eth0@if93: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.3/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="comment"># 查看容器 tomcat02 能否 ping 通 tomcat01</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec tomcat02 ping 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.106 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.078 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.073 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.073 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=5 ttl=64 time=0.071 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=6 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=7 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=8 ttl=64 time=0.075 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=9 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=10 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=11 ttl=64 time=0.072 ms</span><br></pre></td></tr></tbody></table></figure><h3 id="容器网络访问原理">容器网络访问原理</h3><img lazyload="" src="/images/loading.svg" data-src="C:/Users/zhangruwang/Desktop/Docker 学习.assets/image-20210221223442839.png" alt="image-20210221223442839" style="zoom: 67%;"><p>结论：<code>tomcat01</code>和 <code>tomcat02</code> 共用一个路由器，Docker0。所有容器在不指定网络的情况下，都是由 <code>Docker0</code> 路由给容器分配一个默认的可用 IP。Docker 中所有的网络接口都是虚拟的。（在内网中转发效率很高），只要容器删除，对应的网桥就没了。</p><img lazyload="" src="/images/loading.svg" data-src="C:/Users/zhangruwang/Desktop/Docker 学习.assets/image-20210221223718007.png" alt="image-20210221223718007" style="zoom: 67%;"><h3 id="–link 技术">–link 技术</h3><p>问题：假设我们编写了一个微服务，<code>database.url=ip</code> ，怎么在项目不重启的情况下，当数据库的 <code>IP</code> 换掉时，如果只使用 <code>IP</code>访问连接容器是不可以的，可以用容器名字访问连接容器？</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED       STATUS       PORTS                                         NAMES</span><br><span class="line">d45372d14078   tomcat    <span class="string">"catalina.sh run"</span>   9 hours ago   Up 9 hours   0.0.0.0:49156-&gt;8080/tcp, :::49156-&gt;8080/tcp   tomcat02</span><br><span class="line">2d9f156c4033   tomcat    <span class="string">"catalina.sh run"</span>   9 hours ago   Up 9 hours   0.0.0.0:49155-&gt;8080/tcp, :::49155-&gt;8080/tcp   tomcat01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常情况下是不能直接用容器名字 ping</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat01 ping tomcat02</span></span><br><span class="line">ping: tomcat02: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用  --link 之后测试可以使用名字 ping</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name  tomcat03 --link tomcat02 tomcat</span></span><br><span class="line">29bb33b11f8ef774df9871f48acf3223e3b91f60ea0f8e1bd2a4f1307fd3da54</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat03 ping tomcat02</span></span><br><span class="line">PING tomcat02 (172.18.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=1 ttl=64 time=0.116 ms</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=2 ttl=64 time=0.073 ms</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=3 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=4 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from tomcat02 (172.18.0.3): icmp_seq=5 ttl=64 time=0.074 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat02 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 5ms</span><br><span class="line">rtt min/avg/max/mdev = 0.073/0.082/0.116/0.017 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现这只能正向 ping 通，不能反向</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat02 ping tomcat03</span></span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></tbody></table></figure><p>查看网络配置信息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">d71469651905   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">4210c11fb888   host      host      <span class="built_in">local</span></span><br><span class="line">15f30a8dc35d   none      null      <span class="built_in">local</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker network inspect bridge</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518081532255.png" alt="image-20210518081532255"></p><h3 id="–link 原理">–link 原理</h3><p>查看 <code>host</code> 配置，发现 <code>--link</code> 的本质就是增加了一个 <code>172.18.0.3tomcat02 d45372d14078</code> 网络配置。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat03 cat /etc/hosts</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.18.0.3tomcat02 d45372d14078</span><br><span class="line">172.18.0.429bb33b11f8e</span><br></pre></td></tr></tbody></table></figure><p>总结：Docker 已经不建议使用 <code>--link</code> ，为了解决不支持容器名访问连接的问题，我们可以使用 <code>自定义网络</code>。</p><h3 id="自定义网络">自定义网络</h3><p>查看所有的 <code>Docker</code> 网络</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518082217281.png" alt="image-20210518082217281"></p><p>网络模式</p><ul><li>bridge：桥接 docker（默认，我们自定义的也是使用这个模式）</li><li>null：不配置网络</li><li>host：和宿主机共享网络</li><li>container：容器网络连通</li></ul><p>自定义一个网络</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们直接使用  docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line"><span class="comment"># 实际上相当于  docker run -d -P --name tomcat01 --net bridge tomcat</span></span><br><span class="line"><span class="comment">#bridge 就是默认的 docker 网络</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span></span><br><span class="line">d1ede6bb4ad9eee72f847aba4963a98a46503e65565e73728bf3c9514c83ba5b</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">d71469651905   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">4210c11fb888   host      host      <span class="built_in">local</span></span><br><span class="line">d1ede6bb4ad9   mynet     bridge    <span class="built_in">local</span></span><br><span class="line">15f30a8dc35d   none      null      <span class="built_in">local</span></span><br></pre></td></tr></tbody></table></figure><p>搭建好网络之后可以测试一下（<code>自定义网络支持使用容器名 ping 通</code>）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建容器连接自定义网络</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name tomcat-net-01 --net mynet tomcat</span></span><br><span class="line">ea54eb784ff876809289e6395e496102c818c3b462abd1ca24615739ddfa0704</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name tomcat-net-02 --net mynet tomcat</span></span><br><span class="line">fc645c243cf9f423107410969404133dada0eff3d572dd9940bf1233f16b8e84</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否可以直接 ping </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat-net-01 ping tomcat-net-02</span></span><br><span class="line">PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.085 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.069 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=4 ttl=64 time=0.072 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-net-02 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.068/0.073/0.085/0.010 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否可以直接 ping </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat-net-02 ping tomcat-net-01</span></span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.077 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.083 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=4 ttl=64 time=0.075 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-net-01 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3ms</span><br><span class="line">rtt min/avg/max/mdev = 0.059/0.073/0.083/0.012 ms</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>总结：自定义网络的好处，可以使不同的集群使用不同的网络，保证集群是安全健康的。</p><h3 id="不同网络的连通问题">不同网络的连通问题</h3><p>自定义网络的问题：两个连接了不同网卡网络的容器怎么 <code>ping</code> 通？使用容器连接网络命令！</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518084738578.png" alt="image-20210518084738578"></p><p>使用容器连接网络命令</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518084830260.png" alt="image-20210518084830260"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker network connect mynet tomcat01</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker network inspect mynet</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518085327772.png" alt="image-20210518085327772"></p><p>发现：连通之后就是将 <code>tomcat01</code> 放到了 <code>mynet</code> 网络中。</p><p>测试是否可以连通：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连通成功</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat01 ping tomcat-net-01</span></span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.087 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.078 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.081 ms</span><br><span class="line">^C</span><br><span class="line">--- tomcat-net-01 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 3ms</span><br><span class="line">rtt min/avg/max/mdev = 0.078/0.082/0.087/0.003 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 未加入网络的连通失败</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name tomcat02 tomcat</span></span><br><span class="line">40c9e2d12adec923c53139b0fea151e811d1341c81e813a1497b21f34829a5d0</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat02 ping tomcat-net-01</span></span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker 网络&lt;/h1&gt;
&lt;h2 id=&quot;Docker0&quot;&gt;Docker0&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 容器数据卷</title>
    <link href="http://blog.sky123.top/2021/05/27/docker/Docker06%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <id>http://blog.sky123.top/2021/05/27/docker/Docker06%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T04:34:40.538Z</updated>
    
    <content type="html"><![CDATA[<h1> 容器数据卷 </h1><h2 id="什么是容器数据卷？"> 什么是容器数据卷？</h2><p> 问题：如果数据都在容器中，那么我们容器删除，数据就会丢失！<code> 需求：数据可以持久化 </code></p><p> 解决：容器之间可以有一个数据共享技术，Docker 容器中产生的数据可以同步到本地。这就是卷技术。</p><p><code> 数据卷技术：实现容器与主机之间持久化和同步操作，容器与容器之间的数据共享。</code></p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514114611902.png" alt="image-20210514114611902" style="zoom: 67%;"><h2 id="使用数据卷"> 使用数据卷 </h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it -v 主机目录：容器内目录 </span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -it -v /home/ceshi:/home centos /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器内部查看文件 </span></span><br><span class="line">[root@1309cabd368d /]<span class="comment"># cd home</span></span><br><span class="line">[root@1309cabd368d home]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷键退出后，查看主机文件 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># cd ../</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z /]<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z /]<span class="comment"># cd home/ceshi</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ceshi]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED             STATUS             PORTS                                       NAMES</span><br><span class="line">e9a056333396   centos    <span class="string">"/bin/bash"</span>         16 minutes ago      Up 16 minutes                                                  strange_grothendieck</span><br><span class="line">39f11d68d64d   tomcat    <span class="string">"catalina.sh run"</span>   About an hour ago   Up About an hour   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看到容器有如下显示：说明配置成功 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker inspect e9a056333396</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514121726073.png" alt="image-20210514121726073"></p><h2 id="具名和匿名挂载"> 具名和匿名挂载 </h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名挂载（只写了容器内的路径）</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name nginx01 -v /etc/nginx nginx</span></span><br><span class="line">0f3e16361a94ebad9c33f1f95541221baeb34938f49cc22b0e2f4b48529ac5c5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 volume 卷情况 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     24570da35a5fed8d17719e297aee20858fea33320982d266ba9a42d272f96514</span><br><span class="line"><span class="built_in">local</span>     47031f8700fc06fda4053726e7df7e37df7917b0bf66c834ed94998c73049d3d</span><br><span class="line"><span class="built_in">local</span>     3454500b1f5630df52a4292c2b98bce1a77de4fed08a7e2a02606dd13482a410</span><br><span class="line"><span class="built_in">local</span>     cc0f07ef4be0cf2bf6c8e9395198e69744227cc10cba02aad9d9c08d613b7426</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具名加载 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -P --name nginx02 -v jumin-nginx:/etc/nginx nginx</span></span><br><span class="line">264b185cbcccb005f20eb63d86b01d39e39b99fe2e7626590ed41d2b1bc57838</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     24570da35a5fed8d17719e297aee20858fea33320982d266ba9a42d272f96514</span><br><span class="line"><span class="built_in">local</span>     47031f8700fc06fda4053726e7df7e37df7917b0bf66c834ed94998c73049d3d</span><br><span class="line"><span class="built_in">local</span>     3454500b1f5630df52a4292c2b98bce1a77de4fed08a7e2a02606dd13482a410</span><br><span class="line"><span class="built_in">local</span>     cc0f07ef4be0cf2bf6c8e9395198e69744227cc10cba02aad9d9c08d613b7426</span><br><span class="line"><span class="built_in">local</span>     jumin-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看这个卷 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker inspect jumin-nginx</span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"CreatedAt"</span>: <span class="string">"2021-05-14T15:41:29+08:00"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Labels"</span>: null,</span><br><span class="line">        <span class="string">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/jumin-nginx/_data"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"jumin-nginx"</span>,</span><br><span class="line">        <span class="string">"Options"</span>: null,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p> 总结：所有容器内的卷，在没有指定目录的情况下都是在 <code>/var/lib/docker/volumes/XXXXXX/_data</code> 。通过具名加载可以方便的找到我们的一个卷，大多数情况都是使用 <code> 具名加载 </code></p><p><code> 注意如下不同点：</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v 容器内路径            <span class="comment"># 匿名加载 </span></span><br><span class="line">-v 卷名: 容器内路径       <span class="comment"># 具名加载 </span></span><br><span class="line">-v / 宿主机路径: 容器路径   <span class="comment"># 指定路径加载 </span></span><br></pre></td></tr></tbody></table></figure><p><code> 拓展：</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 设置 ro rw 改变读写权限 </span></span><br><span class="line">ro <span class="comment"># 只读 </span></span><br><span class="line">rw <span class="comment"># 可读可写 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">docker run -d -P --name nginx02 -v jumin-nginx:/etc/nginx:ro nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若设置为只读就说明这个路径只能通过宿主机来操作，容器内部是无法操作的。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="什么是数据卷容器？"> 什么是数据卷容器？</h2><p> 容器之间使用数据卷技术实现数据同步和共享。</p><p> 两个或多个容器之间实现数据共享思路：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514163909043.png" alt="image-20210514163909043"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动容器 docker01</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z <span class="built_in">test</span>]<span class="comment"># docker run -it --name docker01 zhang_new_centos:1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器 docker02 --volumes-from docker01</span></span><br><span class="line">[root@0292e5d71d18 /]<span class="comment"># [root@izwz91mv6i3x6k12jjqh60z test]# docker run -it --name docker02 --volumes-from docker01  zhang_new_centos:1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态 </span></span><br><span class="line">[root@66a61d493849 /]<span class="comment"># [root@izwz91mv6i3x6k12jjqh60z test]# docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                  COMMAND                  CREATED             STATUS             PORTS                                       NAMES</span><br><span class="line">66a61d493849   zhang_new_centos:1.0   <span class="string">"/bin/sh -c /bin/bash"</span>   12 seconds ago      Up 11 seconds                                                  docker02</span><br><span class="line">0292e5d71d18   zhang_new_centos:1.0   <span class="string">"/bin/sh -c /bin/bash"</span>   26 seconds ago      Up 25 seconds                                                  docker01</span><br></pre></td></tr></tbody></table></figure><p> 通过 <code>docker inspect docker01</code>  发现：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514164643381.png" alt="image-20210514164643381"></p><p> 通过 <code>docker inspect docker02</code>  发现：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514164720528.png" alt="image-20210514164720528"></p><p> 说明成功实现了容器间的数据同步！！</p><blockquote><p> 注意：容器之间配置信息的传递，数据卷容器的生命周期会一直持续到没有容器使用为止。但一旦你持久化到了本地，这个时候，本地的数据是不会删除的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt; 容器数据卷 &lt;/h1&gt;
&lt;h2 id=&quot;什么是容器数据卷？&quot;&gt; 什么是容器数据卷？&lt;/h2&gt;
&lt;p&gt; 问题：如果数据都在容器中，那么我们容器删除，数据就会丢失！&lt;code&gt; 需求：数据可以持久化 &lt;/code&gt;&lt;/p&gt;
&lt;p&gt; 解决：容器之间可以有一个数据共享技术，Do</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 镜像</title>
    <link href="http://blog.sky123.top/2021/05/15/docker/Docker05%E9%95%9C%E5%83%8F/"/>
    <id>http://blog.sky123.top/2021/05/15/docker/Docker05%E9%95%9C%E5%83%8F/</id>
    <published>2021-05-14T16:00:00.000Z</published>
    <updated>2021-05-27T04:33:46.771Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker 镜像</h1><h2 id="镜像是什么？">镜像是什么？</h2><p>镜像是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码，运行时库，环境变量和配置文件。</p><h3 id="如何获得镜像">如何获得镜像</h3><ul><li>从远程仓库下载</li><li>朋友拷贝给你</li><li>自己制作一个镜像 <code>Dockerfile</code></li></ul><h3 id="UnionFS（联合文件系统）">UnionFS（联合文件系统）</h3><p><code>Docker</code>的镜像实际上由一层一层的文件系统组成，这种层级的文件系统<code>UnionFS</code>。</p><p>这是一种分层，轻量级且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ <code>Unite several directories into a single virtual filesystem</code> ）。<code>Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像。</code></p><h3 id="Docker 镜像加载原理">Docker 镜像加载原理</h3><p><code>bootfs(boot file system)</code>主要包含 <code>bootloader</code> 和<code>kernel</code>，bootloader 主要是引导加载 kernel，Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs。这一层与我们典型的 Linux/Unix 系统是一样的, 包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514101219281.png" alt="image-20210514101219281" style="zoom: 50%;"><p><code>rootfs(root file system)</code> 在 bootfs 之上。包含的就是典型 Linux 系统中的 <code>/dev, /proc, /bin, /etc 等标准目录和文件</code>。<code>rootfs</code> 就是各种不同的操作系统发行版，比如 Ubuntu，Centos 等等。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514100545302.png" alt="image-20210514100545302"></p><h3 id="镜像分层下载优点">镜像分层下载优点</h3><ul><li>可以精简镜像文件的大小，对于一个 OS，rootfs 可以很小，需要包含最基本的命令，工具库和程序库即可，因为底层直接使用 Host 和 kernel，自己只需要提供 rootfs 即可，由此对于不同的 Linux 发行版本，bootfs 基本是一致的。</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514101442249.png" alt="image-20210514101442249"></p><ul><li>资源共享，比如又多个镜像从相同的 base 镜像构建而来，主机只要在磁盘上保存一份 base 镜像，同时内存也只需加载一份 base 镜像即可为所有的容器服务了，而且镜像的每一层都能被共享。</li></ul><h3 id="Docker- 镜像理解">Docker 镜像理解</h3><ol><li><p>所有的镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，都会在当前镜像层上创建新的镜像层。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514103234209.png" alt=""></p></li><li><p>创建新的镜像层时，镜像始终是当前所有镜像的组合</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514103159914.png" alt="image-20210514103159914"></p></li><li><p>上层镜像层的文件要覆盖底层镜像层的文件时，会使得文件的更新版本作为一个新的镜像层添加到镜像中。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514103823330.png" alt="image-20210514103823330" style="zoom:80%;"></li><li><p>所有镜像层堆叠并合并，对外提供统一的视图</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514104009648.png" alt="image-20210514104009648"></p></li><li><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层会被加载到镜像的顶部。（这一层称为 <code>容器层 </code>，容器之下的都叫 <code> 镜像层</code>）。</p></li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514102529830.png" alt="image-20210514102529830"></p><h3 id="commit 镜像">commit 镜像</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker commit -m=" 提交的描述信息 " -a=" 作者 " 容器 ID 目标镜像名:[tag]</span></span><br></pre></td></tr></tbody></table></figure><p>参考教程：<a href="https://blog.sky123.top/2021/05/04/docker/Docker03%E9%83%A8%E7%BD%B2%E7%BB%83%E4%B9%A0/">Tomcat 部署练习</a></p><p>发现：官方的默认 tomcat 的 <code>webapp 文件夹</code> 并没有一些文件，需要自己手动拷贝。</p><p>解决：将我们操作过的容器 <code>commit</code> 提交成一个新的镜像，我们以后就直接使用我们修改过的镜像即可。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">39f11d68d64d   tomcat    <span class="string">"catalina.sh run"</span>   18 minutes ago   Up 18 minutes   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker commit -m=" 这个修改了的 tomcat" -a="zhang" 39f11d68d64d modified_tomcat:1.1</span></span><br><span class="line">sha256:57cab5f1479d5c0c6f85ba59415b8c7e9563d9907d32fc5d61a54a74945e57e7</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">modified_tomcat       1.1       57cab5f1479d   7 seconds ago   672MB</span><br><span class="line">tomcat                latest    c0e850d7b9bb   3 weeks ago     667MB</span><br><span class="line">nginx                 latest    62d49f9bab67   4 weeks ago     133MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   8 weeks ago     79.1MB</span><br><span class="line">centos                latest    300e315adb2f   5 months ago    209MB</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：如果想保存当前容器的状态，可以通过 commit 来提交，获得一个镜像。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker 镜像&lt;/h1&gt;
&lt;h2 id=&quot;镜像是什么？&quot;&gt;镜像是什么？&lt;/h2&gt;
&lt;p&gt;镜像是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码，运行时库，环境变量和配置文件。&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker04 可视化工具</title>
    <link href="http://blog.sky123.top/2021/05/14/docker/Docker04%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    <id>http://blog.sky123.top/2021/05/14/docker/Docker04%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/</id>
    <published>2021-05-13T16:00:00.000Z</published>
    <updated>2021-05-27T04:32:28.072Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker 可视化工具 </h1><h2 id="Portainer">Portainer</h2><p>Docker 图形化界面管理工具，提供一个后台面板供我们操作！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></tbody></table></figure><p> 访问测试：<a class="link" href="http://ip:8080/">http://ip:8080/<i class="fas fa-external-link-alt"></i></a> (可视化面板一般不使用，测试时使用)（注意一定要先在阿里云安全组防火墙配置中开放端口）：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512111853677.png" alt="image-20210512111853677"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512111931325.png" alt="image-20210512111931325"></p><p> 创建用户后可以看到：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512112815070.png" alt="image-20210512112815070"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512112854757.png" alt="image-20210512112854757"></p><h2 id="Rancher（CI-CD 再用）">Rancher（CI/CD 再用）</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker 可视化工具 &lt;/h1&gt;
&lt;h2 id=&quot;Portainer&quot;&gt;Portainer&lt;/h2&gt;
&lt;p&gt;Docker 图形化界面管理工具，提供一个后台面板供我们操作！&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 概述和安装</title>
    <link href="http://blog.sky123.top/2021/05/04/docker/Docker01%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.sky123.top/2021/05/04/docker/Docker01%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-27T04:24:26.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker 概述">Docker 概述</h2><h3 id="Docker 出现的原因">Docker 出现的原因</h3><p>一款产品有两个环境：开发（开发环境）和上线（运维环境）。</p><p>环境配置和切换过于麻烦，每一台机器都要部署环境（集群 Redis,ES,Hadoop），费时费力。</p><p>解决思路：发布一个项目 <code>（jar+(redis+mysql+jdk+es)）</code> 的同时能不能都带上环境安装打包？</p><p>传统思路：开发项目，运维部署项目和环境配置。</p><p>现在：开发打包部署上线，一套流程做完。</p><p><code>Docker 为以上问题，提出了解决方案！</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422110559011.png" alt="image-20210422110559011"></p><p>Docker 的思想来自于集装箱：通过特殊的隔离机制，将服务器利用到机制。</p><h3 id="Docker 历史">Docker 历史</h3><blockquote><p>1.Docker 诞生于 2013 年</p></blockquote><blockquote><p>2.Docker &amp; LXC：Docker 的第一个执行环境：LXC；但从 0.9 版本开始被 Libcontainer 取代</p></blockquote><blockquote><p>3.Docker &amp; Libcontainer：Libcontainer 为 Docker 封装了 Linux 提供的基础功能，如 cgroups，namespaces，netlink 和 netfilter 等</p></blockquote><blockquote><p>4.Docker &amp; RunC： 2015 年，Docker 发布了 RunC，一个轻量级的跨平台的容器运行；可以直接利用 Libcontainer 运行容器</p></blockquote><blockquote><p>5.Docker &amp; OCI（The Open Containers Initiative）: OCI 是一个轻量级的开放式管理架构，由 Docker，CoreOS 和容器行业的其他领导厂商 2015 年建立，维护一些项目，制定容器运行的规范等</p></blockquote><blockquote><p>6.Docker &amp; Containerd： 2016 年，Docker 分拆了 Containerd，并将其捐献给了社区；使得 Docker 将容器的管理功能移出 Docker 的核心引擎并移入了一个单独的守护进程（containerd）</p></blockquote><p>在容器技术出来以前，都是使用虚拟机技术，相比于虚拟机几个 G, 几分钟的启动时间，Docker 做到了几个 M 甚至几 KB 的容量和秒级开启时间，这主要得益于它并不像虚拟机虚拟出操作系统或者内核，而是只保留了最核心的环境，十分的小巧。<code>所有的程序员都必须要会 docker!</code></p><h3 id="Docker 介绍">Docker 介绍</h3><p><code>Docker 是基于 GO 语言开发的开源项目！！</code></p><p>官网：<a class="link" href="https://www.docker.com/">https://www.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p>文档地址：<a class="link" href="https://docs.docker.com/">https://docs.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p>仓库地址：<a class="link" href="https://hub.docker.com/">https://hub.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422111746659.png" alt="image-20210422111746659"></p><h3 id="Docker 与虚拟机的比较">Docker 与虚拟机的比较</h3><p>虚拟机技术缺点：启动慢，占用资源多，冗余步骤多</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422115546688.png" alt="image-20210422115546688" style="zoom:50%;"><p>Docker 容器化技术：不是模拟出一个完整的操作系统。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422115733382.png" alt="image-20210422115733382" style="zoom:50%;"><p>总结：</p><ol><li>传统虚拟机：虚拟出一系列硬件，运行一个完整的操作系统，然后在这个系统安装和运行软件</li><li>容器内的应用直接运行在宿主机上，容器没有自己的内核，也没有虚拟出硬件，所以十分轻便</li><li>每个容器是相互隔离的，每个容器都有一个属于自己的文件系统，互不影响。</li></ol><h3 id="Docker 作用">Docker 作用</h3><p>可以实现了 <code>DevOps(开发，运维)</code></p><ol><li>应用更快速的交付和部署：打包镜像发布测试，一键运行</li><li>更便捷的升级和扩缩容：使用了 Docker，部署应用就像搭积木一个，项目打包为一个镜像，方便扩展</li><li>更简单的系统运维：在容器化之后，开发和测试环境都是高度一致的。</li><li>更高效的计算资源利用：Docker 是内核级别的虚拟化，可以在一个物理机上运行多个容器实例，容器的性能可以被压榨到极致。</li></ol><h2 id="Docker 基本组成">Docker 基本组成</h2><h3 id="架构图">架构图</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210221182251636.png" alt="image-20210221182251636"></p><h3 id="基本概念">基本概念</h3><ol><li><p>镜像<code>（image）</code>：docker 镜像好比是一个模板，可以通过这个模板创建容器服务，tomcat 镜像 ===》run==》tomcat01 容器，通过镜像可以创建多个容器（最终服务运行或项目运行就是在容器中的）</p></li><li><p>容器 <code>（container）</code>：docker 利用容器技术，独立地运行一个或一组应用，通过<code>image</code> 来创建。</p><p>启动，停止，删除，基本命令</p><p>目前就可以将容器理解为一个简单的 Linux 系统</p></li><li><p>仓库<code>（repository）</code>：仓库是存放镜像的地方。有公有和私有仓库之分。</p><p>Docker Hub(默认是国外的)，阿里云。。。都有容器服务器（配置镜像加速）</p></li></ol><h2 id="Docker 安装">Docker 安装</h2><h3 id="环境准备：">环境准备：</h3><ol><li>Linux 基础</li><li>Linux 操作系统</li><li>使用 Xshell 连接远程服务器</li></ol><h3 id="查看环境：">查看环境：</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统内核是 3.10 以上的</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-514.26.2.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统信息</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"CentOS Linux"</span></span><br><span class="line">VERSION=<span class="string">"7 (Core)"</span></span><br><span class="line">ID=<span class="string">"centos"</span></span><br><span class="line">ID_LIKE=<span class="string">"rhel fedora"</span></span><br><span class="line">VERSION_ID=<span class="string">"7"</span></span><br><span class="line">PRETTY_NAME=<span class="string">"CentOS Linux 7 (Core)"</span></span><br><span class="line">ANSI_COLOR=<span class="string">"0;31"</span></span><br><span class="line">CPE_NAME=<span class="string">"cpe:/o:centos:centos:7"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.centos.org/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.centos.org/"</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">"CentOS-7"</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">"7"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">"centos"</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">"7"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="安装教程：">安装教程：</h3><p>可以查看官网文档：<a class="link" href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210423220917139.png" alt="image-20210423220917139"></p><p>对于 <code>CentOS</code> 系统：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先卸载旧版本 Docker 系统（如果有的话）</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># sudo yum remove docker \</span></span><br><span class="line">                   docker-client \</span><br><span class="line">                   docker-client-latest \</span><br><span class="line">                   docker-common \</span><br><span class="line">                   docker-latest \</span><br><span class="line">                   docker-latest-logrotate \</span><br><span class="line">                   docker-logrotate \</span><br><span class="line">                   docker-engine</span><br><span class="line">                   </span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-client</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-client-latest</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-common</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-latest</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-latest-logrotate</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-logrotate</span><br><span class="line">No Match <span class="keyword">for</span> argument: docker-engine</span><br><span class="line">No Packages marked <span class="keyword">for</span> removal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装需要的安装包</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># yum install -y yum-utils</span></span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  yum-utils.noarch 0:1.1.31-54.el7_8                                                                                                           </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  libxml2-python.x86_64 0:2.9.1-6.el7.5           python-chardet.noarch 0:2.2.1-3.el7           python-kitchen.noarch 0:1.1.1-5.el7          </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  libxml2.x86_64 0:2.9.1-6.el7.5                                                                                                               </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置下载 Docker 镜像</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker，一路输入确定安装即可</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  audit-libs-python.x86_64 0:2.8.5-4.el7                                  checkpolicy.x86_64 0:2.5-8.el7                                       </span><br><span class="line">  container-selinux.noarch 2:2.119.2-1.911c772.el7_8                      docker-ce-rootless-extras.x86_64 0:20.10.6-3.el7                     </span><br><span class="line">  docker-scan-plugin.x86_64 0:0.7.0-3.el7                                 fuse-overlayfs.x86_64 0:0.7.2-6.el7_8                                </span><br><span class="line">  fuse3-libs.x86_64 0:3.6.1-4.el7                                         libcgroup.x86_64 0:0.41-21.el7                                       </span><br><span class="line">  libseccomp.x86_64 0:2.3.1-4.el7                                         libsemanage-python.x86_64 0:2.5-14.el7                               </span><br><span class="line">  policycoreutils-python.x86_64 0:2.5-34.el7                              python-IPy.noarch 0:0.75-6.el7                                       </span><br><span class="line">  setools-libs.x86_64 0:3.3.8-4.el7                                       slirp4netns.x86_64 0:0.4.3-4.el7_8                                   </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  audit.x86_64 0:2.8.5-4.el7                             audit-libs.x86_64 0:2.8.5-4.el7         libselinux.x86_64 0:2.5-15.el7               </span><br><span class="line">  libselinux-python.x86_64 0:2.5-15.el7                  libselinux-utils.x86_64 0:2.5-15.el7    libsemanage.x86_64 0:2.5-14.el7              </span><br><span class="line">  libsepol.x86_64 0:2.5-10.el7                           policycoreutils.x86_64 0:2.5-34.el7     selinux-policy.noarch 0:3.13.1-268.el7_9.2   </span><br><span class="line">  selinux-policy-targeted.noarch 0:3.13.1-268.el7_9.2   </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="启动测试：">启动测试：</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 docker 是否安装成功，和版本</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker -v</span></span><br><span class="line"></span><br><span class="line">Docker version 20.10.6, build 370c289</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># systemctl start docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run hello-world</span></span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete </span><br><span class="line">Digest: sha256:f2266cbfc127c960fd30e76b7c792dc23b588c0db76233517e1891a4e357d519</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下载的 hello-world 镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world   latest    d1165f221234   7 weeks ago   13.3kB</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="卸载 Docker：">卸载 Docker：</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件  </span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#/var/lib/docker  是 docker 的默认工作路径</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Docker 配置阿里云镜像仓库地址">Docker 配置阿里云镜像仓库地址</h2><p>参考教程：<a class="link" href="https://www.cnblogs.com/allenjing/p/12575972.html">https://www.cnblogs.com/allenjing/p/12575972.html<i class="fas fa-external-link-alt"></i></a></p><p>登陆阿里云，找到如下选项：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428092132408.png" alt="image-20210428092132408"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428092924853.png" alt="image-20210428092924853"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://bjyjzfeq.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><h2 id="Docker 原理">Docker 原理</h2><h3 id="helloworld 的运行流程：">helloworld 的运行流程：</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428121216893.png" alt="image-20210428121216893"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428121520142.png" alt="image-20210428121520142"></p><h3 id="底层原理：">底层原理：</h3><p>Docker 工作原理：Docker 是一个 <code>CS 结构</code> 的系统，Docker 的守护进程运行在主机上，通过 Socket 从客户端访问。</p><p>DockerServer 接收到 DokcerClient 的指令，就会执行这个命令。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428122527218.png" alt="image-20210428122527218"></p><h3 id="Docker 为什么比 VM 快？">Docker 为什么比 VM 快？</h3><ol><li>Docker 有着比虚拟机更少的抽象层</li><li>Docker 利用的是宿主机的内核，而 VM 需要的是 <code>Guest OS</code>。</li><li>新建一个容器时，Docker 不需要像虚拟机一样重新加载一个操作系统的内核。</li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428122751694.png" alt="image-20210428122751694"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428123110597.png" alt="image-20210428123110597"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker 概述&quot;&gt;Docker 概述&lt;/h2&gt;
&lt;h3 id=&quot;Docker 出现的原因&quot;&gt;Docker 出现的原因&lt;/h3&gt;
&lt;p&gt;一款产品有两个环境：开发（开发环境）和上线（运维环境）。&lt;/p&gt;
&lt;p&gt;环境配置和切换过于麻烦，每一台机器都要部署环境（集群 </summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 服务器防火墙端口配置</title>
    <link href="http://blog.sky123.top/2021/05/04/linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.sky123.top/2021/05/04/linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-04T02:24:52.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看防火墙状态"> 查看防火墙状态 </h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></tbody></table></figure><h3 id="开启、关闭防火墙"> 开启、关闭防火墙 </h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启 </span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭 </span></span><br><span class="line">systemctl start firewalld</span><br></pre></td></tr></tbody></table></figure><h3 id="开放指定端口"> 开放指定端口 </h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=1935/tcp --permanent</span><br><span class="line"> 命令含义：</span><br><span class="line">--zone #作用域 </span><br><span class="line">--add-port=1935/tcp #添加端口，格式为：端口 / 通讯协议 </span><br><span class="line">--permanent #永久生效，没有此参数重启后失效 </span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# firewall-cmd --zone=public --add-port=3304/tcp --permanent</span><br><span class="line">success</span><br></pre></td></tr></tbody></table></figure><h3 id="重启防火墙"> 重启防火墙 </h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></tbody></table></figure><h3 id="查看端口号"> 查看端口号 </h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">netstat -ntlp // 查看当前所有 tcp 端口·</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# netstat -ntlp </span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:3304            0.0.0.0:*               LISTEN      29109/docker-proxy  </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2185/sshd           </span><br><span class="line">tcp6       0      0 :::3304                 :::*                    LISTEN      29113/docker-proxy  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">netstat -ntulp |grep 3304 // 查看所有 3304 端口使用情况 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# netstat -ntulp |grep 3304</span><br><span class="line">tcp        0      0 0.0.0.0:3304            0.0.0.0:*               LISTEN      29109/docker-proxy  </span><br><span class="line">tcp6       0      0 :::3304                 :::*                    LISTEN      29113/docker-proxy  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="开放阿里云安全组"> 开放阿里云安全组 </h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504102358335.png" alt="image-20210504102358335"></p><p> 设置要开放的对应的端口 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504102424090.png" alt="image-20210504102424090"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;查看防火墙状态&quot;&gt; 查看防火墙状态 &lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
    <category term="服务器" scheme="http://blog.sky123.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用命令</title>
    <link href="http://blog.sky123.top/2021/05/04/docker/Docker02%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.sky123.top/2021/05/04/docker/Docker02%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-27T04:27:12.397Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker 常用命令 </h1><h3 id="帮助命令："> 帮助命令：</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示版本 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker version</span></span><br><span class="line"></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.6</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        370c289</span><br><span class="line"> Built:             Fri Apr  9 22:45:33 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.6</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       8728dd2</span><br><span class="line">  Built:            Fri Apr  9 22:43:57 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.4</span><br><span class="line">  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc93</span><br><span class="line">  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 Docker 的系统信息 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker info</span></span><br><span class="line"></span><br><span class="line">Client:</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class="line">  buildx: Build with BuildKit (Docker Inc., v0.5.1-docker)</span><br><span class="line">  scan: Docker Scan (Docker Inc.)</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 1</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 1</span><br><span class="line"> Images: 1</span><br><span class="line"> Server Version: 20.10.6</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: <span class="literal">true</span></span><br><span class="line">  Native Overlay Diff: <span class="literal">false</span></span><br><span class="line">  userxattr: <span class="literal">false</span></span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: <span class="built_in">local</span></span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class="line"> runc version: 12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class="line"> init version: de40ad0</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 3.10.0-514.26.2.el7.x86_64</span><br><span class="line"> Operating System: CentOS Linux 7 (Core)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 1</span><br><span class="line"> Total Memory: 1.796GiB</span><br><span class="line"> Name: izwz91mv6i3x6k12jjqh60z</span><br><span class="line"> ID: KA6F:5IVG:6OGX:WPVP:I74K:PAUV:EI5L:SGYK:3GRQ:E3DA:FVTQ:X4BM</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://bjyjzfeq.mirror.aliyuncs.com/</span><br><span class="line"> Live Restore Enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 帮助信息 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker --help</span></span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach     <span class="comment"># 当前 shell 下 attach 连接指定运行镜像 </span></span><br><span class="line">  build      <span class="comment"># 通过 dokcerfile 定制镜像 </span></span><br><span class="line">  commit     <span class="comment"># 提交当前容器为新的镜像 </span></span><br><span class="line">  cp         <span class="comment"># 从容器中拷贝指定文件或目录到宿主机 </span></span><br><span class="line">  create     <span class="comment"># 创建一个新的容器 ，同 run ，但不会启动容器 </span></span><br><span class="line">  diff       <span class="comment"># 查看 docker 容器变化 </span></span><br><span class="line">  events     <span class="comment"># 从 docker 服务器获取容器实时事件 </span></span><br><span class="line">  <span class="built_in">exec</span>       <span class="comment"># 在已存在的容器上运行命令 </span></span><br><span class="line">  <span class="built_in">export</span>     <span class="comment"># 导出容器的内容流作为一个 tar 归档文件（对应 import）</span></span><br><span class="line">  <span class="built_in">history</span>    <span class="comment"># 展示镜像的形成历史 </span></span><br><span class="line">  images     <span class="comment"># 列出系统当前所有镜像 </span></span><br><span class="line">  import     <span class="comment"># 从 tar 包中的内容创建一个新的文件系统映像（对应 export）</span></span><br><span class="line">  info       <span class="comment"># 查看系统相关信息 </span></span><br><span class="line">  inspect    <span class="comment"># 查看容器详细信息 </span></span><br><span class="line">  <span class="built_in">kill</span>       <span class="comment">#kill 指定的 docker 容器 </span></span><br><span class="line">  load       <span class="comment"># 从一个 tar 包中加载一个镜像（对应 save）</span></span><br><span class="line">  login      <span class="comment"># 注册或登陆一个 docker 源服务器 </span></span><br><span class="line">  <span class="built_in">logout</span>     <span class="comment"># 登出当前源服务器 </span></span><br><span class="line">  logs       <span class="comment"># 输出当前容器的日志内容 </span></span><br><span class="line">  pause      <span class="comment"># 暂停容器 </span></span><br><span class="line">  port       <span class="comment"># 查看映射端口对应的容器内部源端口 </span></span><br><span class="line">  ps         <span class="comment"># 列出容器列表 </span></span><br><span class="line">  pull       <span class="comment"># 从 docker 镜像源服务器拉取指定镜像或库镜像 </span></span><br><span class="line">  push       <span class="comment"># 推送指定镜像或者库镜像到 docker 源服务器 </span></span><br><span class="line">  rename     <span class="comment">#</span></span><br><span class="line">  restart    <span class="comment"># 重启运行的容器 </span></span><br><span class="line">  rm         <span class="comment"># 移除一个或多个容器 </span></span><br><span class="line">  rmi        <span class="comment"># 移除一个或多个镜像 </span></span><br><span class="line">  run        <span class="comment"># 创建一个新的容器并运行一个命令 </span></span><br><span class="line">  save       <span class="comment"># 保存一个镜像为一个 tar (对应 load)</span></span><br><span class="line">  search     <span class="comment"># 在 docker hub 中搜索镜像 </span></span><br><span class="line">  start      <span class="comment"># 启动容器 </span></span><br><span class="line">  stop       <span class="comment"># 停止容器 </span></span><br><span class="line">  tag        <span class="comment"># 给源镜像打标签 </span></span><br><span class="line">  top        <span class="comment"># 查看容器中运行的进程消息 </span></span><br><span class="line">  unpause    <span class="comment"># 取消暂停容器 </span></span><br><span class="line">  version    <span class="comment"># 查看容器版本号 </span></span><br><span class="line">  <span class="built_in">wait</span>       <span class="comment"># 获取容器停止时的退出状态值 </span></span><br></pre></td></tr></tbody></table></figure><h3 id="镜像命令："> 镜像命令：</h3><h4 id="docker-images">docker images</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主机上的所有本地镜像 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images help</span></span><br><span class="line"><span class="comment"># 解释 </span></span><br><span class="line">REPOSITORY：镜像的仓库源   </span><br><span class="line">TAG：镜像的标签 </span><br><span class="line">IMAGE ID：镜像的 ID   </span><br><span class="line">CREATED：创建时间   </span><br><span class="line">SIZE：大小 </span><br><span class="line"><span class="comment"># 可选项 </span></span><br><span class="line">-a   --all <span class="comment"># 列出所有镜像 </span></span><br><span class="line">-q   --quiet <span class="comment"># 只列出镜像的 ID</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world   latest    d1165f221234   7 weeks ago   13.3kB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="docker-search">docker search</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker search mysql</span></span><br><span class="line"></span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10777     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4058      [OK] </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索镜像的 star&gt;3000 的镜像 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker search mysql --filter=stars=3000</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   10777     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4058      [OK]   </span><br></pre></td></tr></tbody></table></figure><h4 id="docker-pull">docker pull</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像 [:tag]</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker pull mysql</span></span><br><span class="line">Using default tag: latest  <span class="comment"># 不写 tag 默认就是 latest</span></span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">f7ec5a41d630: Pull complete <span class="comment"># 分层下载， docker image 的核心，联合文件系统 </span></span><br><span class="line">9444bb562699: Pull complete </span><br><span class="line">6a4207b96940: Pull complete </span><br><span class="line">181cefd361ce: Pull complete </span><br><span class="line">8a2090759d8a: Pull complete </span><br><span class="line">15f235e0d7ee: Pull complete </span><br><span class="line">d870539cd9db: Pull complete </span><br><span class="line">493aaa84617a: Pull complete </span><br><span class="line">bfc0e534fc78: Pull complete </span><br><span class="line">fae20d253f9d: Pull complete </span><br><span class="line">9350664305b3: Pull complete </span><br><span class="line">e47da95a5aab: Pull complete </span><br><span class="line">Digest: sha256:04ee7141256e83797ea4a84a4d31b1f1bc10111c8d1bc1879d52729ccd19e20a <span class="comment"># 文件签名 </span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:latest</span><br><span class="line">docker.io/library/mysql:latest <span class="comment"># 存放的镜像的文件真实地址 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价写法 </span></span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定版本下载 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">f7ec5a41d630: Already exists </span><br><span class="line">9444bb562699: Already exists </span><br><span class="line">6a4207b96940: Already exists </span><br><span class="line">181cefd361ce: Already exists </span><br><span class="line">8a2090759d8a: Already exists </span><br><span class="line">15f235e0d7ee: Already exists </span><br><span class="line">d870539cd9db: Already exists </span><br><span class="line">cb7af63cbefa: Pull complete </span><br><span class="line">151f1721bdbf: Pull complete </span><br><span class="line">fcd19c3dd488: Pull complete </span><br><span class="line">415af2aa5ddc: Pull complete </span><br><span class="line">Digest: sha256:a655529fdfcbaf0ef28984d68a3e21778e061c886ff458b677391924f62fb457</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">mysql         5.7       87eca374c0ed   8 days ago    447MB</span><br><span class="line">mysql         latest    0627ec6901db   8 days ago    556MB</span><br><span class="line">hello-world   latest    d1165f221234   7 weeks ago   13.3kB</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="docker-rmi">docker rmi</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除镜像 </span></span><br><span class="line"><span class="comment"># docker rmi 镜像 ID [镜像 ID,...]   删除没有运行容器的镜像 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker rmi 0627ec6901db</span></span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:04ee7141256e83797ea4a84a4d31b1f1bc10111c8d1bc1879d52729ccd19e20a</span><br><span class="line">Deleted: sha256:0627ec6901db4b2aed6ca7ab35e43e19838ba079fffe8fe1be66b6feaad694de</span><br><span class="line">Deleted: sha256:94d5db550d62032ddc8ad8d4cfef8bac06fe7d35757deb2f8638d0fdc1e89217</span><br><span class="line">Deleted: sha256:5fbbb0e9bfb8f2a4d665cc60aaf4876191c057898db276d2d030a0d6123afc8e</span><br><span class="line">Deleted: sha256:124a9d262ebecea284b6438b0a04766b076bd3f89cb0f29a8a475f26bf93911f</span><br><span class="line">Deleted: sha256:5aa37b6c8e31197ab2f357c09755bcb83228ff0fb69c2009a12b6eddb087e884</span><br><span class="line">Deleted: sha256:d0b1d5665c308823bbc5b8986d405e5202ade6994dfa00d8ff576eff372dd045</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker rmi -f 镜像 ID [镜像 ID,...]  删除连带删除容器的镜像 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker rmi -f d1165f221234</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:f2266cbfc127c960fd30e76b7c792dc23b588c0db76233517e1891a4e357d519</span><br><span class="line">Deleted: sha256:d1165f2212346b2bab48cb01c1e39ee8ad1be46b87873d9ca7a4e434980a7726</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker rmi -f $(docker images -aq)  删除所有容器和镜像 </span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="容器命令："> 容器命令：</h3><p> 前置环境，下载一个  <code>centos</code> 镜像 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker pull centos</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">7a0437f04f83: Pull complete </span><br><span class="line">Digest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br></pre></td></tr></tbody></table></figure><h4 id="新建并运行容器："> 新建并运行容器：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">  -d                        以后台方式运行，并打印容器 ID</span><br><span class="line">  --name=“string”                容器名字用于区分容器，</span><br><span class="line">  -p 指定容器的端口（设置主机和容器的端口映射）</span><br><span class="line">  -p ip: 主机端口: 容器端口（访问公网主机的端口可以访问到容器内容的端口）</span><br><span class="line">  -p 主机端口: 容器端口 </span><br><span class="line">  -p 容器端口 </span><br><span class="line">  -P                     随机指定端口 </span><br><span class="line">  -it        使用交互方式运行，进入容器内查看内容 </span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line"><span class="comment"># 容器内的 centos , 发现很多命令并不完善 </span></span><br><span class="line">[root@e77313cc0ef1 /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="comment"># 从容器中退出到主机 </span></span><br><span class="line">[root@e77313cc0ef1 /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 主机的 centos</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># ls</span></span><br><span class="line">docker-client  docker-client-latest  docker-common  docker-engine  docker-latest  docker-latest-logrotate  docker-logrotate</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="列出所有运行的容器："> 列出所有运行的容器：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line">-q 只显示容器编号 </span><br><span class="line">-a 列出当前正在运行的容器 + 带出历史运行过的容器 </span><br><span class="line">-n=? 显示最近创建的容器的个数 </span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">e77313cc0ef1   centos         <span class="string">"/bin/bash"</span>   3 minutes ago   Exited (0) 2 minutes ago             romantic_elgamal</span><br><span class="line">17d31c5f5553   centos         <span class="string">"/bin/bash"</span>   9 minutes ago   Exited (0) 9 minutes ago             os1</span><br><span class="line">19d5eac5de11   d1165f221234   <span class="string">"/hello"</span>      3 hours ago     Exited (0) 3 hours ago               naughty_williams</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps -n=2</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">e77313cc0ef1   centos    <span class="string">"/bin/bash"</span>   11 minutes ago   Exited (0) 9 minutes ago              romantic_elgamal</span><br><span class="line">17d31c5f5553   centos    <span class="string">"/bin/bash"</span>   16 minutes ago   Exited (0) 16 minutes ago             os1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="退出容器："> 退出容器：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 直接容器停止并退出 </span></span><br><span class="line">Ctrl + P + Q <span class="comment"># 容器不停止而退出 </span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line"><span class="comment"># 进入容器后按住快捷键 </span></span><br><span class="line">[root@f3a97eadb092 /]<span class="comment"># </span></span><br><span class="line"><span class="comment"># 发现返回了主机 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos    <span class="string">"/bin/bash"</span>   28 seconds ago   Up 27 seconds             thirsty_pasteur</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="删除容器："> 删除容器：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm [-f] 容器 ID <span class="comment"># 删除指定的容器，rm -f 表示强制删除正在运行的容器 </span></span><br><span class="line">docker rm -f $(docker ps -aq) <span class="comment"># 删除所有的容器 </span></span><br><span class="line">docker ps -a -q|xargs docker rm <span class="comment"># 删除所有容器 </span></span><br></pre></td></tr></tbody></table></figure><h4 id="启动和停止容器："> 启动和停止容器：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器 ID  <span class="comment"># 启动容器 </span></span><br><span class="line">docker restart 容器 ID <span class="comment"># 重启容器 </span></span><br><span class="line">docker stop 容器 ID <span class="comment"># 停止正在运行的容器 </span></span><br><span class="line">docker <span class="built_in">kill</span> 容器 ID <span class="comment"># 强制停止当前运行的容器 </span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos    <span class="string">"/bin/bash"</span>   28 seconds ago   Up 27 seconds             thirsty_pasteur</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker stop f3a97eadb092</span></span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker start f3a97eadb092</span></span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker restart f3a97eadb092</span></span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker kill  f3a97eadb092</span></span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos         <span class="string">"/bin/bash"</span>   12 minutes ago   Exited (137) 5 seconds ago             thirsty_pasteur</span><br><span class="line">e77313cc0ef1   centos         <span class="string">"/bin/bash"</span>   25 minutes ago   Exited (0) 23 minutes ago              romantic_elgamal</span><br><span class="line">17d31c5f5553   centos         <span class="string">"/bin/bash"</span>   30 minutes ago   Exited (0) 30 minutes ago              os1</span><br><span class="line">19d5eac5de11   d1165f221234   <span class="string">"/hello"</span>      4 hours ago      Exited (0) 4 hours ago                 naughty_williams</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker start f3a97eadb092</span></span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS         PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos    <span class="string">"/bin/bash"</span>   12 minutes ago   Up 2 seconds             thirsty_pasteur</span><br></pre></td></tr></tbody></table></figure><h4 id="后台启动容器："> 后台启动容器：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d centos</span></span><br><span class="line">ddb941029e1fd47abfbd83968afc2103b2685d3ee0cf3f7ec32cd6f6fee96aca</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见问题：-d 运行之后，docker ps 发现它并没有运行 </span></span><br><span class="line"><span class="comment"># 原因：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动停止 </span></span><br><span class="line"><span class="comment">#nginx 容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="查看日志："> 查看日志：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker logs --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow <span class="built_in">log</span> output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line">  -n, --tail string    显示的日志的条数 </span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自己写一段 shell 脚本 </span></span><br><span class="line">docker run -d centos /bin/sh -c <span class="string">"while true;do echo ios;sleep 1;done"</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d centos /bin/sh -c "while true;do echo ios;sleep 1;done"</span></span><br><span class="line">018801a5cdcfc762fb5def6d8f1ff3a7ec4d136f6b2812717937ee43a5f6ff66</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker logs 018801a5cdcfc762fb5def6d8f1ff3a7ec4d136f6b2812717937ee43a5f6ff66</span></span><br><span class="line">ios....</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="查看容器进程的信息："> 查看容器进程的信息：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker top 018801a5cdcf</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                9040                9015                0                   16:09               ?                   00:00:00            /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> ios;sleep 1;<span class="keyword">done</span></span><br><span class="line">root                9288                9040                0                   16:11               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="查看镜像中的元数据："> 查看镜像中的元数据：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker inspect 018801a5cdcf </span></span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"018801a5cdcfc762fb5def6d8f1ff3a7ec4d136f6b2812717937ee43a5f6ff66"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2021-04-28T08:09:10.127985045Z"</span>,</span><br><span class="line">        <span class="string">"Path"</span>: <span class="string">"/bin/sh"</span>,</span><br><span class="line">        <span class="string">"Args"</span>: [</span><br><span class="line">            <span class="string">"-c"</span>,</span><br><span class="line">            <span class="string">"while true;do echo ios;sleep 1;done"</span></span><br><span class="line">        ],</span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h4 id="进入当前正在运行的容器："> 进入当前正在运行的容器：</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通常容器都是使用后台方式运行的，需要进入容器，修改一些配置 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：docker exec 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span><br><span class="line"><span class="comment"># 查看正在运行的容器 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos    <span class="string">"/bin/sh -c 'while t…"</span>   21 hours ago   Up 21 hours             confident_mayer</span><br><span class="line">f79cbdf9c012   centos    <span class="string">"/bin/bash"</span>              21 hours ago   Up 21 hours             sweet_lehmann</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it 018801a5cdcf /bin/bash</span></span><br><span class="line">[root@018801a5cdcf /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="comment"># 查看容器内的进程 </span></span><br><span class="line">[root@018801a5cdcf /]<span class="comment"># ps -ef</span></span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 Apr28 ?        00:00:16 /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> ios;sleep 1;<span class="keyword">done</span></span><br><span class="line">root      9005     0  0 04:43 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      9042     1  0 04:43 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root      9043  9005  0 04:43 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：docker attach 进入容器正在执行的终端，不会执行新的进程 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker attach 018801a5cdcf</span></span><br><span class="line">ios</span><br><span class="line">ios</span><br><span class="line">ios</span><br><span class="line">ios</span><br><span class="line"><span class="comment"># 发现正在执行脚本。。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="拷贝文件到主机："> 拷贝文件到主机：</h4><p> 从容器中拷贝文件到主机上（拷贝目前是一个手动过程，未来使用 -v 卷技术可以实现自动拷贝）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行的容器 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos    <span class="string">"/bin/sh -c 'while t…"</span>   21 hours ago   Up 21 hours             confident_mayer</span><br><span class="line">f79cbdf9c012   centos    <span class="string">"/bin/bash"</span>              21 hours ago   Up 21 hours             sweet_lehmann</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看主机文件 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># ls</span></span><br><span class="line">docker-client  docker-client-latest  docker-common  docker-engine  docker-latest  docker-latest-logrotate  docker-logrotate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器，新建一个测试文件后退出 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker attach f79cbdf9c012</span></span><br><span class="line">[root@f79cbdf9c012 /]<span class="comment"># cd /home</span></span><br><span class="line">[root@f79cbdf9c012 home]<span class="comment"># ls</span></span><br><span class="line">[root@f79cbdf9c012 home]<span class="comment"># touch test.java</span></span><br><span class="line">[root@f79cbdf9c012 home]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看，发现容器已经不再运行 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos    <span class="string">"/bin/sh -c 'while t…"</span>   21 hours ago   Up 21 hours             confident_mayer</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS                      PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos         <span class="string">"/bin/sh -c 'while t…"</span>   21 hours ago   Up 21 hours                           confident_mayer</span><br><span class="line">f79cbdf9c012   centos         <span class="string">"/bin/bash"</span>              21 hours ago   Exited (0) 25 seconds ago </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件命令 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker cp f79cbdf9c012:/home/test.java /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否拷贝成功 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># cd /home</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z home]<span class="comment"># ls</span></span><br><span class="line">admin  test.java</span><br></pre></td></tr></tbody></table></figure><h4 id="小结"> 小结 </h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210221200910336.png" alt="image-20210221200910336"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker 常用命令 &lt;/h1&gt;
&lt;h3 id=&quot;帮助命令：&quot;&gt; 帮助命令：&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署练习</title>
    <link href="http://blog.sky123.top/2021/05/04/docker/Docker03%E9%83%A8%E7%BD%B2%E7%BB%83%E4%B9%A0/"/>
    <id>http://blog.sky123.top/2021/05/04/docker/Docker03%E9%83%A8%E7%BD%B2%E7%BB%83%E4%B9%A0/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-27T04:33:08.892Z</updated>
    
    <content type="html"><![CDATA[<h1>Docker 练习 </h1><h2 id="部署 Nginx"> 部署 Nginx</h2><ol><li> 搜索镜像，建议去 docker hub 搜索，可以看到帮助文档 </li><li> 下载镜像 </li><li> 运行测试 </li><li> 配置容器内的 ngnix 的配置文件 </li></ol><p><a class="link" href="https://hub.docker.com/">https://hub.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504094603067.png" alt="image-20210504094603067"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">f7ec5a41d630: Pull complete </span><br><span class="line">aa1efa14b3bf: Pull complete </span><br><span class="line">b78b95af9b17: Pull complete </span><br><span class="line">c7d6bca2b8dc: Pull complete </span><br><span class="line">cf16cd8e71e0: Pull complete </span><br><span class="line">0241c68333ef: Pull complete </span><br><span class="line">Digest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    62d49f9bab67   2 weeks ago    133MB</span><br><span class="line">centos       latest    300e315adb2f   4 months ago   209MB</span><br><span class="line"><span class="comment"># 参考运行容器的命令 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d --name nginx01 -p 3304:80 nginx</span></span><br><span class="line">dccb2ad300dbbb4598dbb2017805fba5364379326d4a6296dac9b88bc61d8970</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">dccb2ad300db   nginx     <span class="string">"/docker-entrypoint.…"</span>   21 seconds ago   Up 20 seconds   0.0.0.0:3304-&gt;80/tcp, :::3304-&gt;80/tcp   nginx01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否运行成功，发送一个请求 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># curl localhost:3304</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body {</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.org/"</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">"http://nginx.com/"</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p> 开放对应端口后，公网访问看到效果如下图：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504102706906.png" alt="image-20210504102706906"></p><p> 查看容器内的 ngnix 的配置文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it nginx01 /bin/bash</span></span><br><span class="line">root@dccb2ad300db:/<span class="comment"># whereis nginx </span></span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@dccb2ad300db:/<span class="comment"># cd /etc/nginx</span></span><br><span class="line">root@dccb2ad300db:/etc/nginx<span class="comment"># ls</span></span><br><span class="line">conf.dfastcgi_paramskoi-utf  koi-win  mime.types  modules  nginx.conf  scgi_paramsuwsgi_params  win-utf</span><br></pre></td></tr></tbody></table></figure><p> 端口暴露原理示意图：</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504100014282.png" alt="image-20210504100014282" style="zoom: 67%;"><p> 问题：每次改动 <code>nginx</code> 配置文件，都需要进入容器内部？十分的麻烦，要是可以在容器外部提供一个映射路径，达到在外部文件修改的同时，同步修改内部就好了！</p><p> 解决技术：<code> 数据卷技术！！</code></p><h2 id="部署 Tomcat"> 部署 Tomcat</h2><ol><li> 搜索和下载 tomcat</li><li> 启动运行 </li><li> 测试效果 </li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行时提示错误 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -p 8080:8080 --name tomcat02 tomcat</span></span><br><span class="line">9cdceb4daa857dbd5c4e03dfd7eeded50ae027d8484137889d605871520dee97</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint tomcat02 (56f474809e2ca18c3e9ce63318aa6918600e004621743625e4be5754f74b6493):  (iptables failed: iptables --<span class="built_in">wait</span> -t nat -A DOCKER -p tcp -d 0/0 --dport 8080 -j DNAT --to-destination 172.18.0.2:8080 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line"> (<span class="built_in">exit</span> status 1)).</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启后再次运行 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment">#  systemctl restart docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示容器名已经有的 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -p 8080:8080 --name tomcat02 tomcat</span></span><br><span class="line">docker: Error response from daemon: Conflict. The container name <span class="string">"/tomcat02"</span> is already <span class="keyword">in</span> use by container <span class="string">"9cdceb4daa857dbd5c4e03dfd7eeded50ae027d8484137889d605871520dee97"</span>. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See <span class="string">'docker run --help'</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有正在运行的容器 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史记录 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS                        PORTS     NAMES</span><br><span class="line">9cdceb4daa85   tomcat         <span class="string">"catalina.sh run"</span>        5 minutes ago       Created                                 tomcat02</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启容器 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker start 9cdceb4daa85</span></span><br><span class="line">9cdceb4daa85</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行成功 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">9cdceb4daa85   tomcat    <span class="string">"catalina.sh run"</span>   5 minutes ago   Up 4 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> 查看效果：测试访问没有问题 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504105656898.png" alt="image-20210504105656898"></p><p> 发现问题：</p><ol><li> 容器内部的 <code>Linux</code> 命令变少了（镜像只保证了最小的可运行环境）</li><li>webapps 中没有内容（需要把 <code>webapps.dist</code> 文件夹的内容复制到 <code>webapps</code>）</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">tomcat                latest    c0e850d7b9bb   3 weeks ago    667MB</span><br><span class="line">nginx                 latest    62d49f9bab67   4 weeks ago    133MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   8 weeks ago    79.1MB</span><br><span class="line">centos                latest    300e315adb2f   5 months ago   209MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 tomcat</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker run -d -p 8080:8080 --name tomcat02 tomcat</span></span><br><span class="line">39f11d68d64d3c585dd3a7f0a4e2123e03703cead8361c1cf0b6a61c1a7fb474</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">39f11d68d64d   tomcat    <span class="string">"catalina.sh run"</span>   16 seconds ago   Up 15 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器内部 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker exec -it tomcat02 /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现一些命令不存在 </span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># ll</span></span><br><span class="line">bash: ll: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs    temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin      lib   native-jni-lib  webapps  work</span><br><span class="line"></span><br><span class="line"><span class="comment">#webapps 文件夹没有内容 </span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># cd ../</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#webapps.dist 文件夹有内容 </span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps.dist</span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat/webapps.dist<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat/webapps.dist<span class="comment"># cd ../</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 webapps.dist 文件夹的内容复制到 webapps</span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cp -r webapps.dist/* webapps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快捷键 ctrl+P+Q 退出容器但不停止容器运行 </span></span><br><span class="line">root@39f11d68d64d:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># read escape sequence</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认容器状态 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">39f11d68d64d   tomcat    <span class="string">"catalina.sh run"</span>   4 minutes ago   Up 4 minutes   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> 查看效果：（注意一定要在服务器的安全组中开放对应的端口！！！）</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504112530764.png" alt="image-20210504112530764"></p><h2 id="部署 Mysql"> 部署 Mysql</h2><p> 注意：<a class="link" href="https://hub.docker.com/_/mysql"> 官网 <i class="fas fa-external-link-alt"></i></a> 中解释 Mysql 是要配置数据库密码的！！</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/6487268471927.jpg" alt="6487268471927"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像 Mysql5.7</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ceshi]<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">69692152171a: Pull complete </span><br><span class="line">1651b0be3df3: Pull complete </span><br><span class="line">951da7386bc8: Pull complete </span><br><span class="line">0f86c95aa242: Pull complete </span><br><span class="line">37ba2d8bd4fe: Pull complete </span><br><span class="line">6d278bb05e94: Pull complete </span><br><span class="line">497efbd93a3e: Pull complete </span><br><span class="line">a023ae82eef5: Pull complete </span><br><span class="line">e76c35f20ee7: Pull complete </span><br><span class="line">e887524d2ef9: Pull complete </span><br><span class="line">ccb65627e1c3: Pull complete </span><br><span class="line">Digest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21fa</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动镜像并挂载目录配置数据库的初始密码 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ceshi]<span class="comment"># docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span></span><br><span class="line">d869c76c987c305b9dd91321f523db7708a2a1c220712b4beaf2ac7f0e68fa1e</span><br></pre></td></tr></tbody></table></figure><p> 使用数据库连接工具连接，查看连接是否成功：</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/Snipaste_2021-05-14_12-49-42.jpg" alt="Snipaste_2021-05-14_12-49-42" style="zoom: 50%;"><p> 发现连接成功：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/Snipaste_2021-05-14_12-49-58.jpg" alt="Snipaste_2021-05-14_12-49-58"></p><p> 新建数据库并查看主机的文件是否对应改变：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/Snipaste_2021-05-14_12-56-29.jpg" alt="Snipaste_2021-05-14_12-56-29"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z home]<span class="comment"># ls</span></span><br><span class="line">admin  ceshi  mysql  test.java</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z home]<span class="comment"># cd mysql/data</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem   <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p> 测试删除 mysql 容器后，主机上的文件是否依然存在：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line">d869c76c987c   mysql:5.7   <span class="string">"docker-entrypoint.s…"</span>   26 minutes ago   Up 26 minutes   33060/tcp, 0.0.0.0:3310-&gt;3306/tcp, :::3310-&gt;3306/tcp   mysql01</span><br><span class="line">1309cabd368d   centos      <span class="string">"/bin/bash"</span>              38 minutes ago   Up 38 minutes                                                          epic_neumann</span><br><span class="line">39f11d68d64d   tomcat      <span class="string">"catalina.sh run"</span>        2 hours ago      Up 2 hours      0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp              tomcat02</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]<span class="comment"># docker rm -f d869c76c987c</span></span><br><span class="line">d869c76c987c</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem   <span class="built_in">test</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> 发现我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化的功能！！</p><h2 id="实战：redis- 集群部署"> 实战：redis 集群部署 </h2><p> 实现效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518090322232.png" alt="image-20210518090322232"></p><p> 使用脚本创建 6 个 <code>redis</code> 配置 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6);<span class="keyword">do</span></span><br><span class="line">mkdir -p /mydata/redis/node-<span class="variable">$port</span>/conf</span><br><span class="line">touch /mydata/redis/node-<span class="variable">$port</span>/conf/redis.conf</span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt;/mydata/redis/node-$port/conf/redis.conf</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">cluster-announce-ip 172.38.0.1$port</span></span><br><span class="line"><span class="string">cluster-announce-port 6379</span></span><br><span class="line"><span class="string">cluster-announce-bus-port 16379</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure><p> 创建网络和容器：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z /]<span class="comment"># docker network create redis-net --subnet 172.38.0.0/16</span></span><br><span class="line">42efb2e7749d07ee0e50b4d375a00829cfd390fddca9a5e72a87bb660059a4eb</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z /]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME        DRIVER    SCOPE</span><br><span class="line">d71469651905   bridge      bridge    <span class="built_in">local</span></span><br><span class="line">4210c11fb888   host        host      <span class="built_in">local</span></span><br><span class="line">d1ede6bb4ad9   mynet       bridge    <span class="built_in">local</span></span><br><span class="line">15f30a8dc35d   none        null      <span class="built_in">local</span></span><br><span class="line">42efb2e7749d   redis-net   bridge    <span class="built_in">local</span></span><br></pre></td></tr></tbody></table></figure><p> 使用脚本创建 6 个 redis 容器，并且连接自定义网络：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6);<span class="keyword">do</span></span><br><span class="line">docker run -p 637<span class="variable">$port</span>:6379 -p 1637<span class="variable">$port</span>:16379 --name redis-<span class="variable">$port</span> \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$port</span>/data:/data \</span><br><span class="line">-v /mydata/redis/node-<span class="variable">$port</span>/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis-net --ip 172.38.0.1<span class="variable">$port</span> redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf; </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z /]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                    COMMAND                  CREATED         STATUS         PORTS                                                                                      NAMES</span><br><span class="line">afea673b0bf9   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   5 seconds ago   Up 4 seconds   0.0.0.0:6376-&gt;6379/tcp, :::6376-&gt;6379/tcp, 0.0.0.0:16376-&gt;16379/tcp, :::16376-&gt;16379/tcp   redis-6</span><br><span class="line">00b3c38df42d   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   5 seconds ago   Up 5 seconds   0.0.0.0:6375-&gt;6379/tcp, :::6375-&gt;6379/tcp, 0.0.0.0:16375-&gt;16379/tcp, :::16375-&gt;16379/tcp   redis-5</span><br><span class="line">d6714f27ebe5   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   6 seconds ago   Up 5 seconds   0.0.0.0:6374-&gt;6379/tcp, :::6374-&gt;6379/tcp, 0.0.0.0:16374-&gt;16379/tcp, :::16374-&gt;16379/tcp   redis-4</span><br><span class="line">9e4a7bdc96f8   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   7 seconds ago   Up 6 seconds   0.0.0.0:6373-&gt;6379/tcp, :::6373-&gt;6379/tcp, 0.0.0.0:16373-&gt;16379/tcp, :::16373-&gt;16379/tcp   redis-3</span><br><span class="line">02bddddbab7f   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   7 seconds ago   Up 6 seconds   0.0.0.0:6372-&gt;6379/tcp, :::6372-&gt;6379/tcp, 0.0.0.0:16372-&gt;16379/tcp, :::16372-&gt;16379/tcp   redis-2</span><br><span class="line">4d15ad89dbeb   redis:5.0.9-alpine3.11   <span class="string">"docker-entrypoint.s…"</span>   8 seconds ago   Up 7 seconds   0.0.0.0:6371-&gt;6379/tcp, :::6371-&gt;6379/tcp, 0.0.0.0:16371-&gt;16379/tcp, :::16371-&gt;16379/tcp   redis-1</span><br></pre></td></tr></tbody></table></figure><p> 创建 <code>redis</code> 集群：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入其中一个容器 </span></span><br><span class="line">docker <span class="built_in">exec</span> -it redis-1 /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 集群 </span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518100202067.png" alt="image-20210518100202067"></p><p> 查看效果 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/data <span class="comment"># redis-cli -c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 redis 集群，查看集群信息 </span></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3   <span class="comment"># 主机数量 </span></span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:495</span><br><span class="line">cluster_stats_messages_pong_sent:511</span><br><span class="line">cluster_stats_messages_sent:1006</span><br><span class="line">cluster_stats_messages_ping_received:506</span><br><span class="line">cluster_stats_messages_pong_received:495</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:1006</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 redis 集群，查看集群具体信息 </span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">44163f5e3981aee904cce4dbeeac17d671d2d20c 172.38.0.11:6379@16379 myself,master - 0 1621303492000 1 connected 0-5460</span><br><span class="line">0d277a7f5d0f9d79058a19fa3e7d1c7274e6c774 172.38.0.12:6379@16379 master - 0 1621303494000 2 connected 5461-10922</span><br><span class="line">af333ed46be9362606c8c4ea9e51a1b95100e910 172.38.0.13:6379@16379 master - 0 1621303493144 3 connected 10923-16383</span><br><span class="line">f273c45aff9863b351659907a103176459d30bec 172.38.0.15:6379@16379 slave 44163f5e3981aee904cce4dbeeac17d671d2d20c 0 1621303494146 5 connected</span><br><span class="line">b1e3867406fafd0b99a5317382817aa4ea43f7f0 172.38.0.16:6379@16379 slave 0d277a7f5d0f9d79058a19fa3e7d1c7274e6c774 0 1621303493545 6 connected</span><br><span class="line">4c4c1a05b5c83ac2510d7508c43fa158a2355b5f 172.38.0.14:6379@16379 slave af333ed46be9362606c8c4ea9e51a1b95100e910 0 1621303493000 4 connected</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> 测试存取 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主机存了，其他主机也会存 </span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.38.0.13:6379</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 13 主机读取出来 </span></span><br><span class="line">172.38.0.13:6379&gt; get a</span><br><span class="line"><span class="string">"b"</span></span><br></pre></td></tr></tbody></table></figure><p> 测试  <code>13 主机 </code> 挂了之后，存取效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518102018165.png" alt="image-20210518102018165"></p><h2 id="实战：Springboot 微服务打包成 Docker 镜像"> 实战：Springboot 微服务打包成 Docker 镜像 </h2><p> 总结：以后发布项目，就是给别人一个一个的镜像了。</p><ol><li><p> 将 <code>springboot</code> 项目打成 jar 包的形式，<code>-packeage</code></p></li><li><p> 下载 <code>docker 插件 </code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518105425252.png" alt="image-20210518105425252"></p></li><li><p> 编写 <code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.jar /app.jar</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--server.port=8080"</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></tbody></table></figure></li><li><p> 新建目录放置 <code>Dockerfile 和 jar 包 </code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518105510500.png" alt="image-20210518105510500"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518105612437.png" alt="image-20210518105612437"></p></li><li><p> 生成镜像并运行 </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z /]<span class="comment"># cd /home/springboot</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z springboot]<span class="comment"># ls</span></span><br><span class="line">Dockerfile  springboot-thymeleaf-1.0.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z springboot]<span class="comment"># docker build -t springboot-demo .</span></span><br><span class="line">Sending build context to Docker daemon  18.25MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line">8: Pulling from library/java</span><br><span class="line">5040bd298390: Pull complete </span><br><span class="line">fce5728aad85: Pull complete </span><br><span class="line">76610ec20bf5: Pull complete </span><br><span class="line">60170fec2151: Pull complete </span><br><span class="line">e98f73de8f0d: Pull complete </span><br><span class="line">11f7af24ed9c: Pull complete </span><br><span class="line">49e2d6393f32: Pull complete </span><br><span class="line">bb9cdec9c7f3: Pull complete </span><br><span class="line">Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> java:8</span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : COPY *.jar /app.jar</span><br><span class="line"> ---&gt; 7864489b9853</span><br><span class="line">Step 3/5 : CMD [<span class="string">"--server.port=8080"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> eeac0a613d6c</span><br><span class="line">Removing intermediate container eeac0a613d6c</span><br><span class="line"> ---&gt; 35cb82031d7d</span><br><span class="line">Step 4/5 : EXPOSE 8080</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> dbbb5c136b36</span><br><span class="line">Removing intermediate container dbbb5c136b36</span><br><span class="line"> ---&gt; 76ac4f35a87f</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d825f07a8666</span><br><span class="line">Removing intermediate container d825f07a8666</span><br><span class="line"> ---&gt; 5723d2de431d</span><br><span class="line">Successfully built 5723d2de431d</span><br><span class="line">Successfully tagged springboot-demo:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器 </span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z springboot]<span class="comment"># docker run -d -p8080:8080 --name test-demo springboot-demo</span></span><br><span class="line">ac4c3fde1bf1e49fe99d723b39bc147211be7289ccd73ee8db01736b75ee49a8</span><br></pre></td></tr></tbody></table></figure></li><li><p> 查看效果 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210518110217356.png" alt="image-20210518110217356"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Docker 练习 &lt;/h1&gt;
&lt;h2 id=&quot;部署 Nginx&quot;&gt; 部署 Nginx&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt; 搜索镜像，建议去 docker hub 搜索，可以看到帮助文档 &lt;/li&gt;
&lt;li&gt; 下载镜像 &lt;/li&gt;
&lt;li&gt; 运行测试 &lt;/li&gt;
&lt;li&gt; 配置</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mock 和 Mock.js</title>
    <link href="http://blog.sky123.top/2021/04/22/javascript/mock/"/>
    <id>http://blog.sky123.top/2021/04/22/javascript/mock/</id>
    <published>2021-04-22T06:53:47.000Z</published>
    <updated>2021-04-22T02:20:27.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于 mock">关于 mock</h2><p><code>mock 可以简单理解为假数据</code>。在软件开发中，我们不可避免的要调用一些外部或者系统级别的接口，然而，我们在测试时，也许这些接口或环境并不存在。比如在对我们自己的模块做单元测试时，发现自己的模块依赖的别的模块或接口还没有建立好，如何测试？<code>（后端的接口还没写好，前端该怎么测试接口？前端写假数据接口，暂时替代后端）</code></p><p>Mock 概念应运而生，最开始在 Java 领域，后来各种语言或开发领域均引入该概念。</p><p>Mock 实际上就是一种模拟和控制外部或者系统级别对象或接口的方法。因此，我们在做测试时，尤其是单元测试或覆盖测试时，不必与真实环境交互即可完成对自己的模块业务逻辑的测试，或许自己的模块需要依赖外部环境。</p><p><code>(这里看看即可，主要理解一下这种 mock 思想的出现解决了什么问题？)</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330144250709.png" alt="image-20210330144250709"></p><h2 id="Mock-js">Mock.js</h2><p>上面所说的 mock 是一种思想，而现在说的 <code>Mock.js</code> 是一门技术，是这种思想的具体实现。我们主要学的是<code>Mock.js</code>。其实此外还有许多技术可以替代它。比如 <code>easyMock，apifox..</code></p><p>官网：<a class="link" href="http://mockjs.com/">http://mockjs.com/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330145423844.png" alt="image-20210330145423844"></p><p>优点：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330145453711.png" alt="image-20210330145453711"></p><h2 id="这个东西怎么用到项目中去？">这个东西怎么用到项目中去？</h2><h3 id="安装">安装</h3><p>进入项目根目录</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 安装</span></span><br><span class="line">npm install mockjs</span><br></pre></td></tr></tbody></table></figure><p>出现如下，说明安装成功</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330151134751.png" alt="image-20210330151134751"></p><h3 id="配置使用">配置使用</h3><p>新建如下目录结构：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330155310609.png" alt="image-20210330155310609"></p><p>解释：<code>decision 目录 </code> 中的文件命名尽量和 <code>api 文件夹</code> 里的文件对应</p><p>在  <code>mock/index.js</code> 中写入：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">"mockjs"</span>;</span><br><span class="line"><span class="keyword">import</span> file <span class="keyword">from</span> <span class="string">"./decision/file"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截 `/api/testGet` 接口的 `get 方式 ` 的请求，如果拦截到就调用 `file.testGet` 中的函数。</span></span><br><span class="line">Mock.mock(<span class="built_in">RegExp</span>(<span class="string">"/api/testGet"</span> + <span class="string">".*"</span>), <span class="string">"get"</span>, file.testGet);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截 `/api/testGet` 接口的 `post 方式 ` 的请求，如果拦截到就返回 `file.testPost` 中的对象。</span></span><br><span class="line">Mock.mock(<span class="string">"/api/testPost"</span>, <span class="string">"post"</span>, file.testPost);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Mock;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在 <code>mock/decision/file.js</code> 中写入：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管理 mock 数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">testGet</span>(<span class="params">options</span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      code: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">"GET 成功 "</span>,</span><br><span class="line">      data: {</span><br><span class="line">        token: <span class="string">"123456"</span>,</span><br><span class="line">        collegeId: <span class="string">"123"</span></span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">// 登录接口返回的数据</span></span><br><span class="line">  },</span><br><span class="line">  testPost: {</span><br><span class="line">    code: <span class="number">1</span>,</span><br><span class="line">    msg: <span class="string">"POST 成功 "</span>,</span><br><span class="line">    data: {</span><br><span class="line">      token: <span class="string">"123456"</span>,</span><br><span class="line">      collegeId: <span class="string">"123"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在项目的 <code>main.js</code> 中引入<code>mockjs</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./mock/index.js"</span>; <span class="comment">// 使用 mockjs 模拟</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330155820989.png" alt="image-20210330155820989"></p><h3 id="测试效果">测试效果</h3><p><img lazyload="" src="/images/loading.svg" data-src="upload%5Cimage-20210330155908404.png" alt="image-20210330155908404"></p><p><img lazyload="" src="/images/loading.svg" data-src="upload%5Cimage-20210330155919853.png" alt="image-20210330155919853"></p><h2 id="Mock-js- 配置的一些注意点">Mock.js 配置的一些注意点</h2><ol><li><p>模拟 <code>get</code> 请求的 <code>url</code> 注意一定要正则表达式的风格：例如</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(<span class="built_in">RegExp</span>(<span class="string">"/api/testGet"</span> + <span class="string">".*"</span>), <span class="string">"get"</span>, file.testGet);</span><br></pre></td></tr></tbody></table></figure><p>这段代码的含义是，拦截 <code>/api/testGet</code> 接口的 <code>get 方式</code> 的请求，如果拦截到就调用 <code>file.testGet</code> 函数。</p><p>为什么不直接像拦截 post 请求那样 <code>url</code>  直接是个字符串形式的？因为 <code>get 请求的 url 后面是带参数的！！！</code></p><p>直接使用字符串 mock 只会拦截 <code>/api/testGet</code>，不会拦截  <code>/api/testGet?XXX=XXX&amp;XXX=XXX</code>这种形式的。</p></li><li><p>从上面的使用可以看出：一个接口就要写一个 <code>Mock.mock(XXXXXXX)</code>。而我们写完这个之后最主要的就是写它返回的假数据。（<code>Mock.mock</code>函数的使用可以看一下官网的解释：<a class="link" href="https://github.com/nuysoft/Mock/wiki/Mock.mock()%EF%BC%89">https://github.com/nuysoft/Mock/wiki/Mock.mock()）<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330161517775.png" alt="image-20210330161517775"></p><p>看到官网的解释可以发现，第三个参数（模拟数据）其实有两种方式：<code>function 和 template</code> 。分别对应之前写的<code>testGet 和 testPost</code> ：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330161829735.png" alt="image-20210330161829735"></p><p>这两种方式都很常用。都要会使用！</p></li></ol><h4 id="template 类型">template 类型</h4><p>看官网的解释：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330162015199.png" alt="image-20210330162015199"></p><p>这里说明：<code>template</code> 它可以直接就是一个对象或字符串，也就是说你在写它的假数据时可以直接定义一个对象或字符串就行。比如前面写的 <code>testPost</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testPost: {</span><br><span class="line">    code: <span class="number">1</span>,</span><br><span class="line">    msg: <span class="string">"POST 成功 "</span>,</span><br><span class="line">    data: {</span><br><span class="line">      token: <span class="string">"123456"</span>,</span><br><span class="line">      collegeId: <span class="string">"123"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>拦截成功后直接就是返回你所写的假数据。而这种方式最好的一点是 <code> 它可以生成随机数据</code></p><p>看到官网的：<a class="link" href="http://mockjs.com/examples.html#String%E3%80%82%E5%8F%91%E7%8E%B0%E8%BF%99%E9%87%8C%E8%AE%B2%E4%BA%86%E5%BE%88%E5%A4%9A%E7%9A%84%E8%AF%AD%E6%B3%95%E3%80%82%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%E5%81%87%E5%A6%82%E6%88%91%E6%83%B3%E6%AF%8F%E6%AC%A1%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8B%A6%E6%88%AA%E4%B9%8B%E5%90%8E%E8%BF%94%E5%9B%9E%E7%9A%84">http://mockjs.com/examples.html#String。发现这里讲了很多的语法。怎么用？假如我想每次调用接口拦截之后返回的<i class="fas fa-external-link-alt"></i></a> <code>token 和 collegeId</code> 都是不一样的。那么可以这么写：</p><p>在官网找到数据类型：这里由于两个都是字符串类型的，我选择使用 正则表达式的类型</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163542540.png" alt="image-20210330163542540"></p><p>修改为：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testPost: {</span><br><span class="line">    code: <span class="number">1</span>,</span><br><span class="line">    msg: <span class="string">"POST 成功 "</span>,</span><br><span class="line">    data: {</span><br><span class="line">      token: <span class="regexp">/[a-z][A-Z][0-9][0-9][0-9]/</span>,</span><br><span class="line">      collegeId: <span class="regexp">/[0-9][0-9][0-9][0-9]/</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>查看效果：发现多次调用返回的都是不同的结果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163811844.png" alt="image-20210330163811844"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163820152.png" alt="image-20210330163820152"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163834223.png" alt="image-20210330163834223"></p><p>总结：使用 template 类型可以生成随机数据，使得每次调用接口时的数据都不同，但是你如果不想用随机数据的话也可以直接写死，每次返回同样的数据，这样甚至都不用去关注官网提到的那些随机数据的生成语法。不过多了解点总是好的。</p><h4 id="function 类型">function 类型</h4><p>看官网：<a class="link" href="https://github.com/nuysoft/Mock/wiki/Mock.mock()">https://github.com/nuysoft/Mock/wiki/Mock.mock()<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330164423839.png" alt="image-20210330164423839"></p><p>这种方式就最大的好处就是可以 <code> 前端简单的实现增删改数据的效果 </code>。就是说当你调用涉及到增删改数据的接口时，仅仅使用上面的 <code>template</code> 类型是看不到增删改的效果的。此时只能使用 <code>function</code> 类型的。返回这种类型时实际上就是调用了你所定义的函数，然后<code> 将函数的返回值作为假数据</code>。比如之前写的 <code>testGet</code>:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">testGet</span>(<span class="params">options</span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      code: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">"GET 成功 "</span>,</span><br><span class="line">      data: {</span><br><span class="line">        token: <span class="string">"123456"</span>,</span><br><span class="line">        collegeId: <span class="string">"123"</span></span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure><p>可以发现这个函数有一个参数，打印之后发现：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330165256662.png" alt="image-20210330165256662"></p><p>实际上就是你调用的接口的信息！！拿到这个你其实可以做很多事情，比如下面这个，找到之前发的出卷系统的项目的<code>mock/decision/auditJoin.js/auditJoinGet  这个函数</code>：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330165702842.png" alt="image-20210330165702842"></p><p>在 <code>auditJoin.js</code> 中可以看到首先定义一连串的数据，然后不同的函数根据自己的 <code>options</code> 找到参数后进行对应的操作返回不同的数据。</p><p>总结：function 类型的使用可以实现一些增删改接口数据的效果。但是使用这种方法后要想生成随机数据的话就不能使用之前 <a class="link" href="http://mockjs.com/examples.html#String">http://mockjs.com/examples.html#String<i class="fas fa-external-link-alt"></i></a> 提到的这些语法。而要使用别的方法实现（MockRandom：<a class="link" href="https://github.com/nuysoft/Mock/wiki/Mock.Random%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%96%B9%E6%B3%95%E4%B8%8D%E5%81%9A%E8%A6%81%E6%B1%82%EF%BC%8C%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E4%BA%BA%E5%B0%B1%E7%94%A8%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E4%BA%BA%E5%B0%B1%E5%BD%93%E4%BD%9C%E6%B2%A1%E7%9C%8B%E8%BF%87%EF%BC%89%E3%80%82%E6%80%BB%E4%B9%8B%EF%BC%8C%E7%94%A8">https://github.com/nuysoft/Mock/wiki/Mock.Random，这种方法不做要求，能看懂的人就用一下，看不懂的人就当作没看过）。总之，用 <i class="fas fa-external-link-alt"></i></a> <code>function</code> 类型时可以参照：<code> 之前发的出卷系统的项目的 mock/decision/auditJoin.js</code> 里面的写法。</p><h3 id="总结">总结</h3><p><code>Mock.js</code> 实际上只是在前端开发时写的一些假接口数据，之后等后端代码写好，前后端整合的时候，就需要把它注释掉了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于 mock&quot;&gt;关于 mock&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mock 可以简单理解为假数据&lt;/code&gt;。在软件开发中，我们不可避免的要调用一些外部或者系统级别的接口，然而，我们在测试时，也许这些接口或环境并不存在。比如在对我们自己的模块做单元测试时，发现自己的</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://blog.sky123.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>PowerDesigner 安装教程（含下载 + 汉化 + 破解）</title>
    <link href="http://blog.sky123.top/2021/03/10/%E8%BD%AF%E4%BB%B6/powerDesigner/"/>
    <id>http://blog.sky123.top/2021/03/10/%E8%BD%AF%E4%BB%B6/powerDesigner/</id>
    <published>2021-03-10T02:18:11.000Z</published>
    <updated>2021-03-10T02:18:46.989Z</updated>
    
    <content type="html"><![CDATA[<p> 文章转自：<a class="link" href="https://www.fujieace.com/software/powerdesigner.html">https://www.fujieace.com/software/powerdesigner.html<i class="fas fa-external-link-alt"></i></a></p><p> 软件版本：Sybase PowerDesigner 16.5</p><h2 id="准备工作："> 准备工作：</h2><p> 下载下面三个文件：</p><p>1、安装文件 链接: <a class="link" href="https://pan.baidu.com/s/1fxmBlcee4qEqxM4djSzvWA">https://pan.baidu.com/s/1fxmBlcee4qEqxM4djSzvWA<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><p>2、破解文件 链接: <a class="link" href="https://pan.baidu.com/s/1jadOumXVh6iC6XeXqwPGQw">https://pan.baidu.com/s/1jadOumXVh6iC6XeXqwPGQw<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><p>3、汉化文件 链接: <a class="link" href="https://pan.baidu.com/s/19yeyWfAPMJ_WeJy8SDVu5Q">https://pan.baidu.com/s/19yeyWfAPMJ_WeJy8SDVu5Q<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><h2 id="PowerDesigner 安装图文教程：">PowerDesigner 安装图文教程：</h2><p>1、解压 PowerDesigner 安装文件，并双击 PowerDesigner.exe；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/1-2.png" alt=""></p><p>2、欢迎来到 PowerDesigner 安装界面，点击 Next</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/3-3.png" alt=""></p><p>3、一定要选择 Trial，再点击 Next，不要选择其它，这一步如果选择错，后面破解是不行的。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/3-3.png" alt=""></p><p>4、选择 Hong Kong，点击 I AGREE，再点击 Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/4-1.png" alt=""></p><p>5、选择一个安装目录，默认是安装在 C 盘。再点击 Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/5-1.png" alt=""></p><p>6、点击 General 和 Notaion，再点击 Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/7.png" alt=""></p><p> 走到这一 步，如果你电脑上已经安装了“Eclipse”软件，请不要打勾此插件选项。否则：就会出现，让你选择“Eclipse”软件的安装路径。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/159.png" alt=""></p><p>7、直接点击 Next；进入正在安装界面 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/160.png" alt=""></p><p>9、点击 Finish（安装完成）</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/9-1.png" alt=""></p><h2 id="PowerDesigner 破解步骤：">PowerDesigner 破解步骤：</h2><p>1、将 PowerDesigner 破解文件解压，然后，你能看到一个“pdflm16.dll”文件；</p><p>2、将“pdflm16.dll”复制并覆盖到你软件安装的目录中，一定要是此软件的安装根目录；例如：我这里就直接复制到 E:\powerdesigner 即可！</p><h2 id="PowerDesigner 汉化步骤：">PowerDesigner 汉化步骤：</h2><p>1、将 PowerDesigner 汉化文件解压，然后你能看到很多文件；</p><p>2、Ctrl+A（全选）所有文件，复制并覆盖到你软件安装的目录中；</p><p>3、如果点击 PdShell16.exe 不能正常启动，请点击 pdlegacyshell16.exe 启动；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/856.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 文章转自：&lt;a class=&quot;link&quot; href=&quot;https://www.fujieace.com/software/powerdesigner.html&quot;&gt;https://www.fujieace.com/software/powerdesigner.html&lt;i </summary>
      
    
    
    
    
    <category term="软件" scheme="http://blog.sky123.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="powerDesigner" scheme="http://blog.sky123.top/tags/powerDesigner/"/>
    
  </entry>
  
  <entry>
    <title>media 媒体查询</title>
    <link href="http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Media-Query 响应式布局—媒体查询">Media Query 响应式布局—媒体查询</h2><p>​响应式布局是在 2010 年 5 月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。<br>​响应式布局可以为不同终端的用户提供更加舒适的界面和更好的用户体验，而且随着目前大屏幕移动设备的普及，越来越多的网站采用这个技术。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306113916951.png" alt="image-20210306113916951"></p><h3 id="响应式设计一定是最佳选择吗？">响应式设计一定是最佳选择吗？</h3><p>​如果预算充足且形势需要，做一个真正的“手机版”网站是首选。因为响应式设计没有专门设计一个手机版网站的功能多，比如获取当前用户的<code>GPS 定位</code>，只是用响应式设计会很难实现。但如果只是根据视口大小为用户提供匹配的视觉效果还是优先选择响应式设计。</p><p>优点：</p><ol><li>面对不同分辨率设备灵活性强</li><li>能够快捷解决多设备显示适应问题</li></ol><p>缺点：</p><ol><li>兼容各种设备工作量大，效率略慢</li><li>代码累赘，会出现隐藏无用的元素，加载时间加长</li><li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ol><h3 id="CSS 中的 Media-Query（媒介查询）是什么？">CSS 中的 Media Query（媒介查询）是什么？</h3><p>​作为 <code>CSS3</code> 规范的一部分，媒体查询可以针对不同的屏幕尺寸设置不同的样式，它为每种类型的用户提供了最佳的体验，网站在任何尺寸设置下都能有最佳的显示效果。通过不同的媒体类型和条件定义样式表规则。<br>​<br>​媒体查询让 <code>CSS</code> 可以更精确作用于不同的媒体类型和同一媒体的不同条件。媒体查询的大部分媒体特性都接受 min 和 max 用于表达“大于或等于”和“小与或等于”。如：<code>width 会有 min-width 和 max-width</code><br>​<br>​<code>Media Queries</code>功能是非常强大的，他可以让你定制不同的分辨率和设备，并在不改变内容的情况下，让你制作的 web 页面在不同的分辨率和设备下都能显示正常，并且不会因此而丢失样式</p><h4 id="媒体查询实例">媒体查询实例</h4><p>​通过此实例观察媒体查询的功能后，再来分析语法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">body</span>{<span class="attribute">background-color</span>:grey; }   // 正常情况是灰色 </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) {// 宽度大于 <span class="number">992px</span> 的时候被应用 pc 端</span><br><span class="line">  <span class="selector-class">.class</span> {<span class="attribute">background</span>: <span class="number">#666</span>;}  }  </span><br><span class="line">           </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) { // 宽度小于<span class="number">768px</span> 的时候被应用  移动端</span><br><span class="line">  <span class="selector-class">.class</span> { <span class="attribute">background</span>: <span class="number">#ccc</span>; }  }</span><br><span class="line">          </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768</span>x) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">992px</span>) {  // 宽度在 <span class="number">768px</span> 和 <span class="number">992px</span> 之间的时候被应用</span><br><span class="line">  <span class="selector-class">.class</span> {  <span class="attribute">background</span>: <span class="number">#333</span>;  }   }</span><br></pre></td></tr></tbody></table></figure><h4 id="使用 Media-Query 的基本语法">使用 Media Query 的基本语法</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) {</span><br><span class="line">       CSS-<span class="selector-tag">Code</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>​以上通过 <code>@media</code> 定义媒体查询，<code>mediatype</code>代表了设备类型，目前只有 <code>screen</code> 最常用，<code>and|not|only</code>为条件，<code>media feature</code>为媒体特点，通常是写设备的宽度。</p><p>​<code>@media screen and (max-width:960px)</code> 的意思为：当前设备为 screen（电脑、平板、手机）时，并且最大宽度为 960 时，显示的样式。</p><p>媒体类型有：</p><ul><li>all   所有设备</li><li>print用于打印机和打印预览</li><li>screen用于电脑屏幕，平板电脑，智能手机等</li><li>speech应用于屏幕阅读器等发声设备</li></ul><h3 id="用媒体查询改造我们的设计">用媒体查询改造我们的设计</h3><p>​我们都知道，样式表里面，后面的样式会覆盖前面的样式。因此，我们可以在设置好网站基本样式后，使用媒体查询来进一步重写相应的部分。例如，在 PC 端将导航显示成简单的链接，然后再针对小视口，使用媒体查询重写这一部分。理论上讲最好是从小屏幕设备开始设计，然后渐进增强。但实际上我们使用媒体查询要解决的问题，都是已经存在 PC 端站点了，<code>更多的是要将现有的桌面版网页改造成响应式的</code>。</p><p>加载媒体查询的最佳方法：</p><p>​使用 <code> 多个独立的 CSS 文件会增加 HTTP 请求的数量</code>，使页面加载变慢。所以我们的媒体查询样式的文件尽量放在一个里面，以注释加以区分。</p><p>阻止移动浏览器自动调整页面大小</p><p>​<code>ios 和 android 浏览器都基于 webkit 内核 </code>，这两种浏览器和许多其它浏览器都支持用<code>viewport，meta 元素覆盖默认的画布缩放设置</code>。只需要在 HTML 的<code>&lt;head&gt;</code> 标签中插入一个 <code>&lt;meta&gt;</code> 标签，<code>meta</code>标签中可以设置具体的宽度或缩放比。下面为示例</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span>  <span class="attr">content</span>=<span class="string">"initial-scale=1.0,width=device-width"</span> /&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p><code>name=”viewport”</code>  说明此 meta 标签定义视口的属性<br><code>​initial-scale=2.0</code>   意思是将页面放大两倍<br><code>​width=device-width</code>   告诉浏览器页面的宽度等于设备宽度</p><p>允许用户将页面最大放大至设备宽度 3 倍，最小压缩至设备宽度的一半</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">device-width,</span> <span class="attr">maximum-scale</span>=<span class="string">3,</span> <span class="attr">minimum-scale</span>=<span class="string">0.5”</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>禁止用户缩放，可以在混合 <code>APP</code> 时，为了使 <code>html</code> 页面更逼真，使页面无法缩放</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”initial-scale</span>=<span class="string">1.0,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span> /&gt;</span>   //user-scalable=no 是禁止缩放</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Media-Query 响应式布局—媒体查询&quot;&gt;Media Query 响应式布局—媒体查询&lt;/h2&gt;
&lt;p&gt;​	响应式布局是在 2010 年 5 月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>栅格布局基本概念</title>
    <link href="http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栅格化布局">栅格化布局</h2><p>网格布局 <code>（Grid）</code> 是最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 <code>CSS 框架 </code> 达到的效果，现在浏览器内置了。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123208640.png" alt="image-20210306123208640"></p><p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定 " 项目 " 针对轴线的位置，可以看作是一维布局。</p><p>Grid 布局则是将容器划分成 " 行 " 和 " 列 "，产生单元格，然后指定 " 项目所在 " 的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p><h3 id="基本概念">基本概念</h3><p>容器和项目<br>采用网格布局的区域，称为<code>" 容器 "（container）</code>。容器内部采用网格定位的子元素，称为<code>" 项目 "（item）</code>。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123226964.png" alt="image-20210306123226964"></p><p>上面代码中，最外层的 <code>&lt;div&gt;</code> 元素就是容器，内层的三个 <code>&lt;div&gt;</code> 元素就是项目。</p><p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的 <code>&lt;p&gt;</code> 元素就不是项目。Grid 布局只对项目生效。</p><p>行和列<br>容器里面的水平区域称为 " 行 "（row），垂直区域称为 " 列 "（column）。水平的深色区域就是 " 行 "，垂直的深色区域就是 " 列 "</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123236954.png" alt="image-20210306123236954"></p><h3 id="容器中的属性">容器中的属性</h3><p><code>display：grid</code>  指定一个容器采用网格布局，默认情况下，容器元素都是块元素。inline-grid  设置为行内元素网格布局</p><p><code>grid-template-columns</code> 属性定义每一列的列宽。<br><code>grid-template-rows</code> 属性定义每一行的行高</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123247282.png" alt="image-20210306123247282"></p><p>注意，设为网格布局以后，<code>容器子元素（项目）的 float、display: inline-block、display: table-cell、vertical-align 和 column-* 等设置都将失效。</code></p><p>科普视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=629123551&amp;bvid=BV1Gt4y1z7NQ&amp;cid=293320928&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;栅格化布局&quot;&gt;栅格化布局&lt;/h2&gt;
&lt;p&gt;网格布局 &lt;code&gt;（Grid）&lt;/code&gt; 是最强大的 CSS 布局方案。&lt;/p&gt;
&lt;p&gt;它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 &lt;code&gt;CSS 框架 &lt;/co</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>flex 布局</title>
    <link href="http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-03T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="伸缩盒模型 flexbox">伸缩盒模型 flexbox</h2><p>伸缩盒模型也叫弹性盒模型，或<code>flexBox</code>。它决定一个盒子在其它盒子中的分布，以及如何处理可用的空间。使用该模型，可以轻松的创建“自适应”浏览器窗口的流动布局。</p><blockquote><p><code>flexbox</code>是一个很新的东西，在 <code>w3c</code> 希望可以使用 <code>flexbox</code> 实现一些更复杂的布局和应用。传统盒模型基于 HTML 文档流排列，使用弹性盒模型可以规定特定的顺序。要开启弹性盒模型，只需要设置 display 的属性值 flex，因为它是 <code>CSS3</code> 中为 display 新添加的值类型。</p></blockquote><p>目的：在浏览器窗口变化时，盒子相应改变大小。<br><code>设置了弹性盒模型后，float，clear 和 vertical-align 在 flex 中不起作用。</code></p><h3 id="旧的伸缩盒">旧的伸缩盒</h3><p>​       伸缩盒从被提出到如今一直在修改，所以这里涉及到了新老写法。伸缩盒最老版本<br>​<code>display:box;</code>  将对象作为弹性伸缩盒显示（火狐和 <code>webkit</code> 内核都支持 <code>display:-webkit-box;</code> 或<code>display:-moz-box;</code>）。子元素   <code>box-flex:;</code><br>伸缩盒过渡版本：<code>display:flexbox;</code>  将对象作为弹性伸缩盒显示<br>伸缩盒最新版本：<code>display:flex;</code>  将对象作为弹性伸缩盒显示</p><h3 id="flexbox 的基础知识">flexbox 的基础知识</h3><p>​由于 <code>flexbox</code>是一个整体的模块，它们之中一些属性是在父容器上设置，而一些是在子容器上设置。一个 <code>flexbox</code> 的基本结构：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">         <span class="selector-class">.box</span>{ <span class="attribute">display</span>: flex;}    // 最外层的为父容器，定义此容器为弹性布局 </span></span><br><span class="line"><span class="css">        <span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}       <span class="attribute">flex-grow</span> 占<span class="number">1</span>比例 </span></span><br><span class="line"><span class="css">        <span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">2</span>; <span class="attribute">background</span>:orange}     占<span class="number">2</span> 比例 </span></span><br><span class="line"><span class="css">        <span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">3</span>; <span class="attribute">background</span>:red}        占<span class="number">3</span> 比例</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>1. 首先规定哪个是父容器，父容器中包含多个“项目”（每个子 div），项目是可以在父容器中弹性布局的。<br>2. 其次还可以规定父容器中要怎么来显示它里面的项目，如是否换行、项目排列方向等</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112154902.png" alt="image-20210306112154902"></p><h3 id="父容器常用属性">父容器常用属性</h3><p><code>display: flex;</code>   定义一个 flex 容器。新弹性盒  设置父元素是一个弹性盒，子元素会自动水平排列</p><p><code>justify-content: flex-end;</code>   设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112215032.png" alt="image-20210306112215032"></p><p><code>align-items</code> 属性定义 flex 子项在 flex 容器的当前行的侧轴（纵轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112226193.png" alt="image-20210306112226193"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   .container{</span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">border</span>: <span class="number">1px</span> solid blueviolet;</span></span><br><span class="line">     }   </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112238867.png" alt="image-20210306112238867"></p><p><code>flex-wrap</code>  让弹性盒元素在必要的时候拆行</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112251352.png" alt="image-20210306112251352"></p><h3 id="子元素常用属性">子元素常用属性</h3><p>伸缩盒中的每一个元素称为一个项目。<br><code>flex-grow: number;</code>   一个数字，规定项目将相对于其他灵活的项目进行扩展的量。默认值是 0。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}                </span><br><span class="line"><span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:orange}             </span><br><span class="line"><span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:red}    </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;伸缩盒模型 flexbox&quot;&gt;伸缩盒模型 flexbox&lt;/h2&gt;
&lt;p&gt;伸缩盒模型也叫弹性盒模型，或&lt;code&gt;flexBox&lt;/code&gt;。它决定一个盒子在其它盒子中的分布，以及如何处理可用的空间。使用该模型，可以轻松的创建“自适应”浏览器窗口的流动布局。&lt;/</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>display 属性和盒子模型</title>
    <link href="http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-09-02T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="display 属性">display 属性</h2><p>​根据 CSS 规范的规定，每一个网页元素都有一个 display 属性，用于确定该元素的类型，每一个元素都有默认的 display 属性值，比如 div 元素，它的默认 display 属性值为“block”，称为块元素，而 span 元素的默认 display 属性值为“inline”，称为“行内”元素。</p><p>​       块元素与行元素是可以转换的，也就是说 display 的属性值可以由我们来改变 。</p><h3 id="display 常见属性值">display 常见属性值</h3><ol><li>none：隐藏对象</li><li>inline：指定对象为内联元素</li><li>block：指定对象为块元素</li><li>inline-block：指定对象为内联块元素</li><li>table-cell：指定对象作为表格单元格</li><li>flex：弹性盒</li></ol><h3 id="visibility-hidden 和 display-none 和 opacity-0 的区别：">visibility:hidden 和 display:none 和 opacity:0 的区别：</h3><ol><li><p><code>visibility:hidden</code>和 <code>opacity:0</code> 会将元素隐藏，但是物理位置实际存在。</p></li><li><p><code>display:none</code> 隐藏元素，不保留物理位置。</p></li></ol><p>​网页中大部分对象 <code> 默认是占用文档流</code>，也有一些对象是不占文档流的，比如表单中隐藏域。当然我们也可以让占用文档流的元素转换成不占文档流，这就要用到 CSS 中属性 position、float、display 来控制。默认情况下，所有元素都处在文档流中。</p><p>四种情况将 <code> 使得元素离开文档流：浮动 float、绝对定位 absolute、固定定位 fixed、元素不显示 display:none</code>，这种情况不占文档流的空间，而普通元素的位置基于文档流。</p><h2 id="盒子模型">盒子模型</h2><h3 id="W3C 盒模型">W3C 盒模型</h3><p>盒模型由内容 (content)、填充(padding)、边框(border)、边界(margin) 组成</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211024837.png" alt="image-20210305211024837"></p><h3 id="margin（外边距）">margin（外边距）</h3><p>围绕在元素边框周围的空白区域，会在元素外创建额外的空白区域，外边距是透明的。<br>语法：<code>margin:value;</code><br><code>margin-top/right/bottom/left: value;</code><br>value 可取值为 <code> 像素，%，auto，负值</code></p><p>外边距简写</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211118212.png" alt="image-20210305211118212" style="zoom:80%;"><p>margin 设置元素外边距的宽度，它有这么几个特点：</p><ol><li>块级元素的垂直相邻外边距会合并</li><li>行内元素实际上不占上下外边距。行内元素的的左右外边距不合并</li><li>浮动元素的外边距也不会合并</li><li>允许指定负的外边距值，不过使用时要小心</li></ol><h3 id="border（边框）">border（边框）</h3><p>border 属性设置一个元素的边框，它有三个要素：<code>宽、样式、颜色</code>，统称“边框三要素”。三要素书写的时候一般如下顺序：</p><p>​<code>border：宽度 样式 颜色        border: 1px solid red;</code></p><p>​不过不按此顺序来写依然能正常显示。<code>div{ border: red solid 2px; }</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211414164.png" alt="image-20210305211414164"></p><p><code>border-style</code>设置边框的样式，有五种常用样式可选：</p><ul><li>点状 dotted</li><li>实线 solid</li><li>双线 double   （ 需要最起码设置为 3 像素，不然显示不下）</li><li>虚线 dashed</li><li>无边框 none</li></ul><p>border 的三要素可以统一写在”border”属性中，也可以单独设置。</p><p>​统一的写法：<code>border: 1px solid  red;</code><br>​单独设置的写法：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-width</span>: ; </span><br><span class="line"><span class="attribute">border-style</span>: ;</span><br><span class="line"><span class="attribute">border-color</span>: ;</span><br></pre></td></tr></tbody></table></figure><h3 id="padding（内边距）">padding（内边距）</h3><p>内容区域和边框之间的空间。会扩大元素边框所占用的区域<br>语法：<code>padding:value;</code><br>单边设置<br><code>padding-top/right/bottom/left:value;</code>value 可取值为像素，百分比，但不能为负数</p><p>内边距的简写</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><h3 id="怪异盒模型">怪异盒模型</h3><p>​盒子模型分两种，一种是符合 W3C 规范的标准例子模型，另一种是 IE 的盒子模型，IE 的盒子模型也被叫怪异盒子。<br>​可以看到 IE 盒子模型也包括 margin、border、padding、content，不过，和标准 盒子模型不同的是：IE 盒子模型的宽，包含了 border 和 pading。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211844651.png" alt="image-20210305211844651"></p><h3 id="Box-sizing">Box-sizing</h3><p>​<code>box-sizing</code> 属性允许你以“W3C 的盒模型”或“IE 盒模型”来定义元素，以适应区域。换句话说，当前元素使用哪种盒模型，<code>可以由 box-sizing 属性来指定</code><br>​它有两个值<br>​<code>content-box（标准）</code><br>​padding 和 border 不被包含在 width 和 height 内，<code>元素的实际大小为宽高 +border+padding</code>，此为标准模式下的盒模型。</p><p>​<code>border-box（怪异）</code><br>​padding 和 border 被包含在定义的 width 和 height 中，<code>元素实际的大小为你定义了多宽就是多宽</code>。此属性为怪异模式下的盒模型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;display 属性&quot;&gt;display 属性&lt;/h2&gt;
&lt;p&gt;​	根据 CSS 规范的规定，每一个网页元素都有一个 display 属性，用于确定该元素的类型，每一个元素都有默认的 display 属性值，比如 div 元素，它的默认 display 属性值为“b</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Position 定位和 z-index</title>
    <link href="http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/"/>
    <id>http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/</id>
    <published>2020-09-01T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="position 定位">position 定位</h2><p>position 属性指定一个元素（静态的，相对的，绝对或固定）的定位方法的类型。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305201823730.png" alt="image-20210305201823730"></p><h3 id="realtive">realtive</h3><p>以 <code> 自身为参照物 </code> 移动到指定的位置，并且 <code> 被定位的元素会占据原有的位置</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">      }</span><br><span class="line">      .d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">      }</span><br><span class="line">      .d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">      }</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203011083.png" alt="image-20210305203011083" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">      }</span><br><span class="line">      .d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">      }</span><br><span class="line">      .d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">      }</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203041348.png" alt="image-20210305203041348" style="zoom:50%;"><h3 id="absolute">absolute</h3><p>以其他元素作为参照物，移动指定距离，且不会占据原有的位置，关于 <code>absolute</code> 定位参考点的选择：</p><ol><li>如果元素的外层元素是非 <code>static</code> 定位（有除默认属性之外的定位属性），那么外层元素就成为了该元素的定位参考点。</li><li>如果元素的外层元素没有设置任何 <code>position</code> 的值，那么该元素将寻找离自己最近的设定过非默认 <code>position</code> 属性的外层元素作为参照物。</li><li>如果元素的外层元素没有找到设定为非默认 <code>positon</code> 属性的外层元素，那么此时定位参考元素变为 <code>body</code> ，或者说页面</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">      }</span><br><span class="line">      .d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line">      }</span><br><span class="line">      .d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">      }</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203556950.png" alt="image-20210305203556950" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">      }</span><br><span class="line">      .d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">      }</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203705689.png" alt="image-20210305203705689" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">   }</span><br><span class="line">   .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">   }</span><br><span class="line">   .d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line">   }</span><br><span class="line">   .d22{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line">   }</span><br><span class="line">   .d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">   }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d22"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305204434371.png" alt="image-20210305204434371" style="zoom:50%;"><h3 id="fixed">fixed</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      &gt;&gt;&gt;&gt;&gt;&gt;1</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &gt;&gt;&gt;&gt;&gt;&gt;2</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205431227.png" alt="image-20210305205431227"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205442554.png" alt="image-20210305205442554"></p><h2 id="z-index 堆叠顺序">z-index 堆叠顺序</h2><p>一旦修改了元素的定位方式，则元素可能会发生堆叠。可以 <code> 使用 z-index 属性来控制定位元素的出现顺序</code>。z-index 仅能在定位的元素（使用了 <code>position</code> 非默认属性的元素）上生效<br>z-index 属性：<br>值为数值，数值越大表示堆叠顺序越高，即离用户越近，可以设置为负值，表示离用户更远 ，一般不设置负值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210239608.png" alt="image-20210305210239608" style="zoom:50%;"><p>可以发现后面的 <code>div</code> 会覆盖前面的，如果想让前面的覆盖后面的，可以设置 <code>z-index</code>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      .d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line">      }</span><br><span class="line">      .d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">      }</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210411571.png" alt="image-20210305210411571" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;position 定位&quot;&gt;position 定位&lt;/h2&gt;
&lt;p&gt;position 属性指定一个元素（静态的，相对的，绝对或固定）的定位方法的类型。&lt;/p&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-sr</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css3 动画常用属性和阴影圆角</title>
    <link href="http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/</id>
    <published>2020-08-30T06:53:47.000Z</published>
    <updated>2021-05-24T04:14:45.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3 的含义">CSS3 的含义</h2><p>​<code>CSS3</code>是 <code>CSS</code>（层叠样式表）技术的升级版本。<code>CSS3</code> 完全向后兼容，不必改变现有的设计，浏览器将永远支持 <code>CSS2</code>。<code>W3C</code> 的<code>CSS3</code>规范仍在开发。但是，许多新的 <code>CSS3</code> 属性已在现代浏览器使用。</p><h2 id="浏览器内核以及其前缀">浏览器内核以及其前缀</h2><p>​<code>CSS</code>标准中各个属性都要经历从草案到推荐的过程，<code>css3</code>中的属性进展都不一样，浏览器厂商在标准尚未明确情况下提前支持会有风险，浏览器厂商对新属性的支持情况也不同，所以会加厂商前缀加以区分。如果某个属性已经从草案变为了或接近推荐方案，并且厂商已经完全实现了推荐属性，那就不用加厂商前缀。如 <code>border-radius</code> 已经很成熟，不用加前缀。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103253008.png" alt="image-20210306103253008"></p><p>​<code>根据不同的浏览器内核，css 前缀会有不同</code>。最基本的浏览器内核有如下四种，其它的内核都是基于此四种进行再研发的。</p><ol><li><p><code>Gecko 内核</code>      前缀为<code>-moz-</code>   火狐浏览器</p></li><li><p><code>Webkit 内核</code>    前缀为<code>-webkit-</code>   也叫谷歌内核，chrome 浏览器最先开发使用，safari 浏览器也使用 该内核。国内很多浏览器也使用了<code>webkit 内核</code>，如 360 极速、世界之窗、猎豹等。</p></li><li><p><code>Trident 内核</code>    前缀为<code>-ms-</code>  也称 IE 内核</p></li><li><p><code>Presto 内核</code>      前缀<code>-o-</code>   目前只有 opera 采用</p></li></ol><h3 id="圆角 border-radius">圆角 border-radius</h3><p>语法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>：value；四个角</span><br><span class="line"><span class="attribute">border-radius</span>：value value；左上右下、右上左下</span><br><span class="line"><span class="attribute">border-radius</span>：value value value value；</span><br><span class="line">      代表设置对象左上角、右上角、右下角、左下角</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103337192.png" alt="image-20210306103337192" style="zoom:50%;"><h3 id="盒阴影 box-shadow">盒阴影 box-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103327261.png" alt="image-20210306103327261"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .shadow{</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">3px</span> darkred;</span></span><br><span class="line">        }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103724901.png" alt="image-20210306103724901"></p><h3 id="文字阴影 text-shadow">文字阴影 text-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103735569.png" alt="image-20210306103735569"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .text1{</span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: palegreen;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-shadow</span>: <span class="number">10px</span> -<span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span> ;</span></span><br><span class="line">       }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text1"</span>&gt;</span>学习猿地<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103747132.png" alt="image-20210306103747132"></p><h2 id="CSS3- 渐变">CSS3 渐变</h2><p><a class="link" href="https://www.runoob.com/css3/css3-gradients.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>​<code>CSS3 渐变（gradients）</code>可以让你在两个或多个指定的颜色之间显示平稳的过渡。以前，你必须使用图像来实现这些效果。现在，使用 <code>CSS3 渐变（gradients）</code>，通过代码来实现渐变可以减少请求和节约带宽。</p><p><code>CSS3</code> 定义了两种类型的渐变（gradients）:</p><ul><li>线性渐变（Linear Gradients）: 向下 / 向上 / 向左 / 向右 / 对角方向<br><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code></li><li>径向渐变（Radial Gradients）: 由它们的中心定义<br><code>background: radial-gradient(center, shape， size, start-color, ..., last-color);</code><br>默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），它可以是值 <code>circle</code> 或 <code>ellipse</code>。其中，circle 表示圆形，ellipse 表示椭圆形</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103803293.png" alt="image-20210306103803293"></p><h2 id="CSS3- 转换 Transform（2D 转换）">CSS3 转换 Transform（2D 转换）</h2><p><a class="link" href="https://www.cnblogs.com/aspnetjia/p/5139020.html">transform 详解<i class="fas fa-external-link-alt"></i></a></p><p>​<code>CSS3</code>中的转换允许我们对元素进行旋转、缩放、移动或倾斜。它为分 <code>2D 转换 或 3D 转换。</code> 在 css2 时代，如果要做一些图片转换角度，都依赖于 <code> 图片、Flash 或 JavaScript 才能完成 </code>。但是现在借助<code>CSS3</code> 就可以轻松倾斜、缩放、移动以及翻转元素。通过 <code>CSS</code> 变形，可以让元素生成静态视觉效果，但也可以很容易结合 <code>CSS3 的 transition 和动画的 keyframe</code> 产生一些动画效果。</p><h3 id="转换 Transform-2D 的属性">转换 Transform 2D 的属性</h3><p>​通常的属性包含了属性名和属性值，而 CSS3 的 transform 属性是用函数来定义的。Transform 2D 函数包括了 <code>translate()、scale()、rotate() 和 skew()。</code></p><p>书写格式:<br><code>transform: 函数名(x 轴值，y 轴值);</code></p><p>转换的效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104641628.png" alt="image-20210306104641628"></p><ol><li><p><code>translate()</code><br>translate()方法，根据左 (X 轴) 和顶部 (Y 轴) 位置给定的参数，从当前元素位置移动。接受 CSS 的标准度量单位（px），translate(x,y)：转换，沿着 X 和 Y 轴移动元素。</p></li><li><p><code>rotate()</code><br>通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。它以 deg 为单位，代表了旋转的角度。</p></li><li><p><code>scale()</code><br>通过值把宽和高转换为原始尺寸的 n 倍，接受两个参数，前面的为宽，后面的为高。可取值：默认值为 1，缩小：0-1 之间的数，放大：大于 1 的数</p></li><li><p><code>skew()</code><br>根据水平轴和垂直轴翻转，接受两个或一个值，两个值时前面为水平，后面为垂直的角度 ，一个值只是水平轴的角度。此函数是指元素的倾斜角度。</p></li></ol><h3 id="转换 Transform-3D 的属性">转换 Transform 3D 的属性</h3><p>Transform 3D 常用函数有：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104709948.png" alt="image-20210306104709948"></p><h2 id="CSS3- 过渡 Transition">CSS3 过渡 Transition</h2><p><a class="link" href="https://www.cnblogs.com/afighter/p/5731293.html">transition 演示<i class="fas fa-external-link-alt"></i></a></p><h3 id="什么是过渡">什么是过渡</h3><p>使用 <code>css</code> 的属性值在一段时间内平滑的过渡，比如，鼠标悬停后，背景色在 <code>1s</code> 内，由白色平滑的过渡到红色<br>指定四个要素：</p><ul><li><p>过渡属性，如 background、color 等</p></li><li><p>过渡所需时间</p></li><li><p>过渡函数，即过渡的速度、方式等</p></li><li><p>过渡延迟时间，表示开始执行的时间</p></li></ul><p>触发过渡：通过用户的行为触发，如点击、悬浮等</p><h3 id="过渡属性">过渡属性</h3><p><code>transition-property: none|all|property;</code><br>多个属性用逗号隔开，可设置过渡的属性，颜色属性。取值为数值的属性：转换属性，渐变属性，阴影属性</p><h3 id="过渡时间">过渡时间</h3><p><code>transition-duration: s|ms;</code><br>默认值为 0，意味着不会有效果，所以必须设置 transition-duration 属性</p><h3 id="过渡函数">过渡函数</h3><p><code>transition-timing-function: ;</code><br>取值：<br>ease：默认值，规定慢速开始，然后变快，然后慢速结束的过渡效果<br>linear：匀速<br>ease-in：规定以慢速开始，加速效果<br>ease-out：规定以慢速结束，减速效果<br>ease-in-out：规定以慢速开始和结束，先加速后减速效果</p><h3 id="过渡延迟">过渡延迟</h3><p><code>transition-delay: s|ms;</code><br>改变元素属性值后多长时间开始执行过渡效果</p><h3 id="简写属性 transition">简写属性 transition</h3><p>transition 属性是一个简写属性，用于设置四个过渡属性<br><code>语法：transition:property duration timing-function delay;</code></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>{</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#1fb57b</span>;</span><br><span class="line">     <span class="attribute">transition</span>: background <span class="number">4s</span> linear <span class="number">1s</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="selector-id">#box</span><span class="selector-pseudo">:hover</span>{</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="CSS3-animation 动画">CSS3 animation 动画</h2><p><a class="link" href="https://www.runoob.com/css3/css3-animations.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>过渡属性只能模拟动画效果，animation 属性可以制作类似 Flash 动画，通过关键帧控制动画的每一步，使元素从一种样式逐渐变化为另一种样式，实现复杂的动画效果。</p><h3 id="keyframes">@keyframes</h3><p>作用：用于声明动画，指定关键帧<br>帧：用于分解动画动作，每个帧代表某个时间点。定义每个帧上的动作</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306105920430.png" alt="image-20210306105920430"></p><h3 id="keyframes 的语法">@keyframes 的语法</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name  {</span><br><span class="line">    from|0%{</span><br><span class="line">        css 样式</span><br><span class="line">    }</span><br><span class="line">    percent{</span><br><span class="line">        css 样式</span><br><span class="line">    }</span><br><span class="line">    to|100%{</span><br><span class="line">        css 样式</span><br><span class="line">    }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="animation 属性">animation 属性</h3><p><code>animation</code>属性用于控制动画，调用由 <code>@keyframes</code> 定义的动画，设置动画属性，如时间、次数等。animation 属性是一个简写属性。<br>语法为：<code>animation:name  duration timing-function delay iteration-count direction;</code></p><h3 id="动画子属性">动画子属性</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-name</span>: ;调用动画，规定需要和 keyframes 的名字一致 </span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-duration</span>: s|ms;动画完成一个周期所需要的时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-timing-function</span>: ;规定动画的速度变化类型</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-delay</span>:s|ms ;播放之前的延迟时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-iteration-count</span>: 数值 |infinite;播放次数 infinite 表示无限次播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-direction</span>: normal|alternate;动画播放方向,<span class="attribute">normal</span> 为默认值，表示正常播放,alternate 表示轮流播放，即动画会在奇数次正常播放，而在偶数次向后播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-fill-mode</span>: forwards;动画停在最后一帧，默认值为<span class="attribute">none</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-play-state</span>:paused|running; 属性规定动画正在运行还是暂停，默认值为 running</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSS3 的含义&quot;&gt;CSS3 的含义&lt;/h2&gt;
&lt;p&gt;​	&lt;code&gt;CSS3&lt;/code&gt;是 &lt;code&gt;CSS&lt;/code&gt;（层叠样式表）技术的升级版本。&lt;code&gt;CSS3&lt;/code&gt; 完全向后兼容，不必改变现有的设计，浏览器将永远支持 &lt;code&gt;CSS</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Swagger 入门</title>
    <link href="http://blog.sky123.top/2020/08/08/springboot/Swagger/"/>
    <id>http://blog.sky123.top/2020/08/08/springboot/Swagger/</id>
    <published>2020-08-08T02:01:25.000Z</published>
    <updated>2021-05-24T05:02:01.268Z</updated>
    
    <content type="html"><![CDATA[<p>学习目标：</p><ul><li>了解 Swagger 的作用和概念</li><li>了解前后端分离的概念</li><li>在 Springboot 中集成 Swagger</li></ul><h2 id="Swagger 简介">Swagger 简介</h2><p>前后端分离：vue+springboot</p><ul><li>后端：控制层 + 服务层 + 数据访问层</li><li>前端：前端控制层 + 视图层</li></ul><p>前后端的好处：相对独立，松耦合，可以部署在不同的服务器。之间通过 API 接口通信</p><p>问题：</p><ul><li>前后端在集成协调的时候，无法做到 " 及时沟通，尽早解决 "（由于两端都是独立开发），最终会导致问题集中爆发。</li></ul><p>解决方案：</p><ul><li>指定计划的提纲（schema），实时更新最新的 API，降低集成的风险</li><li>早些年：使用 word 文档，不是很方便，对文档编写有一定的要求</li><li>前后端分离：<ul><li>测试接口工具：postman（不推荐再使用了）</li><li>后端提供接口，需要实时更新最新的改动</li></ul></li></ul><h2 id="Swagger">Swagger</h2><p>号称世界上最流行的 API 框架，可以实现 API 与 API 文档实时更新，支持多种语言（java，php…），直接运行可以在线测试接口。</p><p><a class="link" href="https://swagger.io/">swagger 官网<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228101919079.png" alt="image-20210228101919079"></p><h3 id="SpringFox-3-0-0- 发布">SpringFox 3.0.0 发布</h3><p>此版本的亮点：</p><blockquote><p>Spring5，Webflux 支持（仅支持请求映射，尚不支持功能端点）。<br>Spring Integration 支持。<br>SpringBoot 支持 springfox Boot starter 依赖性（零配置、自动配置支持）。<br>支持 OpenApi 3.0.3。<br>零依赖。几乎只需要 spring-plugin，swagger-core ，现有的 swagger2 注释将继续工作并丰富 openapi3.0 规范。</p></blockquote><p>兼容性说明：</p><blockquote><p>需要 Java 8<br>需要 Spring5.x（未在早期版本中测试）<br>需要 SpringBoot 2.2+（未在早期版本中测试）</p></blockquote><h3 id="swagger3-0- 与 2-xx 配置差异">swagger3.0 与 2.xx 配置差异</h3><ol><li>应用主类（即 Controller 层）添加注解<code>@EnableOpenApi (swagger2 是 @EnableSwagger2)</code>。swagger 配置类<code>SwaggerProperties.class</code>，与 swagger2.xx 版本有差异。自定义一个配置类 <code>SwaggerConfiguration.class</code></li><li>访问地址：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a> (swagger2.xx 版本访问的地址为 http://localhost:8080/swagger-ui.html)</li></ol><h2 id="Springboot 集成 Swagger">Springboot 集成 Swagger</h2><p>新建 springboot   web 项目</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102748582.png" alt="image-20210228102748582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102207420.png" alt="image-20210228102207420"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102317842.png" alt="image-20210228102317842"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228103855243.png" alt="image-20210228103855243"></p><p>导入相关依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置 Swagger</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228104926484.png" alt="image-20210228104926484"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试访问：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228110125566.png" alt="image-20210228110125566"></p><h2 id="配置 Swagger">配置 Swagger</h2><h3 id="修改 Swagger 信息">修改 Swagger 信息</h3><p>配置的关键是配置一个关键类 <code>Docket</code></p><p>点击 <code>ctrl</code> 进入查看 <code>Docket</code>，在点击进入 <code>ApiInfo.</code> 可以看到默认的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172604042.png" alt="image-20210301172604042"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172619931.png" alt="image-20210301172619931"></p><p>因此配置代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从配置文件中注入值</span></span><br><span class="line">    <span class="meta">@Value("${swagger.application-name}")</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Value("${swagger.enable}")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean swaggerEnabled;</span><br><span class="line">    <span class="meta">@Value("${swagger.application-description}")</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@Value("${swagger.name}")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value("${swagger.url}")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value("${swagger.email}")</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Value("${swagger.version}")</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="meta">@Value("${swagger.try-host}")</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">         * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(title)</span><br><span class="line">                .description(description)</span><br><span class="line">                <span class="comment">// 作者信息</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(name, url, email))</span><br><span class="line">                .version(version)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里是从 <code>application.yml</code> 配置文件中读取事先定义的值：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: 这是 Swagger 应用的名字 </span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"># ===== 自定义 swagger 配置 ===== #</span><br><span class="line">swagger:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  application-name: ${spring.application.name}</span><br><span class="line">  application-version: <span class="number">1.0</span></span><br><span class="line">  application-description: springfox swagger <span class="number">3.0</span> 整合 Demo（这里配置项目的描述）</span><br><span class="line">  <span class="keyword">try</span>-host: http:<span class="comment">//localhost:${server.port}</span></span><br><span class="line">  name: 项目负责人</span><br><span class="line">  email: <span class="number">142342423</span><span class="meta">@qq</span>.com</span><br><span class="line">  url: http:<span class="comment">//www.baidu.com</span></span><br><span class="line">  version: <span class="number">2.3</span><span class="number">.4</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>查看  <code>ApiInfoBuilder</code> 可以查看更多的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301180154288.png" alt="image-20210301180154288"></p><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172838848.png" alt="image-20210301172838848"></p><h3 id="配置扫描路径">配置扫描路径</h3><p><code>any()：</code>扫描全部</p><p><code>none()：</code>都不扫描</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181141539.png" alt="image-20210301181141539"></p><h4 id="包扫描">包扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.swaggerdemo.controller"</span>))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="类注解扫描">类注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="方法注解扫描">方法注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="效果">效果</h4><p>没有了 <code>error</code>  的默认接口，只显示自己写的接口：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181946804.png" alt="image-20210301181946804"></p><h3 id="配置过滤路径">配置过滤路径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">               .host(host)</span><br><span class="line">               <span class="comment">// 是否开启</span></span><br><span class="line">               .enable(swaggerEnabled).select()</span><br><span class="line">               .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">               .build();</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301182510169.png" alt="image-20210301182510169"></p><h3 id="配置 Swagger 的 API 分组">配置 Swagger 的 API 分组</h3><p>关键：Docket 有个分组方法，但是只能配置一个分组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.groupName(<span class="string">"A"</span>)</span><br></pre></td></tr></tbody></table></figure><p>因此要配置多个分组，只需要注入多个 Docket 实例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"B"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"C"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">     * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">            .host(host)</span><br><span class="line">            .groupName(<span class="string">"A"</span>)</span><br><span class="line">            <span class="comment">// 是否开启</span></span><br><span class="line">            .enable(swaggerEnabled).select()</span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">            .build();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301190020294.png" alt="image-20210301190020294"></p><h3 id="配置接口注释">配置接口注释</h3><p><code>@Api：</code>用在 controller 类，描述 API 接口<br><code>@ApiOperation：</code>描述接口方法<br><code>@ApiModel：</code>描述对象<br><code>@ApiModelProperty：</code>描述对象属性<br><code>@ApiImplicitParams：</code>描述接口参数<br><code>@ApiResponses：</code>描述接口响应</p><p>新建实体类 <code>User</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(" 关于实体类的描述 ")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@ApiModelProperty(" 关于实体类属性的描述 ")</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(" 关于实体类属性的描述 ")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">//    public User(String username,String password){</span></span><br><span class="line"><span class="comment">//        this.username = username;</span></span><br><span class="line"><span class="comment">//        this.password = password;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    public User(){</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="meta">@ApiOperation(" 描述接口方法 ")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name="name",value=" 姓名 ",dataTypeClass = String.class,required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@ApiResponses({</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 200, message = " 请求成功 "),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 400, message = " 请求参数没填好 "),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 404, message = " 请求路径没有或页面跳转路径不对 ")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193506582.png" alt="image-20210301193506582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193519108.png" alt="image-20210301193519108"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193532477.png" alt="image-20210301193532477"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解 Swagger 的作用和概念&lt;/li&gt;
&lt;li&gt;了解前后端分离的概念&lt;/li&gt;
&lt;li&gt;在 Springboot 中集成 Swagger&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Swagger 简介&quot;&gt;Swagger 简介&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="Swagger" scheme="http://blog.sky123.top/tags/Swagger/"/>
    
    <category term="Java" scheme="http://blog.sky123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 多环境切换</title>
    <link href="http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/"/>
    <id>http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2021-05-24T05:01:40.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="好处">好处</h2><ol><li><p>不同环境配置可以配置不同的参数, 不用来回改参数</p></li><li><p>便于部署，提高效率，减少出错</p></li></ol><h2 id="步骤">步骤</h2><p>在默认文件中 <code>application.yml</code>  中 配置切换属性：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure><p>新建 <code>application-dev.yml</code> 文件：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">这是开发环境</span></span><br></pre></td></tr></tbody></table></figure><p>启动后看到：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301185125610.png" alt="image-20210301185125610"></p><p>说明环境切换成功。</p><p>同理可以新建多个配置文件，<code>yml 配置方式 </code> 会自动识别。只需在默认的 <code>application.yml</code> 切换即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;好处&quot;&gt;好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不同环境配置可以配置不同的参数, 不用来回改参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;便于部署，提高效率，减少出错&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;
&lt;p&gt;在默认文件中 &lt;co</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="SpringBoot" scheme="http://blog.sky123.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 常用字符串功能方法</title>
    <link href="http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-02T06:04:46.000Z</published>
    <updated>2021-05-24T04:28:01.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript 常用字符串功能方法">Javascript 常用字符串功能方法</h2><h3 id="字符串转换">字符串转换</h3><p>字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=num.toString();    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>你同样可以这么做：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="built_in">String</span>(num);    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>或者，在简单点儿：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="string">""</span> + num;    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串分割">字符串分割</h3><p>将字符串进行拆分返回一个新的数组，JavaScript 就给我们提供了一个非常方便的函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>);    <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo","woaiziji"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>);        <span class="comment">//["q","i","n","g","c","h","e","n","g","h","u","w","o","g","u","o","x","i","a","n","s","h","e","n","g",",","w","o","a","i","s","h","e","n","g","h","u","o",",","w","o","a","i","z","i","j","i"];</span></span><br></pre></td></tr></tbody></table></figure><p><code>split()</code>的第二个参数，表示返回的字符串数组的最大长度</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>,<span class="number">2</span>); <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>,<span class="number">8</span>); <span class="comment">//["q","i","n","g","c","h","e","n"];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串替换">字符串替换</h3><p>仅仅查找到字符串并不会是题目的停止，一般题目还经常会要求你去进行替换操作，那就继续看以下代码:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"wozaijinxingzifuchuantihuancaozuo,zifuchuantihuano"</span>;</span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="string">"zifuchuan"</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/g</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo, tihuano</span></span><br></pre></td></tr></tbody></table></figure><p>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识 g</p><h3 id="获取字符串长度">获取字符串长度</h3><p>获取字符串的长度经常会用到，方法很简单：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arrLength=mystr.length;    <span class="comment">//47</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查询子字符串">查询子字符串</h3><p>判断字符串内是否包含子串，不少开发者会使用 for 循环来判断，而忘记了 JavaScript 提供子串函数：</p><ul><li><code>indexOf()</code>，该 Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.indexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.indexOf(<span class="string">"l"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.indexOf(<span class="string">"l"</span>,<span class="number">3</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>lastIndexOf()</code>，该方法对大小写敏感。返回字符串中一个子串最后一处出现的索引（从右到左搜索），如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.lastIndexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.lastIndexOf(<span class="string">"l"</span>);    <span class="comment">//9</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.lastIndexOf(<span class="string">"l"</span>,<span class="number">4</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="返回指定位置的字符或其字符编码值">返回指定位置的字符或其字符编码值</h3><p>查找给定位置的字符，可以使用如下函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.charAt(<span class="number">7</span>);    <span class="comment">//o</span></span><br></pre></td></tr></tbody></table></figure><p>同样，它的一个兄弟函数就是查找对应位置的字符编码值，如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> charCode=mystr. charCodeAt(<span class="number">7</span>);    <span class="comment">//111</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串匹配">字符串匹配</h3><p>可以直接通过字符串进行匹配，也可以通过正则进行匹配，可能需要你对正则表达式有一定的了解，先来看看 match()函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=mystr.match(<span class="string">"guo"</span>);    <span class="comment">//guo</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=mystr.match(<span class="string">"Guo"</span>);    <span class="comment">//nullvar regexp1=/\d+/g;</span></span><br><span class="line"><span class="keyword">var</span> regexp2=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> regexp3=<span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr2=mystr.match(regexp1);    <span class="comment">//["6","33"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp2);    <span class="comment">//["guo"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp3);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr3.index    <span class="comment">//11</span></span><br><span class="line">matchStr3.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>注意：1. 此处使用字符串直接进行匹配，被匹配的字符串内包含要匹配的字符串时，返回所要匹配的字符串。</p><p>2. 如果使用正则匹配字符串时，如果正则表达式没有 g (全局标识)标志，返回与正则匹配相同的结果。而且返回的数组拥有一个额外的  input 属性，该属性包含原始字符串。另外，还拥有一个 <code>index</code> 属性，该属性表示匹配结果在被字符串中的索引（以 0 开始）。如果正则表达式包含 g 标志，则该方法返回匹配字符串的数组。</p><p>再来看看使用 <code>exec()</code> 函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=regexp1.exec(mystr);  <span class="comment">//["guo"]var regexp2=/guo/;</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=regexp2.exec(mystr);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr1.index    <span class="comment">//11</span></span><br><span class="line">matchStr1.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>简单吧，仅仅是把正则和字符串换了个位置，即 <code>exec()</code> 函数是在正则上调用，传递字符串的参数。对于上面两个方法，匹配的结果都是返回第一个匹配成功的字符串，如果匹配失败则返回<code>null</code>。</p><p>再来看一个类似的函数<code>search()</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr = <span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1 = <span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr = mystr.search(regexp1);    <span class="comment">//11</span></span><br></pre></td></tr></tbody></table></figure><p>进行正则匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1</p><h3 id="字符串连接">字符串连接</h3><p>可以将两个或多个字符串进行加法操作，同时可以使用 <code>JavaScript</code> 提供的<code>concat 函数</code>：</p><p>先看加法操作进行字符串连接：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">"world!"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1+<span class="string">" "</span>+mystr2;    <span class="comment">//Hello world!</span></span><br></pre></td></tr></tbody></table></figure><p>是不是很简单呀，那继续看看 <code>concat 函数</code> 吧：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">" world,"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr3=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr4=<span class="string">"guoxiansheng"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1.concat(mystr2+mystr3+<span class="string">" "</span>+mystr4);    <span class="comment">//Hello world,Hello guoxiansheng</span></span><br></pre></td></tr></tbody></table></figure><p><code>concat()函数 </code> 可以有多个参数，传递多个字符串，拼接多个字符串。</p><h3 id="字符串切割和提取">字符串切割和提取</h3><p>有三种可以从字符串中抽取和切割的方法：</p><p>第一种，<code>slice()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.slice(-<span class="number">3</span>);    <span class="comment">//ld!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.slice(-<span class="number">3</span>,-<span class="number">1</span>);    <span class="comment">//ld</span></span><br><span class="line"><span class="keyword">var</span> sliceStr3=mystr.slice(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr4=mystr.slice(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第二种：<code>substring()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substring(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substring(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第三种：<code>substr()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substr(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substr(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo wo</span></span><br></pre></td></tr></tbody></table></figure><p>注：1.<code>slice()</code> 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。<br>　　2.<code>substring()</code>只能非负整数，截取起始结束位置同 slice()函数一致。</p><p>3.<code>substr()</code>与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。</p><p>以上三种函数未填第二参数时，自动截取起始位置到字符串末尾。</p><h3 id="字符串大小写转换">字符串大小写转换</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> lowCaseStr=mystr.toLowerCase();    <span class="comment">//hello world!</span></span><br><span class="line"><span class="keyword">var</span> upCaseStr=mystr. toUpperCase();    <span class="comment">//HELLO WORLD!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去空格">字符串去空格</h3><p><code>trim 方法 </code> 用来删除字符串前后的空格</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"     hello world      "</span>;  </span><br><span class="line"><span class="keyword">var</span> trimStr=mystr.trim();    <span class="comment">//hello world</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去重">字符串去重</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"aahhgggsssjjj"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepeat</span>(<span class="params">msg</span>)</span>{  </span><br><span class="line">    <span class="keyword">var</span> res=[];  </span><br><span class="line">    <span class="keyword">var</span> arr=msg.split(<span class="string">""</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">        <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">            res.push(arr[i]);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">""</span>);  </span><br><span class="line">}  </span><br><span class="line">removeRepeat(str);    <span class="comment">//ahgsj </span></span><br></pre></td></tr></tbody></table></figure><h3 id="判断字符串中字符出现的次数">判断字符串中字符出现的次数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    1. 先实现字符串去重  </span></span><br><span class="line"><span class="comment">    2. 然后对去重后的数组用 for 循环操作，分别与原始数组中各个值进行比较，如果相等则 count++, 循环结束将 count 保存在 sum 数组中，然后将 count 重置为 0  </span></span><br><span class="line"><span class="comment">    3. 这样一来去重后的数组中的元素在原数组中出现的次数与 sum 数组中的元素是一一对应的  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"aacccbbeeeddd"</span>;  </span><br><span class="line"><span class="keyword">var</span> sum=[];  </span><br><span class="line"><span class="keyword">var</span> res=[];  </span><br><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">""</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">    <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">        res.push(arr[i]);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length;j++){  </span><br><span class="line">        <span class="keyword">if</span>(arr[j]==res[i]){  </span><br><span class="line">            count++;  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    sum.push(count);  </span><br><span class="line">    count=<span class="number">0</span>;  </span><br><span class="line">}  </span><br><span class="line"><span class="built_in">console</span>.log(res);    <span class="comment">//["a", "c", "b", "e", "d"]  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">var</span> str=(sum[i]%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">" 偶数 "</span>:<span class="string">" 奇数 "</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">" 出现了 "</span>+sum[i]+<span class="string">" 次 "</span>);  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">" 出现了 "</span>+str+<span class="string">" 次 "</span>);  </span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Javascript 常用字符串功能方法&quot;&gt;Javascript 常用字符串功能方法&lt;/h2&gt;
&lt;h3 id=&quot;字符串转换&quot;&gt;字符串转换&lt;/h3&gt;
&lt;p&gt;字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="http://blog.sky123.top/tags/Javascript/"/>
    
    <category term="字符串" scheme="http://blog.sky123.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
</feed>
