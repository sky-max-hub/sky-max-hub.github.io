<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.sky123.top/atom.xml" rel="self"/>
  
  <link href="http://blog.sky123.top/"/>
  <updated>2021-03-07T01:49:09.306Z</updated>
  <id>http://blog.sky123.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>考研日记06</title>
    <link href="http://blog.sky123.top/2021/03/06/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9406/"/>
    <id>http://blog.sky123.top/2021/03/06/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9406/</id>
    <published>2021-03-06T15:59:59.000Z</published>
    <updated>2021-03-07T01:49:09.306Z</updated>
    
    <content type="html"><![CDATA[<hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1351923466&amp;auto=1&amp;height=66"></iframe><hr><p>早上起的有点晚，因为这两天的目的是把课程设计搞定，室友已经去图书馆复习了，10点去食堂叫了碗牛肉拉面，食堂姐姐依旧无视我不加辣椒的请求，毅然决然的加上去了。有好几次我都觉得她不是故意的，那就是一种职业反应，感情就是吃辣椒的人居多，不多次提醒还真的不行。算了，吃辣椒就吃点吧，不是特别讨厌辣。</p><p>中午12点的时候去吃的饭，同时还把单词记完了。从网上找了现成的组件库帮助我快速完成了项目的界面UI，这下应该就差类图和代码生成了。下午的时候，学弟对我之前的前端架子存在疑惑，认为有的东西应该删掉。我感到有点不悦，可能是我觉得我的任务已经完成了，该怎么做是他们的事，不用在过问我了。</p><p>直到晚上，老师找我们开线上会议的时候我才发现，我要一直指导他们到完成整个项目。我有点不乐意，主要是跟原先说好的不一样，而且我自己本身也是半斤八两，指导压根就说不上。但是既然入了这个坑，还是做到老师说到好为止吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=</summary>
      
    
    
    
    
    <category term="考研" scheme="http://blog.sky123.top/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="日记" scheme="http://blog.sky123.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>考研日记05</title>
    <link href="http://blog.sky123.top/2021/03/05/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9405/"/>
    <id>http://blog.sky123.top/2021/03/05/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9405/</id>
    <published>2021-03-05T15:59:59.000Z</published>
    <updated>2021-03-05T13:59:37.790Z</updated>
    
    <content type="html"><![CDATA[<hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="430" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1814040682&amp;auto=1&amp;height=66"></iframe><hr><h1 id="考研日记05"><a href="#考研日记05" class="headerlink" title="考研日记05"></a>考研日记05</h1><p>呼，难得的星期五！最近的几天都没有太认真的复习，主要是课设太繁琐和其他项目的原因，导致没有太多精力学习，只是断断续续的记了点单词，教材陆陆续续到了，但是高数复习书在快递那里出了点意外，不知道我还能不能拿到，唉，下午放学的时候又去了趟快递结果没拿到自己的，反倒帮同学带了一个大包裹，真的是累死我了。</p><p>今晚没有复习考研，因为实在不想去图书馆，在寝室里把博客笔记整理了一下，顺便找一下在网上找一下免费的原型组件库，找到了几个，课程设计的界面设计的质量就有保障了，争取这两天把课程设计搞定，之后就可以专心复习了。</p><p>就这样了，明天见！（对了，发现了markdown中插入音乐的方法，开心！）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;430&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=</summary>
      
    
    
    
    
    <category term="考研" scheme="http://blog.sky123.top/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="日记" scheme="http://blog.sky123.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>考研日记04</title>
    <link href="http://blog.sky123.top/2021/03/04/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9404/"/>
    <id>http://blog.sky123.top/2021/03/04/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9404/</id>
    <published>2021-03-04T15:59:59.000Z</published>
    <updated>2021-03-05T13:50:51.054Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/yachts-5971866_1280.jpg"></p><hr><h1 id="考研日记04"><a href="#考研日记04" class="headerlink" title="考研日记04"></a>考研日记04</h1><p>今天终于把老师交代的任务完成了，心情很是高兴，程序员最开心的时候莫过于任务完成之后的成就感了。完成之后和学弟和老师交流了一下，决定明天讨论一下，之后就算到此为止，没我什么事了。<br>突然想看一部电影，《左耳》，因为想起里面的一句话，但是忘记怎么说了，虽然知道了剧情，但是还是想要慢慢地看下去。等下就把它看完。<br>下午和小伙伴们一起去领快递和吃饭。晚上和他们一起去图书馆自习。突然觉得有几个朋友结伴真的很不错，不会让你感到孤单，也会理解你的性格，懂得分寸。当然一个人有一个人的好处，一个人的世界不用在意他人的感受，只为了自己快乐，我都是渴望被理解的，但是现实不总是如我所愿，我会试着说出心中所想，但是理智总说这样可能会害怕伤害到别人。<br>就这样了，我是一边和别人聊天，一边写这篇日记的，所以有点马虎，望见谅。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/yachts-5971866_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;考研日记04&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="考研" scheme="http://blog.sky123.top/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="日记" scheme="http://blog.sky123.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>考研日记03</title>
    <link href="http://blog.sky123.top/2021/03/03/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9403/"/>
    <id>http://blog.sky123.top/2021/03/03/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9403/</id>
    <published>2021-03-03T15:59:59.000Z</published>
    <updated>2021-03-04T04:21:41.557Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sunset-5990540_1280.jpg"></p><hr><h1 id="考研日记03"><a href="#考研日记03" class="headerlink" title="考研日记03"></a>考研日记03</h1><p>这是我4号现在写的日记，主要是补一下3号的日记。昨天敲了一晚上代码，实在是没有心情写日记了，因此到了现在才不上。</p><p>早上，平常的起床，脸上还是一如既往的平常，吃着和昨天一样的早餐。唯一的不同就是起床的时间晚了一点，错过了人潮，也踩着点才到逸夫楼。之后和同学分组交流了一下课程设计，确定了功能模块和任务后，就把它放到一边，开始敲另一个项目的代码了，发现自己也是学长了，需要教学弟东西，带学弟入门，但是也没有什么学长的架子（应该是好事）。</p><p>下午到晚上，都是一直在发现问题和解决问题，发现自己真的好久没动代码，好久没写<code>vue</code>的界面了，需要一直上网搜索和看自己的博客笔记，要是换成其他人肯定早就完成了，可我真的很挑剔，代码的格式一定要完美，界面一定要没有bug，功能架子一定搭完整。这样的进度浪费了好多时间，可是我安慰自己，再这样写项目的时间和机会可不多，一定认真负责的完成，考研复习的事就被我暂时放到一边了，只是偶尔地记一下单词。</p><p>就这样了，结束。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/sunset-5990540_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;考研日记03&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="考研" scheme="http://blog.sky123.top/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="日记" scheme="http://blog.sky123.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>考研日记02</title>
    <link href="http://blog.sky123.top/2021/03/02/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9402/"/>
    <id>http://blog.sky123.top/2021/03/02/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9402/</id>
    <published>2021-03-02T15:59:59.000Z</published>
    <updated>2021-03-04T04:05:48.579Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sheep-690198_1280.jpg"></p><hr><h1 id="考研日记02"><a href="#考研日记02" class="headerlink" title="考研日记02"></a>考研日记02</h1><p>今天没有时间复习，更多的处理课程设计相关的事情，早上把软件安装了一下，找到了墨墨记单词的破解版，可以免登录获得单词无上限。有点开心，于是开始记起来单词。</p><p>下午的时候老师还让我负责前端架子的搭建，虽然很想拒绝，但是就是说不出口，唉，胆子真的小，还是太在意别人的看法了。这样的后果是我还得在课程设计期间把做另一件麻烦的事情，熬夜又是不可避免的了。</p><p>晚上和同学们打了会球，之后就立马敲代码到了现在。累死我了，不想说太多，就这样了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/sheep-690198_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;考研日记02&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="考研" scheme="http://blog.sky123.top/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="日记" scheme="http://blog.sky123.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>考研日记01</title>
    <link href="http://blog.sky123.top/2021/03/01/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9401/"/>
    <id>http://blog.sky123.top/2021/03/01/%E8%80%83%E7%A0%94/%E8%80%83%E7%A0%9401/</id>
    <published>2021-03-01T11:46:48.000Z</published>
    <updated>2021-03-01T12:00:05.337Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sheep-690198_1280.jpg"></p><hr><h1 id="考研日记01"><a href="#考研日记01" class="headerlink" title="考研日记01"></a>考研日记01</h1><p>今天把刘晓艳的《不就是语法和长难句》视频刷到了定语从句的部分。但是总感觉有点吃力，因为单词积累的比较少，也没有看她的单词视频。不过她的长难句视频确实很好，看着看着还能吸取点正能量。争取这学期把六级过了。</p><p>看了刘老师的视频后，学到了点道理：</p><p>人生大部分的烦恼来自对别人过高的期待。因为比起要求自己，怪罪他人好像要轻松很多。那么快乐的道理就很简单了，对他人抱着最低的期待，不要奢望别人给得太多并且严格要求自己。</p><p>今天考研第一天，算是吧，最大的感触就是要做的事情太多了，但是又感觉做不了或做不好。心里还时不时地冒出想放弃直接找工作的念头。不过都被我压了下来。对我而言，这可能是最后一次我提升学历，抚平高考遗憾的机会了。所以坚持吧，第一天就把我整的怀疑人生了，还是想太多了，干就完了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/sheep-690198_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;考研日记01&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="考研" scheme="http://blog.sky123.top/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="日记" scheme="http://blog.sky123.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>media媒体查询</title>
    <link href="http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-03-06T03:53:18.031Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/mountains-615428_1280.jpg"></p><hr><h2 id="Media-Query响应式布局—媒体查询"><a href="#Media-Query响应式布局—媒体查询" class="headerlink" title="Media Query响应式布局—媒体查询"></a>Media Query响应式布局—媒体查询</h2><p>​    响应式布局是在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。<br>​    响应式布局可以为不同终端的用户提供更加舒适的界面和更好的用户体验，而且随着目前大屏幕移动设备的普及，越来越多的网站采用这个技术。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306113916951.png" alt="image-20210306113916951"></p><h3 id="响应式设计一定是最佳选择吗？"><a href="#响应式设计一定是最佳选择吗？" class="headerlink" title="响应式设计一定是最佳选择吗？"></a>响应式设计一定是最佳选择吗？</h3><p>​    如果预算充足且形势需要，做一个真正的“手机版”网站是首选。因为响应式设计没有专门设计一个手机版网站的功能多，比如获取当前用户的<code>GPS定位</code>，只是用响应式设计会很难实现。但如果只是根据视口大小为用户提供匹配的视觉效果还是优先选择响应式设计。</p><p>优点：</p><ol><li>面对不同分辨率设备灵活性强</li><li>能够快捷解决多设备显示适应问题</li></ol><p>缺点：</p><ol><li>兼容各种设备工作量大，效率略慢</li><li>代码累赘，会出现隐藏无用的元素，加载时间加长</li><li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ol><h3 id="CSS中的Media-Query（媒介查询）是什么？"><a href="#CSS中的Media-Query（媒介查询）是什么？" class="headerlink" title="CSS中的Media Query（媒介查询）是什么？"></a>CSS中的Media Query（媒介查询）是什么？</h3><p>​    作为<code>CSS3</code>规范的一部分，媒体查询可以针对不同的屏幕尺寸设置不同的样式，它为每种类型的用户提供了最佳的体验，网站在任何尺寸设置下都能有最佳的显示效果。通过不同的媒体类型和条件定义样式表规则。<br>​<br>​    媒体查询让<code>CSS</code>可以更精确作用于不同的媒体类型和同一媒体的不同条件。媒体查询的大部分媒体特性都接受min和max用于表达“大于或等于”和“小与或等于”。如：<code>width会有min-width和max-width</code><br>​<br>​    <code>Media Queries</code>功能是非常强大的，他可以让你定制不同的分辨率和设备，并在不改变内容的情况下，让你制作的web页面在不同的分辨率和设备下都能显示正常，并且不会因此而丢失样式</p><h4 id="媒体查询实例"><a href="#媒体查询实例" class="headerlink" title="媒体查询实例"></a>媒体查询实例</h4><p>​    通过此实例观察媒体查询的功能后，再来分析语法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">body</span>{<span class="attribute">background-color</span>:grey; }   //正常情况是灰色</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) {//宽度大于 <span class="number">992px</span> 的时候被应用 pc端</span><br><span class="line">  <span class="selector-class">.class</span> {<span class="attribute">background</span>: <span class="number">#666</span>;}  }  </span><br><span class="line">           </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) { //宽度小于<span class="number">768px</span>的时候被应用  移动端</span><br><span class="line">  <span class="selector-class">.class</span> { <span class="attribute">background</span>: <span class="number">#ccc</span>; }  }</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768</span>x) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">992px</span>) {  //宽度在 <span class="number">768px</span> 和 <span class="number">992px</span> 之间的时候被应用</span><br><span class="line">  <span class="selector-class">.class</span> {  <span class="attribute">background</span>: <span class="number">#333</span>;  }   }</span><br></pre></td></tr></tbody></table></figure><h4 id="使用Media-Query的基本语法"><a href="#使用Media-Query的基本语法" class="headerlink" title="使用Media Query的基本语法"></a>使用Media Query的基本语法</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) {</span><br><span class="line">       CSS-<span class="selector-tag">Code</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>​    以上通过<code>@media</code>定义媒体查询，<code>mediatype</code>代表了设备类型，目前只有<code>screen</code>最常用，<code>and|not|only</code>为条件，<code>media feature</code>为媒体特点，通常是写设备的宽度。</p><p>​    <code>@media screen and (max-width:960px)</code> 的意思为：当前设备为screen（电脑、平板、手机）时，并且最大宽度为960时，显示的样式。</p><p>媒体类型有：</p><ul><li>all   所有设备</li><li>print    用于打印机和打印预览</li><li>screen    用于电脑屏幕，平板电脑，智能手机等</li><li>speech    应用于屏幕阅读器等发声设备</li></ul><h3 id="用媒体查询改造我们的设计"><a href="#用媒体查询改造我们的设计" class="headerlink" title="用媒体查询改造我们的设计"></a>用媒体查询改造我们的设计</h3><p>​    我们都知道，样式表里面，后面的样式会覆盖前面的样式。因此，我们可以在设置好网站基本样式后，使用媒体查询来进一步重写相应的部分。例如，在PC端将导航显示成简单的链接，然后再针对小视口，使用媒体查询重写这一部分。理论上讲最好是从小屏幕设备开始设计，然后渐进增强。但实际上我们使用媒体查询要解决的问题，都是已经存在PC端站点了，<code>更多的是要将现有的桌面版网页改造成响应式的</code>。</p><p>加载媒体查询的最佳方法：</p><p>​    使用<code>多个独立的CSS文件会增加HTTP请求的数量</code>，使页面加载变慢。所以我们的媒体查询样式的文件尽量放在一个里面，以注释加以区分。</p><p>阻止移动浏览器自动调整页面大小</p><p>​    <code>ios和android浏览器都基于webkit内核</code>，这两种浏览器和许多其它浏览器都支持用<code>viewport，meta元素覆盖默认的画布缩放设置</code>。只需要在HTML的<code>&lt;head&gt;</code>标签中插入一个<code>&lt;meta&gt;</code>标签，<code>meta</code>标签中可以设置具体的宽度或缩放比。下面为示例</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span>  <span class="attr">content</span>=<span class="string">"initial-scale=1.0,width=device-width"</span> /&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p><code>name=”viewport”</code>  说明此meta标签定义视口的属性<br><code>​initial-scale=2.0</code>   意思是将页面放大两倍<br><code>​width=device-width</code>   告诉浏览器页面的宽度等于设备宽度</p><p>允许用户将页面最大放大至设备宽度3倍，最小压缩至设备宽度的一半</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">device-width,</span> <span class="attr">maximum-scale</span>=<span class="string">3,</span> <span class="attr">minimum-scale</span>=<span class="string">0.5”</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>禁止用户缩放，可以在混合<code>APP</code>时，为了使<code>html</code>页面更逼真，使页面无法缩放</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”initial-scale</span>=<span class="string">1.0,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span> /&gt;</span>   //user-scalable=no是禁止缩放</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/mountains-615428_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Media-Q</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>栅格布局基本概念</title>
    <link href="http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-03-06T05:00:30.948Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/mountain-547363_1280.jpg"></p><hr><h2 id="栅格化布局"><a href="#栅格化布局" class="headerlink" title="栅格化布局"></a>栅格化布局</h2><p>网格布局<code>（Grid）</code>是最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 <code>CSS 框架</code>达到的效果，现在浏览器内置了。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123208640.png" alt="image-20210306123208640"></p><p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。</p><p>Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>容器和项目<br>    采用网格布局的区域，称为<code>"容器"（container）</code>。容器内部采用网格定位的子元素，称为<code>"项目"（item）</code>。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123226964.png" alt="image-20210306123226964"></p><p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。</p><p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<code>&lt;p&gt;</code>元素就不是项目。Grid 布局只对项目生效。</p><p>行和列<br>       容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。水平的深色区域就是”行”，垂直的深色区域就是”列”</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123236954.png" alt="image-20210306123236954"></p><h3 id="容器中的属性"><a href="#容器中的属性" class="headerlink" title="容器中的属性"></a>容器中的属性</h3><p><code>display：grid</code>  指定一个容器采用网格布局，默认情况下，容器元素都是块元素。inline-grid  设置为行内元素网格布局</p><p><code>grid-template-columns</code> 属性定义每一列的列宽。<br><code>grid-template-rows</code> 属性定义每一行的行高</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123247282.png" alt="image-20210306123247282"></p><p>注意，设为网格布局以后，<code>容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</code></p><p>科普视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=629123551&amp;bvid=BV1Gt4y1z7NQ&amp;cid=293320928&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/mountain-547363_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;栅格化布局&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-03T06:53:47.000Z</published>
    <updated>2021-03-06T03:42:56.986Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/beach-1236581_1280.jpg"></p><hr><h2 id="伸缩盒模型flexbox"><a href="#伸缩盒模型flexbox" class="headerlink" title="伸缩盒模型flexbox"></a>伸缩盒模型flexbox</h2><p>伸缩盒模型也叫弹性盒模型，或<code>flexBox</code>。它决定一个盒子在其它盒子中的分布，以及如何处理可用的空间。使用该模型，可以轻松的创建“自适应”浏览器窗口的流动布局。</p><blockquote><p><code>flexbox</code>是一个很新的东西，在<code>w3c</code>希望可以使用<code>flexbox</code>实现一些更复杂的布局和应用。传统盒模型基于HTML文档流排列，使用弹性盒模型可以规定特定的顺序。要开启弹性盒模型，只需要设置display的属性值 flex，因为它是<code>CSS3</code>中为display新添加的值类型。</p></blockquote><p>目的：在浏览器窗口变化时，盒子相应改变大小。<br><code>设置了弹性盒模型后，float，clear和vertical-align在flex中不起作用。</code></p><h3 id="旧的伸缩盒"><a href="#旧的伸缩盒" class="headerlink" title="旧的伸缩盒"></a>旧的伸缩盒</h3><p>​       伸缩盒从被提出到如今一直在修改，所以这里涉及到了新老写法。伸缩盒最老版本<br>​    <code>display:box;</code>  将对象作为弹性伸缩盒显示（火狐和<code>webkit</code>内核都支持<code>display:-webkit-box;</code>或<code>display:-moz-box;</code>）。子元素   <code>box-flex:;</code><br>伸缩盒过渡版本：<code>display:flexbox;</code>  将对象作为弹性伸缩盒显示<br>伸缩盒最新版本：<code>display:flex;</code>  将对象作为弹性伸缩盒显示</p><h3 id="flexbox的基础知识"><a href="#flexbox的基础知识" class="headerlink" title="flexbox的基础知识"></a>flexbox的基础知识</h3><p>​    由于 <code>flexbox</code>是一个整体的模块，它们之中一些属性是在父容器上设置，而一些是在子容器上设置。一个<code>flexbox</code>的基本结构：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">         <span class="selector-class">.box</span>{ <span class="attribute">display</span>: flex;}    //最外层的为父容器，定义此容器为弹性布局</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}       <span class="attribute">flex-grow</span>占<span class="number">1</span>比例</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">2</span>; <span class="attribute">background</span>:orange}     占<span class="number">2</span>比例</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">3</span>; <span class="attribute">background</span>:red}        占<span class="number">3</span>比例</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>1.首先规定哪个是父容器，父容器中包含多个“项目”（每个子div），项目是可以在父容器中弹性布局的。<br>2.其次还可以规定父容器中要怎么来显示它里面的项目，如是否换行、项目排列方向等</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112154902.png" alt="image-20210306112154902"></p><h3 id="父容器常用属性"><a href="#父容器常用属性" class="headerlink" title="父容器常用属性"></a>父容器常用属性</h3><p><code>display: flex;</code>   定义一个flex容器。新弹性盒  设置父元素是一个弹性盒，子元素会自动水平排列</p><p><code>justify-content: flex-end;</code>   设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112215032.png" alt="image-20210306112215032"></p><p> <code>align-items</code> 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112226193.png" alt="image-20210306112226193"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   .container{</span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">border</span>: <span class="number">1px</span> solid blueviolet;</span></span><br><span class="line">     }   </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112238867.png" alt="image-20210306112238867"></p><p><code>flex-wrap</code>  让弹性盒元素在必要的时候拆行</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112251352.png" alt="image-20210306112251352"></p><h3 id="子元素常用属性"><a href="#子元素常用属性" class="headerlink" title="子元素常用属性"></a>子元素常用属性</h3><p>伸缩盒中的每一个元素称为一个项目。<br><code>flex-grow: number;</code>   一个数字，规定项目将相对于其他灵活的项目进行扩展的量。默认值是 0。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}                </span><br><span class="line"><span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:orange}             </span><br><span class="line"><span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:red}    </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/beach-1236581_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;伸缩盒模型flexb</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>display属性和盒子模型</title>
    <link href="http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-09-02T06:53:47.000Z</published>
    <updated>2021-03-05T13:31:35.813Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/mountains-190055_1280.jpg"></p><hr><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>​    根据CSS规范的规定，每一个网页元素都有一个display属性，用于确定该元素的类型，每一个元素都有默认的display属性值，比如div元素，它的默认display属性值为“block”，称为块元素，而span元素的默认display属性值为“inline”，称为“行内”元素。</p><p>​       块元素与行元素是可以转换的，也就是说display的属性值可以由我们来改变 。</p><h3 id="display常见属性值"><a href="#display常见属性值" class="headerlink" title="display常见属性值"></a>display常见属性值</h3><ol><li>none：隐藏对象</li><li>inline：指定对象为内联元素</li><li>block：指定对象为块元素</li><li>inline-block：指定对象为内联块元素</li><li>table-cell：指定对象作为表格单元格</li><li>flex：弹性盒</li></ol><h3 id="visibility-hidden和display-none和opacity-0的区别："><a href="#visibility-hidden和display-none和opacity-0的区别：" class="headerlink" title="visibility:hidden和display:none和opacity:0的区别："></a>visibility:hidden和display:none和opacity:0的区别：</h3><ol><li><p><code>visibility:hidden</code>和<code>opacity:0</code>会将元素隐藏，但是物理位置实际存在。</p></li><li><p><code>display:none</code> 隐藏元素，不保留物理位置。</p></li></ol><p>​    网页中大部分对象<code>默认是占用文档流</code>，也有一些对象是不占文档流的，比如表单中隐藏域。当然我们也可以让占用文档流的元素转换成不占文档流，这就要用到CSS中属性position、float、display来控制。默认情况下，所有元素都处在文档流中。</p><p>四种情况将<code>使得元素离开文档流：浮动float、绝对定位absolute、固定定位fixed、元素不显示display:none</code>，这种情况不占文档流的空间，而普通元素的位置基于文档流。</p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="W3C盒模型"><a href="#W3C盒模型" class="headerlink" title="W3C盒模型"></a>W3C盒模型</h3><p>盒模型由内容(content)、填充(padding)、边框(border)、边界(margin)组成</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211024837.png" alt="image-20210305211024837"></p><h3 id="margin（外边距）"><a href="#margin（外边距）" class="headerlink" title="margin（外边距）"></a>margin（外边距）</h3><p>围绕在元素边框周围的空白区域，会在元素外创建额外的空白区域，外边距是透明的。<br>语法：<code>margin:value;</code><br><code>margin-top/right/bottom/left: value;</code><br>value可取值为<code>像素，%，auto，负值</code></p><p>外边距简写</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211118212.png" alt="image-20210305211118212" style="zoom:80%;"><p>margin设置元素外边距的宽度，它有这么几个特点：</p><ol><li>块级元素的垂直相邻外边距会合并</li><li>行内元素实际上不占上下外边距。行内元素的的左右外边距不合并</li><li>浮动元素的外边距也不会合并</li><li>允许指定负的外边距值，不过使用时要小心</li></ol><h3 id="border（边框）"><a href="#border（边框）" class="headerlink" title="border（边框）"></a>border（边框）</h3><p>border属性设置一个元素的边框，它有三个要素：<code>宽、样式、颜色</code>，统称“边框三要素”。三要素书写的时候一般如下顺序：</p><p>​    <code>border：宽度 样式 颜色        border: 1px solid red;</code></p><p>​    不过不按此顺序来写依然能正常显示。<code>div{ border: red solid 2px; }</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211414164.png" alt="image-20210305211414164"></p><p><code>border-style</code>设置边框的样式，有五种常用样式可选：</p><ul><li>点状dotted</li><li>实线solid</li><li>双线double   （ 需要最起码设置为3像素，不然显示不下）</li><li>虚线dashed</li><li>无边框none</li></ul><p>border的三要素可以统一写在”border”属性中，也可以单独设置。</p><p>​    统一的写法：<code>border: 1px solid  red;</code><br>​    单独设置的写法：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-width</span>: ; </span><br><span class="line"><span class="attribute">border-style</span>: ;</span><br><span class="line"><span class="attribute">border-color</span>: ;</span><br></pre></td></tr></tbody></table></figure><h3 id="padding（内边距）"><a href="#padding（内边距）" class="headerlink" title="padding（内边距）"></a>padding（内边距）</h3><p>内容区域和边框之间的空间。会扩大元素边框所占用的区域<br>语法：<code>padding:value;</code><br>单边设置<br><code>padding-top/right/bottom/left:value;</code>value可取值为像素，百分比，但不能为负数</p><p> 内边距的简写</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><h3 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h3><p>​    盒子模型分两种，一种是符合W3C规范的标准例子模型，另一种是IE的盒子模型，IE的盒子模型也被叫怪异盒子。<br>​    可以看到 IE 盒子模型也包括 margin、border、padding、content，不过，和标准 盒子模型不同的是：IE 盒子模型的宽，包含了 border 和 pading。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211844651.png" alt="image-20210305211844651"></p><h3 id="Box-sizing"><a href="#Box-sizing" class="headerlink" title="Box-sizing"></a>Box-sizing</h3><p>​    <code>box-sizing</code> 属性允许你以“W3C的盒模型”或“IE盒模型”来定义元素，以适应区域。换句话说，当前元素使用哪种盒模型，<code>可以由box-sizing属性来指定</code><br>​    它有两个值<br>​    <code>content-box（标准）</code><br>​    padding和border不被包含在width和height内，<code>元素的实际大小为宽高+border+padding</code>，此为标准模式下的盒模型。</p><p>​    <code>border-box（怪异）</code><br>​    padding和border被包含在定义的width和height中，<code>元素实际的大小为你定义了多宽就是多宽</code>。此属性为怪异模式下的盒模型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/mountains-190055_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;display</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Position定位和z-index</title>
    <link href="http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/"/>
    <id>http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/</id>
    <published>2020-09-01T06:53:47.000Z</published>
    <updated>2021-03-05T13:23:58.375Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/lake-1581879_1280.jpg"></p><hr><h2 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h2><p>position属性指定一个元素（静态的，相对的，绝对或固定）的定位方法的类型。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305201823730.png" alt="image-20210305201823730"></p><h3 id="realtive"><a href="#realtive" class="headerlink" title="realtive"></a>realtive</h3><p>以<code>自身为参照物</code>移动到指定的位置，并且<code>被定位的元素会占据原有的位置</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203011083.png" alt="image-20210305203011083" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203041348.png" alt="image-20210305203041348" style="zoom:50%;"><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p>以其他元素作为参照物，移动指定距离，且不会占据原有的位置，关于 <code>absolute</code> 定位参考点的选择：</p><ol><li>如果元素的外层元素是非 <code>static</code> 定位（有除默认属性之外的定位属性），那么外层元素就成为了该元素的定位参考点。</li><li>如果元素的外层元素没有设置任何 <code>position</code> 的值，那么该元素将寻找离自己最近的设定过非默认 <code>position</code> 属性的外层元素作为参照物。</li><li>如果元素的外层元素没有找到设定为非默认 <code>positon</code> 属性的外层元素，那么此时定位参考元素变为 <code>body</code> ，或者说页面</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203556950.png" alt="image-20210305203556950" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203705689.png" alt="image-20210305203705689" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d22{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d22"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305204434371.png" alt="image-20210305204434371" style="zoom:50%;"><h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;2</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205431227.png" alt="image-20210305205431227"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205442554.png" alt="image-20210305205442554"></p><h2 id="z-index堆叠顺序"><a href="#z-index堆叠顺序" class="headerlink" title="z-index堆叠顺序"></a>z-index堆叠顺序</h2><p>一旦修改了元素的定位方式，则元素可能会发生堆叠。可以<code>使用z-index属性来控制定位元素的出现顺序</code>。z-index仅能在定位的元素（使用了 <code>position</code> 非默认属性的元素）上生效<br>z-index属性：<br>值为数值，数值越大表示堆叠顺序越高，即离用户越近，可以设置为负值，表示离用户更远 ，一般不设置负值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210239608.png" alt="image-20210305210239608" style="zoom:50%;"><p>可以发现后面的<code>div</code>会覆盖前面的，如果想让前面的覆盖后面的，可以设置 <code>z-index</code>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210411571.png" alt="image-20210305210411571" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/lake-1581879_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;position定位&quot;</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css3动画常用属性和阴影圆角</title>
    <link href="http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/</id>
    <published>2020-08-30T06:53:47.000Z</published>
    <updated>2021-03-06T03:16:19.175Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/bled-1899264_1280.jpg"></p><hr><h2 id="CSS3的含义"><a href="#CSS3的含义" class="headerlink" title="CSS3的含义"></a>CSS3的含义</h2><p>​    <code>CSS3</code>是<code>CSS</code>（层叠样式表）技术的升级版本。<code>CSS3</code>完全向后兼容，不必改变现有的设计，浏览器将永远支持<code>CSS2</code>。<code>W3C</code>的<code>CSS3</code>规范仍在开发。但是，许多新的<code>CSS3</code>属性已在现代浏览器使用。</p><h2 id="浏览器内核以及其前缀"><a href="#浏览器内核以及其前缀" class="headerlink" title="浏览器内核以及其前缀"></a>浏览器内核以及其前缀</h2><p>​    <code>CSS</code>标准中各个属性都要经历从草案到推荐的过程，<code>css3</code>中的属性进展都不一样，浏览器厂商在标准尚未明确情况下提前支持会有风险，浏览器厂商对新属性的支持情况也不同，所以会加厂商前缀加以区分。如果某个属性已经从草案变为了或接近推荐方案，并且厂商已经完全实现了推荐属性，那就不用加厂商前缀。如<code>border-radius</code>已经很成熟，不用加前缀。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103253008.png" alt="image-20210306103253008"></p><p>​    <code>根据不同的浏览器内核，css前缀会有不同</code>。最基本的浏览器内核有如下四种，其它的内核都是基于此四种进行再研发的。</p><ol><li><p><code>Gecko内核</code>      前缀为<code>-moz-</code>   火狐浏览器</p></li><li><p><code>Webkit内核</code>    前缀为<code>-webkit-</code>   也叫谷歌内核，chrome浏览器最先开发使用，safari浏览器也使用 该内核。国内很多浏览器也使用了<code>webkit内核</code>，如360极速、世界之窗、猎豹等。</p></li><li><p><code>Trident内核</code>    前缀为<code>-ms-</code>  也称IE内核</p></li><li><p><code>Presto内核</code>      前缀<code>-o-</code>   目前只有opera采用</p></li></ol><h3 id="圆角border-radius"><a href="#圆角border-radius" class="headerlink" title="圆角border-radius"></a>圆角border-radius</h3><p>语法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>：value；四个角</span><br><span class="line"><span class="attribute">border-radius</span>：value value；左上右下、右上左下</span><br><span class="line"><span class="attribute">border-radius</span>：value value value value；</span><br><span class="line">代表设置对象左上角、右上角、右下角、左下角</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103337192.png" alt="image-20210306103337192" style="zoom:50%;"><h3 id="盒阴影box-shadow"><a href="#盒阴影box-shadow" class="headerlink" title="盒阴影box-shadow"></a>盒阴影box-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103327261.png" alt="image-20210306103327261"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .shadow{</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">3px</span> darkred;</span></span><br><span class="line">        }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103724901.png" alt="image-20210306103724901"></p><h3 id="文字阴影text-shadow"><a href="#文字阴影text-shadow" class="headerlink" title="文字阴影text-shadow"></a>文字阴影text-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103735569.png" alt="image-20210306103735569"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .text1{</span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: palegreen;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-shadow</span>: <span class="number">10px</span> -<span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span> ;</span></span><br><span class="line">       }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text1"</span>&gt;</span>学习猿地<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103747132.png" alt="image-20210306103747132"></p><h2 id="CSS3-渐变"><a href="#CSS3-渐变" class="headerlink" title="CSS3 渐变"></a>CSS3 渐变</h2><p><a class="link" href="https://www.runoob.com/css3/css3-gradients.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>​    <code>CSS3 渐变（gradients）</code>可以让你在两个或多个指定的颜色之间显示平稳的过渡。以前，你必须使用图像来实现这些效果。现在，使用 <code>CSS3 渐变（gradients）</code>，通过代码来实现渐变可以减少请求和节约带宽。</p><p><code>CSS3</code> 定义了两种类型的渐变（gradients）:</p><ul><li>线性渐变（Linear Gradients）: 向下/向上/向左/向右/对角方向<br><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code></li><li>径向渐变（Radial Gradients）: 由它们的中心定义<br><code>background: radial-gradient(center, shape， size, start-color, ..., last-color);</code><br>默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），它可以是值 <code>circle</code> 或 <code>ellipse</code>。其中，circle 表示圆形，ellipse 表示椭圆形</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103803293.png" alt="image-20210306103803293"></p><h2 id="CSS3-转换Transform（2D转换）"><a href="#CSS3-转换Transform（2D转换）" class="headerlink" title="CSS3 转换Transform（2D转换）"></a>CSS3 转换Transform（2D转换）</h2><p><a class="link" href="https://www.cnblogs.com/aspnetjia/p/5139020.html">transform详解<i class="fas fa-external-link-alt"></i></a></p><p>​    <code>CSS3</code>中的转换允许我们对元素进行旋转、缩放、移动或倾斜。它为分<code>2D转换 或 3D 转换。</code>在css2时代，如果要做一些图片转换角度，都依赖于<code>图片、Flash或JavaScript才能完成</code>。但是现在借助<code>CSS3</code>就可以轻松倾斜、缩放、移动以及翻转元素。通过<code>CSS</code>变形，可以让元素生成静态视觉效果，但也可以很容易结合<code>CSS3的transition和动画的keyframe</code>产生一些动画效果。</p><h3 id="转换Transform-2D的属性"><a href="#转换Transform-2D的属性" class="headerlink" title="转换Transform 2D的属性"></a>转换Transform 2D的属性</h3><p>​    通常的属性包含了属性名和属性值，而CSS3的transform属性是用函数来定义的。Transform 2D函数包括了<code>translate()、scale()、rotate()和skew()。</code></p><p>书写格式:<br>    <code>transform:函数名(x轴值，y轴值);</code></p><p>转换的效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104641628.png" alt="image-20210306104641628"></p><ol><li><p><code>translate()</code></p><pre><code>translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。接受CSS的标准度量单位（px），translate(x,y)：转换，沿着X和Y轴移动元素。</code></pre></li><li><p><code>rotate()</code></p><pre><code>通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。它以deg为单位，代表了旋转的角度。</code></pre></li><li><p><code>scale()</code></p><pre><code>通过值把宽和高转换为原始尺寸的n倍，接受两个参数，前面的为宽，后面的为高。可取值：默认值为1，缩小：0-1 之间的数，放大：大于1的数</code></pre></li><li><p><code>skew()</code></p><pre><code>根据水平轴和垂直轴翻转，接受两个或一个值，两个值时前面为水平，后面为垂直的角度 ，一个值只是水平轴的角度。此函数是指元素的倾斜角度。</code></pre></li></ol><h3 id="转换Transform-3D的属性"><a href="#转换Transform-3D的属性" class="headerlink" title="转换Transform 3D的属性"></a>转换Transform 3D的属性</h3><p>Transform 3D常用函数有：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104709948.png" alt="image-20210306104709948"></p><h2 id="CSS3-过渡Transition"><a href="#CSS3-过渡Transition" class="headerlink" title="CSS3 过渡Transition"></a>CSS3 过渡Transition</h2><p><a class="link" href="https://www.cnblogs.com/afighter/p/5731293.html">transition演示<i class="fas fa-external-link-alt"></i></a></p><h3 id="什么是过渡"><a href="#什么是过渡" class="headerlink" title="什么是过渡"></a>什么是过渡</h3><p>使用<code>css</code>的属性值在一段时间内平滑的过渡，比如，鼠标悬停后，背景色在<code>1s</code>内，由白色平滑的过渡到红色<br>指定四个要素：</p><ul><li><p>过渡属性，如background、color等</p></li><li><p>过渡所需时间</p></li><li><p>过渡函数，即过渡的速度、方式等</p></li><li><p>过渡延迟时间，表示开始执行的时间</p></li></ul><p>触发过渡：通过用户的行为触发，如点击、悬浮等</p><h3 id="过渡属性"><a href="#过渡属性" class="headerlink" title="过渡属性"></a>过渡属性</h3><p><code>transition-property: none|all|property;</code><br>多个属性用逗号隔开，可设置过渡的属性，颜色属性。取值为数值的属性：转换属性，渐变属性，阴影属性</p><h3 id="过渡时间"><a href="#过渡时间" class="headerlink" title="过渡时间"></a>过渡时间</h3><p><code>transition-duration: s|ms;</code><br>默认值为0，意味着不会有效果，所以必须设置transition-duration属性</p><h3 id="过渡函数"><a href="#过渡函数" class="headerlink" title="过渡函数"></a>过渡函数</h3><p><code>transition-timing-function: ;</code><br>取值：<br>ease：默认值，规定慢速开始，然后变快，然后慢速结束的过渡效果<br>linear：匀速<br>ease-in：规定以慢速开始，加速效果<br>ease-out：规定以慢速结束，减速效果<br>ease-in-out：规定以慢速开始和结束，先加速后减速效果</p><h3 id="过渡延迟"><a href="#过渡延迟" class="headerlink" title="过渡延迟"></a>过渡延迟</h3><p><code>transition-delay: s|ms;</code><br>改变元素属性值后多长时间开始执行过渡效果</p><h3 id="简写属性transition"><a href="#简写属性transition" class="headerlink" title="简写属性transition"></a>简写属性transition</h3><p>transition属性是一个简写属性，用于设置四个过渡属性<br><code>语法：transition:property duration timing-function delay;</code></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>{</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#1fb57b</span>;</span><br><span class="line">     <span class="attribute">transition</span>: background <span class="number">4s</span> linear <span class="number">1s</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="selector-id">#box</span><span class="selector-pseudo">:hover</span>{</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="CSS3-animation动画"><a href="#CSS3-animation动画" class="headerlink" title="CSS3 animation动画"></a>CSS3 animation动画</h2><p><a class="link" href="https://www.runoob.com/css3/css3-animations.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>过渡属性只能模拟动画效果，animation属性可以制作类似Flash动画，通过关键帧控制动画的每一步，使元素从一种样式逐渐变化为另一种样式，实现复杂的动画效果。</p><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><p>作用：用于声明动画，指定关键帧<br>帧：用于分解动画动作，每个帧代表某个时间点。定义每个帧上的动作</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306105920430.png" alt="image-20210306105920430"></p><h3 id="keyframes的语法"><a href="#keyframes的语法" class="headerlink" title="@keyframes的语法"></a>@keyframes的语法</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name  {</span><br><span class="line">    from|0%{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line">    percent{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line">    to|100%{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h3><p><code>animation</code>属性用于控制动画，调用由<code>@keyframes</code>定义的动画，设置动画属性，如时间、次数等。animation属性是一个简写属性。<br>语法为：<code>animation:name  duration timing-function delay iteration-count direction;</code></p><h3 id="动画子属性"><a href="#动画子属性" class="headerlink" title="动画子属性"></a>动画子属性</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-name</span>: ;调用动画，规定需要和keyframes的名字一致</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-duration</span>: s|ms;动画完成一个周期所需要的时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-timing-function</span>: ;规定动画的速度变化类型</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-delay</span>:s|ms ;播放之前的延迟时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-iteration-count</span>: 数值|infinite;播放次数 infinite表示无限次播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-direction</span>: normal|alternate;动画播放方向,<span class="attribute">normal</span>为默认值，表示正常播放,alternate表示轮流播放，即动画会在奇数次正常播放，而在偶数次向后播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-fill-mode</span>: forwards;动画停在最后一帧，默认值为<span class="attribute">none</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-play-state</span>:paused|running; 属性规定动画正在运行还是暂停，默认值为running</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/bled-1899264_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3的含义&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Swagger入门</title>
    <link href="http://blog.sky123.top/2020/08/08/springboot/Swagger/"/>
    <id>http://blog.sky123.top/2020/08/08/springboot/Swagger/</id>
    <published>2020-08-08T02:01:25.000Z</published>
    <updated>2021-03-01T11:36:11.867Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/tree-838667_1280.jpg"></p><hr><h1 id="Swagger入门"><a href="#Swagger入门" class="headerlink" title="Swagger入门"></a>Swagger入门</h1><p>学习目标：</p><ul><li>了解Swagger的作用和概念</li><li>了解前后端分离的概念</li><li>在Springboot中集成Swagger</li></ul><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><p>前后端分离：vue+springboot</p><ul><li>后端：控制层+服务层+数据访问层</li><li>前端：前端控制层+视图层</li></ul><p>前后端的好处：相对独立，松耦合，可以部署在不同的服务器。之间通过API接口通信</p><p>问题：</p><ul><li>前后端在集成协调的时候，无法做到”及时沟通，尽早解决”（由于两端都是独立开发），最终会导致问题集中爆发。</li></ul><p>解决方案：</p><ul><li>指定计划的提纲（schema），实时更新最新的API，降低集成的风险</li><li>早些年：使用word文档，不是很方便，对文档编写有一定的要求</li><li>前后端分离：<ul><li>测试接口工具：postman（不推荐再使用了）</li><li>后端提供接口，需要实时更新最新的改动</li></ul></li></ul><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>号称世界上最流行的 API框架，可以实现 API 与 API文档实时更新，支持多种语言（java，php……），直接运行可以在线测试接口。</p><p><a class="link" href="https://swagger.io/">swagger官网<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228101919079.png" alt="image-20210228101919079"></p><h3 id="SpringFox-3-0-0-发布"><a href="#SpringFox-3-0-0-发布" class="headerlink" title="SpringFox 3.0.0 发布"></a>SpringFox 3.0.0 发布</h3><p>此版本的亮点：</p><blockquote><p>Spring5，Webflux支持（仅支持请求映射，尚不支持功能端点）。<br>Spring Integration支持。<br>SpringBoot支持springfox Boot starter依赖性（零配置、自动配置支持）。<br>支持OpenApi 3.0.3。<br>零依赖。几乎只需要spring-plugin，swagger-core ，现有的swagger2注释将继续工作并丰富openapi3.0规范。</p></blockquote><p>兼容性说明：</p><blockquote><p>需要Java 8<br>需要Spring5.x（未在早期版本中测试）<br>需要SpringBoot 2.2+（未在早期版本中测试）</p></blockquote><h3 id="swagger3-0-与2-xx配置差异"><a href="#swagger3-0-与2-xx配置差异" class="headerlink" title="swagger3.0 与2.xx配置差异"></a>swagger3.0 与2.xx配置差异</h3><ol><li>应用主类（即Controller层）添加注解<code>@EnableOpenApi (swagger2是@EnableSwagger2)</code>。swagger配置类<code>SwaggerProperties.class</code>，与swagger2.xx 版本有差异。自定义一个配置类 <code>SwaggerConfiguration.class</code></li><li>访问地址：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a> (swagger2.xx版本访问的地址为<a class="link" href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html<i class="fas fa-external-link-alt"></i></a>)</li></ol><h2 id="Springboot集成Swagger"><a href="#Springboot集成Swagger" class="headerlink" title="Springboot集成Swagger"></a>Springboot集成Swagger</h2><p>新建springboot   web 项目</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102748582.png" alt="image-20210228102748582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102207420.png" alt="image-20210228102207420"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102317842.png" alt="image-20210228102317842"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228103855243.png" alt="image-20210228103855243"></p><p>导入相关依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Swagger</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228104926484.png" alt="image-20210228104926484"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试访问：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a> </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228110125566.png" alt="image-20210228110125566"></p><h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><h3 id="修改Swagger信息"><a href="#修改Swagger信息" class="headerlink" title="修改Swagger信息"></a>修改Swagger信息</h3><p>配置的关键是配置一个关键类 <code>Docket</code></p><p>点击 <code>ctrl</code> 进入查看 <code>Docket</code>，在点击进入 <code>ApiInfo.</code> 可以看到默认的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172604042.png" alt="image-20210301172604042"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172619931.png" alt="image-20210301172619931"></p><p>因此配置代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从配置文件中注入值</span></span><br><span class="line">    <span class="meta">@Value("${swagger.application-name}")</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Value("${swagger.enable}")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean swaggerEnabled;</span><br><span class="line">    <span class="meta">@Value("${swagger.application-description}")</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@Value("${swagger.name}")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value("${swagger.url}")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value("${swagger.email}")</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Value("${swagger.version}")</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="meta">@Value("${swagger.try-host}")</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">         * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(title)</span><br><span class="line">                .description(description)</span><br><span class="line">                <span class="comment">// 作者信息</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(name, url, email))</span><br><span class="line">                .version(version)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里是从 <code>application.yml</code> 配置文件中读取事先定义的值：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: 这是Swagger应用的名字</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"># ===== 自定义swagger配置 ===== #</span><br><span class="line">swagger:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  application-name: ${spring.application.name}</span><br><span class="line">  application-version: <span class="number">1.0</span></span><br><span class="line">  application-description: springfox swagger <span class="number">3.0</span>整合Demo（这里配置项目的描述）</span><br><span class="line">  <span class="keyword">try</span>-host: http:<span class="comment">//localhost:${server.port}</span></span><br><span class="line">  name: 项目负责人</span><br><span class="line">  email: <span class="number">142342423</span><span class="meta">@qq</span>.com</span><br><span class="line">  url: http:<span class="comment">//www.baidu.com</span></span><br><span class="line">  version: <span class="number">2.3</span><span class="number">.4</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>查看  <code>ApiInfoBuilder</code> 可以查看更多的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301180154288.png" alt="image-20210301180154288"></p><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172838848.png" alt="image-20210301172838848"></p><h3 id="配置扫描路径"><a href="#配置扫描路径" class="headerlink" title="配置扫描路径"></a>配置扫描路径</h3><p><code>any()：</code>扫描全部</p><p><code>none()：</code>都不扫描</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181141539.png" alt="image-20210301181141539"></p><h4 id="包扫描"><a href="#包扫描" class="headerlink" title="包扫描"></a>包扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.swaggerdemo.controller"</span>))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="类注解扫描"><a href="#类注解扫描" class="headerlink" title="类注解扫描"></a>类注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="方法注解扫描"><a href="#方法注解扫描" class="headerlink" title="方法注解扫描"></a>方法注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>没有了 <code>error</code>  的默认接口，只显示自己写的接口：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181946804.png" alt="image-20210301181946804"></p><h3 id="配置过滤路径"><a href="#配置过滤路径" class="headerlink" title="配置过滤路径"></a>配置过滤路径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">               .host(host)</span><br><span class="line">               <span class="comment">// 是否开启</span></span><br><span class="line">               .enable(swaggerEnabled).select()</span><br><span class="line">               .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">               .build();</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301182510169.png" alt="image-20210301182510169"></p><h3 id="配置Swagger的API分组"><a href="#配置Swagger的API分组" class="headerlink" title="配置Swagger的API分组"></a>配置Swagger的API分组</h3><p>关键：Docket有个分组方法，但是只能配置一个分组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.groupName(<span class="string">"A"</span>)</span><br></pre></td></tr></tbody></table></figure><p>因此要配置多个分组，只需要注入多个 Docket 实例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"B"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"C"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">     * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">            .host(host)</span><br><span class="line">            .groupName(<span class="string">"A"</span>)</span><br><span class="line">            <span class="comment">// 是否开启</span></span><br><span class="line">            .enable(swaggerEnabled).select()</span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">            .build();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301190020294.png" alt="image-20210301190020294"></p><h3 id="配置接口注释"><a href="#配置接口注释" class="headerlink" title="配置接口注释"></a>配置接口注释</h3><p><code>@Api：</code>用在controller类，描述API接口<br><code>@ApiOperation：</code>描述接口方法<br><code>@ApiModel：</code>描述对象<br><code>@ApiModelProperty：</code>描述对象属性<br><code>@ApiImplicitParams：</code>描述接口参数<br><code>@ApiResponses：</code>描述接口响应</p><p>新建实体类 <code>User</code> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel("关于实体类的描述")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@ApiModelProperty("关于实体类属性的描述")</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty("关于实体类属性的描述")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">//    public User(String username,String password){</span></span><br><span class="line"><span class="comment">//        this.username = username;</span></span><br><span class="line"><span class="comment">//        this.password = password;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    public User(){</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建接口 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="meta">@ApiOperation("描述接口方法")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name="name",value="姓名",dataTypeClass = String.class,required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@ApiResponses({</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 200, message = "请求成功"),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 400, message = "请求参数没填好"),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193506582.png" alt="image-20210301193506582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193519108.png" alt="image-20210301193519108"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193532477.png" alt="image-20210301193532477"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/tree-838667_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Swagger入门&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="Swagger" scheme="http://blog.sky123.top/tags/Swagger/"/>
    
    <category term="Java" scheme="http://blog.sky123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot多环境切换</title>
    <link href="http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/"/>
    <id>http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2021-03-01T11:36:36.476Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/dunes-5568253_1280.jpg"></p><hr><h1 id="SpringBoot多环境切换"><a href="#SpringBoot多环境切换" class="headerlink" title="SpringBoot多环境切换"></a>SpringBoot多环境切换</h1><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li><p>不同环境配置可以配置不同的参数,不用来回改参数</p></li><li><p>便于部署，提高效率，减少出错</p></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在默认文件中 <code>application.yml</code>  中 配置切换属性：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure><p>新建 <code>application-dev.yml</code> 文件：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">这是开发环境</span></span><br></pre></td></tr></tbody></table></figure><p>启动后看到：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301185125610.png" alt="image-20210301185125610"></p><p>说明环境切换成功。</p><p>同理可以新建多个配置文件，<code>yml 配置方式</code>会自动识别。只需在默认的 <code>application.yml</code> 切换即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/dunes-5568253_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;SpringBoot</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="SpringBoot" scheme="http://blog.sky123.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Javascript常用字符串功能方法</title>
    <link href="http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-02T06:04:46.000Z</published>
    <updated>2021-02-27T06:14:16.496Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sunrise-5863751_1280.png"></p><hr><h2 id="Javascript常用字符串功能方法"><a href="#Javascript常用字符串功能方法" class="headerlink" title="Javascript常用字符串功能方法"></a>Javascript常用字符串功能方法</h2><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><p>字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=num.toString();    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>你同样可以这么做：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="built_in">String</span>(num);    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>或者，在简单点儿：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="string">""</span> + num;    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>将字符串进行拆分返回一个新的数组，JavaScript就给我们提供了一个非常方便的函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>);    <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo","woaiziji"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>);        <span class="comment">//["q","i","n","g","c","h","e","n","g","h","u","w","o","g","u","o","x","i","a","n","s","h","e","n","g",",","w","o","a","i","s","h","e","n","g","h","u","o",",","w","o","a","i","z","i","j","i"];</span></span><br></pre></td></tr></tbody></table></figure><p><code>split()</code>的第二个参数，表示返回的字符串数组的最大长度</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>,<span class="number">2</span>); <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>,<span class="number">8</span>); <span class="comment">//["q","i","n","g","c","h","e","n"];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>仅仅查找到字符串并不会是题目的停止，一般题目还经常会要求你去进行替换操作，那就继续看以下代码:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"wozaijinxingzifuchuantihuancaozuo,zifuchuantihuano"</span>;</span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="string">"zifuchuan"</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/g</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo, tihuano</span></span><br></pre></td></tr></tbody></table></figure><p>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识g</p><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><p>获取字符串的长度经常会用到，方法很简单：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arrLength=mystr.length;    <span class="comment">//47</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查询子字符串"><a href="#查询子字符串" class="headerlink" title="查询子字符串"></a>查询子字符串</h3><p>判断字符串内是否包含子串，不少开发者会使用for循环来判断，而忘记了JavaScript提供子串函数：</p><ul><li><code>indexOf()</code>，该Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.indexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.indexOf(<span class="string">"l"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.indexOf(<span class="string">"l"</span>,<span class="number">3</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>lastIndexOf()</code>，该方法对大小写敏感。返回字符串中一个子串最后一处出现的索引（从右到左搜索），如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.lastIndexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.lastIndexOf(<span class="string">"l"</span>);    <span class="comment">//9</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.lastIndexOf(<span class="string">"l"</span>,<span class="number">4</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="返回指定位置的字符或其字符编码值"><a href="#返回指定位置的字符或其字符编码值" class="headerlink" title="返回指定位置的字符或其字符编码值"></a>返回指定位置的字符或其字符编码值</h3><p>查找给定位置的字符，可以使用如下函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.charAt(<span class="number">7</span>);    <span class="comment">//o</span></span><br></pre></td></tr></tbody></table></figure><p>同样，它的一个兄弟函数就是查找对应位置的字符编码值，如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> charCode=mystr. charCodeAt(<span class="number">7</span>);    <span class="comment">//111</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h3><p>可以直接通过字符串进行匹配，也可以通过正则进行匹配，可能需要你对正则表达式有一定的了解，先来看看match()函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=mystr.match(<span class="string">"guo"</span>);    <span class="comment">//guo</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=mystr.match(<span class="string">"Guo"</span>);    <span class="comment">//nullvar regexp1=/\d+/g;</span></span><br><span class="line"><span class="keyword">var</span> regexp2=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> regexp3=<span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr2=mystr.match(regexp1);    <span class="comment">//["6","33"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp2);    <span class="comment">//["guo"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp3);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr3.index    <span class="comment">//11</span></span><br><span class="line">matchStr3.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>注意：1.此处使用字符串直接进行匹配，被匹配的字符串内包含要匹配的字符串时，返回所要匹配的字符串。</p><p>　　　2.如果使用正则匹配字符串时，如果正则表达式没有 g (全局标识)标志，返回与正则匹配相同的结果。而且返回的数组拥有一个额外的  input 属性，该属性包含原始字符串。另外，还拥有一个 <code>index</code> 属性，该属性表示匹配结果在被字符串中的索引（以0开始）。如果正则表达式包含 g 标志，则该方法返回匹配字符串的数组。</p><p>再来看看使用<code>exec()</code>函数： </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=regexp1.exec(mystr);  <span class="comment">//["guo"]var regexp2=/guo/;</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=regexp2.exec(mystr);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr1.index    <span class="comment">//11</span></span><br><span class="line">matchStr1.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>简单吧，仅仅是把正则和字符串换了个位置，即<code>exec()</code>函数是在正则上调用，传递字符串的参数。对于上面两个方法，匹配的结果都是返回第一个匹配成功的字符串，如果匹配失败则返回<code>null</code>。</p><p>再来看一个类似的函数<code>search()</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr = <span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1 = <span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr = mystr.search(regexp1);    <span class="comment">//11</span></span><br></pre></td></tr></tbody></table></figure><p>进行正则匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1</p><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>可以将两个或多个字符串进行加法操作，同时可以使用<code>JavaScript</code>提供的<code>concat函数</code>：</p><p>先看加法操作进行字符串连接：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">"world!"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1+<span class="string">" "</span>+mystr2;    <span class="comment">//Hello world!</span></span><br></pre></td></tr></tbody></table></figure><p>是不是很简单呀，那继续看看<code>concat函数</code>吧：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">" world,"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr3=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr4=<span class="string">"guoxiansheng"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1.concat(mystr2+mystr3+<span class="string">" "</span>+mystr4);    <span class="comment">//Hello world,Hello guoxiansheng</span></span><br></pre></td></tr></tbody></table></figure><p><code>concat()函数</code>可以有多个参数，传递多个字符串，拼接多个字符串。</p><h3 id="字符串切割和提取"><a href="#字符串切割和提取" class="headerlink" title="字符串切割和提取"></a>字符串切割和提取</h3><p>有三种可以从字符串中抽取和切割的方法：</p><p>第一种，<code>slice()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.slice(-<span class="number">3</span>);    <span class="comment">//ld!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.slice(-<span class="number">3</span>,-<span class="number">1</span>);    <span class="comment">//ld</span></span><br><span class="line"><span class="keyword">var</span> sliceStr3=mystr.slice(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr4=mystr.slice(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第二种：<code>substring()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substring(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substring(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第三种：<code>substr()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substr(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substr(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo wo</span></span><br></pre></td></tr></tbody></table></figure><p>注：1.<code>slice()</code> 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。<br>　　2.<code>substring()</code>只能非负整数，截取起始结束位置同slice()函数一致。</p><p>　　3.<code>substr()</code>与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。</p><p>以上三种函数未填第二参数时，自动截取起始位置到字符串末尾。</p><h3 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> lowCaseStr=mystr.toLowerCase();    <span class="comment">//hello world!</span></span><br><span class="line"><span class="keyword">var</span> upCaseStr=mystr. toUpperCase();    <span class="comment">//HELLO WORLD!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去空格"><a href="#字符串去空格" class="headerlink" title="字符串去空格"></a>字符串去空格</h3><p><code>trim方法</code>用来删除字符串前后的空格 </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"     hello world      "</span>;  </span><br><span class="line"><span class="keyword">var</span> trimStr=mystr.trim();    <span class="comment">//hello world</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"aahhgggsssjjj"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepeat</span>(<span class="params">msg</span>)</span>{  </span><br><span class="line">    <span class="keyword">var</span> res=[];  </span><br><span class="line">    <span class="keyword">var</span> arr=msg.split(<span class="string">""</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">        <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">            res.push(arr[i]);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">""</span>);  </span><br><span class="line">}  </span><br><span class="line">removeRepeat(str);    <span class="comment">//ahgsj </span></span><br></pre></td></tr></tbody></table></figure><h3 id="判断字符串中字符出现的次数"><a href="#判断字符串中字符出现的次数" class="headerlink" title="判断字符串中字符出现的次数"></a>判断字符串中字符出现的次数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    1.先实现字符串去重  </span></span><br><span class="line"><span class="comment">    2.然后对去重后的数组用for循环操作，分别与原始数组中各个值进行比较，如果相等则count++,循环结束将count保存在sum数组中，然后将count重置为0  </span></span><br><span class="line"><span class="comment">    3.这样一来去重后的数组中的元素在原数组中出现的次数与sum数组中的元素是一一对应的  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"aacccbbeeeddd"</span>;  </span><br><span class="line"><span class="keyword">var</span> sum=[];  </span><br><span class="line"><span class="keyword">var</span> res=[];  </span><br><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">""</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">    <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">        res.push(arr[i]);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length;j++){  </span><br><span class="line">        <span class="keyword">if</span>(arr[j]==res[i]){  </span><br><span class="line">            count++;  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    sum.push(count);  </span><br><span class="line">    count=<span class="number">0</span>;  </span><br><span class="line">}  </span><br><span class="line"><span class="built_in">console</span>.log(res);    <span class="comment">//["a", "c", "b", "e", "d"]  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">var</span> str=(sum[i]%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">"偶数"</span>:<span class="string">"奇数"</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+sum[i]+<span class="string">"次"</span>);  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+str+<span class="string">"次"</span>);  </span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/sunrise-5863751_1280.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Javascri</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="http://blog.sky123.top/tags/Javascript/"/>
    
    <category term="字符串" scheme="http://blog.sky123.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Javascript常用的21个数组方法</title>
    <link href="http://blog.sky123.top/2020/07/01/javascript/Javascript%E5%B8%B8%E7%94%A8%E7%9A%8421%E4%B8%AA%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/07/01/javascript/Javascript%E5%B8%B8%E7%94%A8%E7%9A%8421%E4%B8%AA%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-01T05:38:27.000Z</published>
    <updated>2021-02-27T06:14:38.965Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/dinosaur-5995333_1280.png"></p><hr><h2 id="Javascript常用的21个数组方法"><a href="#Javascript常用的21个数组方法" class="headerlink" title="Javascript常用的21个数组方法"></a>Javascript常用的21个数组方法</h2><p>这七个数组方法</p><p><code>unshift();      push()；  shift();</code></p><p><code>pop();     sort();    reverse();    splice();</code>使用后数组是会被改变的。</p><table><thead><tr><th align="center">方法名</th><th align="center">对应版本</th><th align="center">功能</th><th align="center">原数组是否改变</th></tr></thead><tbody><tr><td align="center">concat()</td><td align="center">ES5-</td><td align="center">合并数组，并返回合并之后的数据</td><td align="center">n</td></tr><tr><td align="center">join()</td><td align="center">ES5-</td><td align="center">使用分隔符，将数组转为字符串并返回</td><td align="center">n</td></tr><tr><td align="center">pop()</td><td align="center">ES5-</td><td align="center">删除最后一位，并返回删除的数据</td><td align="center">y</td></tr><tr><td align="center">shift()</td><td align="center">ES5-</td><td align="center">删除第一位，并返回删除的数据</td><td align="center">y</td></tr><tr><td align="center">unshift()</td><td align="center">ES5-</td><td align="center">在第一位新增一或多个数据，返回长度</td><td align="center">y</td></tr><tr><td align="center">push()</td><td align="center">ES5-</td><td align="center">在最后一位新增一或多个数据，返回长度</td><td align="center">y</td></tr><tr><td align="center">reverse()</td><td align="center">ES5-</td><td align="center">反转数组，返回结果</td><td align="center">y</td></tr><tr><td align="center">slice()</td><td align="center">ES5-</td><td align="center">截取指定位置的数组，并返回</td><td align="center">n</td></tr><tr><td align="center">sort()</td><td align="center">ES5-</td><td align="center">排序（字符规则），返回结果</td><td align="center">y</td></tr><tr><td align="center">splice()</td><td align="center">ES5-</td><td align="center">删除指定位置，并替换，返回删除的数据</td><td align="center">y</td></tr><tr><td align="center">toString()</td><td align="center">ES5-</td><td align="center">直接转为字符串，并返回</td><td align="center">n</td></tr><tr><td align="center">valueOf()</td><td align="center">ES5-</td><td align="center">返回数组对象的原始值</td><td align="center">n</td></tr><tr><td align="center">indexOf()</td><td align="center">ES5</td><td align="center">查询并返回数据的索引</td><td align="center">n</td></tr><tr><td align="center">lastIndexOf()</td><td align="center">ES5</td><td align="center">反向查询并返回数据的索引</td><td align="center">n</td></tr><tr><td align="center">forEach()</td><td align="center">ES5</td><td align="center">参数为回调函数，会遍历数组所有的项，回调函数接受三个参数，分别为value，index，self；forEach没有返回值</td><td align="center">n</td></tr><tr><td align="center">map()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回数据，组成新数组由map返回</td><td align="center">n</td></tr><tr><td align="center">filter()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回布尔值，为true的数据组成新数组由filter返回</td><td align="center">n</td></tr><tr><td align="center">every()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回布尔值，全部为true，由every返回true</td><td align="center">n</td></tr><tr><td align="center">some()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回布尔值，只要由一个为true，由some返回true</td><td align="center">n</td></tr><tr><td align="center">reduce()</td><td align="center">ES5</td><td align="center">归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduce返回</td><td align="center">n</td></tr><tr><td align="center">reduceRight()</td><td align="center">ES5</td><td align="center">反向归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduceRight返回</td><td align="center">n</td></tr></tbody></table><h3 id="1：concat"><a href="#1：concat" class="headerlink" title="1：concat()"></a>1：concat()</h3><p>功能：合并数组，可以合并一个或多个数组，会返回合并数组之后的数据，不会改变原来的数组；</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];<span class="keyword">var</span> str2 = [<span class="string">"world"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(str2));　　　　　　　　<span class="comment">//[12, 2, "hello", "world"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　<span class="comment">//[12,2,"hello"];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2：join"><a href="#2：join" class="headerlink" title="2：join()"></a>2：join()</h3><p>功能：将数组转为字符串并返回转化的字符串数据，不会改变原来的数组；</p><p>注意：()中用双引号包括自己想用的分隔符，默认为逗号，这里方便观察，我用了-　　　</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="string">"world"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.join(<span class="string">"-"</span>));　　　　　　　　<span class="comment">//12-2-hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　<span class="comment">//[12, 2, "hello"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3：pop"><a href="#3：pop" class="headerlink" title="3：pop()"></a>3：pop()</h3><p>功能：删除数组的最后一位，并且返回删除的数据，会改变原来的数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.pop()　　　　　　　　<span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　<span class="comment">//[12, 2]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4：shift"><a href="#4：shift" class="headerlink" title="4：shift()"></a>4：shift()</h3><p>功能：删除数组的第一位数据，并且返回新数组的长度，会改变原来的数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.shift());　　　　　　<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　<span class="comment">//[2,"hello"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5：unshift"><a href="#5：unshift" class="headerlink" title="5：unshift()"></a>5：unshift()</h3><p>功能：在数组的首位新增一个或多数据，并且返回新数组的长度，会改变原来的数组</p><p>注意：<code>unshift()</code>方法返回的数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据，</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">"test"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.unshift(<span class="string">"你好"</span>));　　　　　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.unshift(<span class="string">"hello"</span>,<span class="string">"world"</span>));　　　　　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//["你好", 12, 2, "hello"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//["hello", "world", 43, 2, "test"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6：push"><a href="#6：push" class="headerlink" title="6：push()"></a>6：push()</h3><p>功能：在数组的最后一位新增一个或多个数据，并且返回新数组的长度，会改变原来的数组</p><p>注意：push()方法返回的是数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">"test"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.push(<span class="string">"你好"</span>));　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.push(<span class="string">"hello"</span>,<span class="string">"world"</span>));　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　<span class="comment">//[12, 2, "hello","你好"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　<span class="comment">//[43, 2, "test","hello", "world"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7：reverse"><a href="#7：reverse" class="headerlink" title="7：reverse()"></a>7：reverse()</h3><p>功能：将数组的数据进行反转，并且返回反转后的数组，会改变原数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.reverse());　　　　　　<span class="comment">//["hello", 2, 12]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　<span class="comment">//["hello", 2, 12]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8：sort"><a href="#8：sort" class="headerlink" title="8：sort()"></a>8：sort()</h3><p>功能：对数组内的数据进行排序(默认为升序)，并且返回排过序的新数组，会改变原来的数组</p><p>注意：</p><ol><li>这里的排序是针对字符的排序，先使用数组的<code>toString()</code>方法转为字符串，再逐位比较，3是大于12的，因为首位3&gt;1，不要与<code>Number型</code>的数据排序混淆</li><li>str2数组中增加了三个字符，可以看到，比较的时候，<code>zoom</code>是最大的，因为首位的英文字母通过ASCII码可以转为相应的数值，再根据数值比较</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="string">"hello"</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.sort());<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.sort());<span class="comment">//[2, 2, 43, 5, 5, 92, "abc", "hello", "zoom"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//[2, 2, 43, 5, 5, 92, "abc", "hello", "zoom"]</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>排序问题</li></ol><p>参数：<code>sort(callback)</code> 如果需要按照数值排序，需要传参。sort(callback)，callback为回调函数，该函数应该具有两个参数，比较这两个参数，然后返回一个用于说明这两个值的相对顺序的数字（a-b）。其返回值如下：</p><ul><li>若 a 小于 b，返回一个小于 0 的值。</li><li>若 a 等于 b，则返回 0。</li><li>若 a 大于 b，则返回一个大于 0 的值。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];     </span><br><span class="line"><span class="built_in">console</span>.log(str3.sort(fn));　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,b</span>)</span>{</span><br><span class="line">　　　　<span class="keyword">return</span> a-b;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="9：slice"><a href="#9：slice" class="headerlink" title="9：slice()"></a>9：slice()</h3><p>功能：截取指定位置的数组，并且返回截取的数组，不会改变原数组</p><p>参数：<code>slice(startIndex, endIndex)</code></p><p>注意：可从已有的数组中返回选定的元素。该方法接收两个参数<code>slice(start,end)</code>，strat为必选，表示从第几位开始；end为可选，表示到第几位结束(不包含end位)，省略表示到最后一位；start和end都可以为负数，负数时表示从最后一位开始算起，如-1表示最后一位。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"T1"</span>,<span class="string">"J1"</span>,<span class="string">"L1"</span>,<span class="string">"L2"</span>,<span class="string">"M1"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>));        <span class="comment">//["J1","L1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>));          <span class="comment">//["J1","L1","L2","M1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">4</span>,-<span class="number">1</span>));      <span class="comment">//["J1","L1","L2"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">2</span>));         <span class="comment">//["Lily","M1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,-<span class="number">2</span>));       <span class="comment">//["J1","L1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);                   <span class="comment">//["T1","J1","L1","L2","M1"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10：splice"><a href="#10：splice" class="headerlink" title="10：splice()"></a>10：splice()</h3><p>功能：向数组中添加，或从数组删除，或替换数组中的元素，然后返回被删除/替换的元素。</p><p>参数：<code>splice(start,num,data1,data2,...);</code> 所有参数全部可选。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"a"</span>,<span class="string">"b"</span>));<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//["Tom", "Jack", "a", "b", "Lucy", "Lily", "May"]---原数组改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="11：toString"><a href="#11：toString" class="headerlink" title="11：toString()"></a>11：toString()</h3><p>功能：将数组转换成字符串，类似于没有参数的<code>join()</code>。该方法会在数据发生隐式类型转换时被自动调用，如果手动调用，就是直接转为字符串。不会改变原数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.toString()); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="12：valueOf"><a href="#12：valueOf" class="headerlink" title="12：valueOf()"></a>12：valueOf()</h3><p>功能：返回数组的原始值（一般情况下其实就是数组自身），一般由js在后台调用，并不显式的出现在代码中</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf()); <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="comment">//为了证明返回的是数组自身</span></span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf() == str);<span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="13：IndexOf"><a href="#13：IndexOf" class="headerlink" title="13：IndexOf()"></a>13：IndexOf()</h3><p>功能：根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引</p><p>参数：<code>indexOf(value, start)</code>;value为要查询的数据；start为可选，表示开始查询的位置，当start为负数时，从数组的尾部向前数；如果查询不到value的存在，则方法返回-1</p><p>注意：如果找到该数据，立即返回该数据的索引，不再往后继续查找</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>));        <span class="comment">//2</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">3</span>));      <span class="comment">//3</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">4</span>));      <span class="comment">//-1</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">1</span>));     <span class="comment">//-1</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">3</span>));     <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14：lastIndexOf"><a href="#14：lastIndexOf" class="headerlink" title="14：lastIndexOf()"></a>14：lastIndexOf()</h3><p>功能：根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引</p><p>参数：<code>indexOf(value, start)</code>;value为要查询的数据；start为可选，表示开始查询的位置，当start为负数时，从数组的尾部向前数；如果查询不到value的存在，则方法返回-1</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>));        <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">3</span>));      <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">4</span>));      <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">1</span>));     <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">3</span>));     <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="15：forEach"><a href="#15：forEach" class="headerlink" title="15：forEach()"></a>15：forEach()</h3><p>功能：ES5新增的方法，用来遍历数组，没有返回值，</p><p>参数：<code>forEach(callback)</code>;callback默认有三个参数，分别为value(遍历到的数组的数据)，index(对应的索引)，self(数组自身)。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">     <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self));</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 打印结果为：</span></span><br><span class="line"><span class="comment">// Tom--0--true</span></span><br><span class="line"><span class="comment">// Jack--1--true</span></span><br><span class="line"><span class="comment">// Lucy--2--true</span></span><br><span class="line"><span class="comment">// Lily--3--true</span></span><br><span class="line"><span class="comment">// May--4--true</span></span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//undefined---forEach没有返回值</span></span><br><span class="line"><span class="comment">//该方法为遍历方法，不会修改原数组</span></span><br></pre></td></tr></tbody></table></figure><h3 id="16：map"><a href="#16：map" class="headerlink" title="16：map()"></a>16：map()</h3><p>功能：</p><ol><li>同<code>forEach</code>功能；</li><li>map的回调函数会将执行结果返回，最后map将所有回调函数的返回值组成新数组返回。</li></ol><p>参数：<code>map(callback)</code>;callback默认有三个参数，分别为value，index，self。跟上面的forEach()的参数一样</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：每次回调函数的返回值被map组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi:"</span>+value;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);     <span class="comment">//["hi:Tom", "hi:Jack", "hi:Lucy", "hi:Lily", "hi:May"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);   <span class="comment">//["Tom", "Jack", "Lucy", "Lily", "May"]---原数组未改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="17：filter"><a href="#17：filter" class="headerlink" title="17：filter()"></a>17：filter()</h3><p>功能：1.同<code>forEach</code>功能；2.<code>filter</code>的回调函数需要返回布尔值，当为true时，将本次数组的数据返回给filter，最后filter将所有回调函数的返回值组成新数组返回（此功能可理解为“过滤”）。</p><p>参数：<code>filter(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：当回调函数的返回值为true时，本次的数组值返回给filter，被filter组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);         <span class="comment">//["Jack", "Lucy", "Lily"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);       <span class="comment">//["Tom", "Jack", "Lucy", "Lily", "May"]---原数组未改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="18：every"><a href="#18：every" class="headerlink" title="18：every()"></a>18：every()</h3><p>功能：判断数组中每一项是否都满足条件，只有所有项都满足条件，才会返回true。</p><p>参数：<code>every()</code>接收一个回调函数作为参数，这个回调函数需要有返回值，<code>every(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><p>功能1：当回调函数的返回值为true时，类似于<code>forEach</code>的功能，遍历所有；如果为false，那么停止执行，后面的数据不再遍历，停在第一个返回false的位置。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">//因为回调函数中没有return true，默认返回undefined，等同于返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &lt; <span class="number">4</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">//因为当遍历到Jack时，回调函数到return返回false，此时Jack已经遍历，但是后面数据就不再被遍历了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br><span class="line">    <span class="comment">//因为每个回调函数的返回值都是true，那么会遍历数组所有数据，等同于forEach功能</span></span><br></pre></td></tr></tbody></table></figure><p>功能2：当每个回调函数的返回值都为true时，every的返回值为true，只要有一个回调函数的返回值为false，every的返回值都为false</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">2</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="19：some"><a href="#19：some" class="headerlink" title="19：some()"></a>19：some()</h3><p>功能：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p><p>参数：<code>some()</code>接收一个回调函数作为参数，这个回调函数需要有返回值，<code>some(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><p>功能1：因为要判断数组中的每一项，只要有一个回调函数返回true，some都会返回true，所以与every正好相反，当遇到一个回调函数的返回值为true时，可以确定结果，那么停止执行，后面都数据不再遍历，停在第一个返回true的位置；当回调函数的返回值为false时，需要继续向后执行，到最后才能确定结果，所以会遍历所有数据，实现类似于<code>forEach</code>的功能，遍历所有。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br></pre></td></tr></tbody></table></figure><p>功能2：与every相反，只要有一个回调函数的返回值都为true，some的返回值为true，所有回调函数的返回值为false，some的返回值才为false</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">4</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="20：reduce"><a href="#20：reduce" class="headerlink" title="20：reduce()"></a>20：reduce()</h3><p>功能：从数组的第一项开始，逐个遍历到最后，迭代数组的所有项，然后构建一个最终返回的值。</p><p>参数：<code>reduce()</code>接收一个或两个参数：第一个是回调函数，表示在数组的每一项上调用的函数；第二个参数（可选的）作为归并的初始值，被回调函数第一次执行时的第一个参数接收。 <code>reduce(callback,initial)</code>;callback默认有四个参数，分别为<code>prev，now，index，self</code>。  callback返回的任何值都会作为下一次执行的第一个参数。  如果initial参数被省略，那么第一次迭代发生在数组的第二项上，因此callback的第一个参数是数组的第一项，第二个参数就是数组的第二项。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:不省略initial参数，回调函数没有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    }, <span class="number">2019</span>)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// 2019--10--0--true</span></span><br><span class="line">    <span class="comment">// undefined--20--1--true</span></span><br><span class="line">    <span class="comment">// undefined--30--2--true</span></span><br><span class="line">    <span class="comment">// undefined--40--3--true</span></span><br><span class="line">    <span class="comment">// undefined--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数没有return，所以从第二次开始，prev拿到的是undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:省略initial参数，回调函数没有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：第一次，回调函数的第一个参数是数组的第一项。第二个参数就是数组的第二项</span></span><br><span class="line">    <span class="comment">// 10--20--1--true</span></span><br><span class="line">    <span class="comment">// undefined--30--2--true</span></span><br><span class="line">    <span class="comment">// undefined--40--3--true</span></span><br><span class="line">    <span class="comment">// undefined--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数没有return，所以从第二次开始，prev拿到的是undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:不省略initial参数，回调函数有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }, <span class="number">2019</span>)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// 2019--10--0--true</span></span><br><span class="line">    <span class="comment">// hello--20--1--true</span></span><br><span class="line">    <span class="comment">// hello--30--2--true</span></span><br><span class="line">    <span class="comment">// hello--40--3--true</span></span><br><span class="line">    <span class="comment">// hello--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数有return，所以从第二次开始，prev拿到的是回调函数return的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo4:省略initial参数，回调函数有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：第一次，回调函数的第一个参数是数组的第一项。第二个参数就是数组的第二项</span></span><br><span class="line">    <span class="comment">// 10--20--1--true</span></span><br><span class="line">    <span class="comment">// hello--30--2--true</span></span><br><span class="line">    <span class="comment">// hello--40--3--true</span></span><br><span class="line">    <span class="comment">// hello--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数有return，所以从第二次开始，prev拿到的是回调函数return的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo5：使用reduce计算数组中所有数据的和</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> prev + now;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(sum);      <span class="comment">//150</span></span><br><span class="line">    <span class="comment">// 回调函数的最后一次return的结果被返回到reduce方法的身上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo6：使用reduce计算数组中所有数据的和</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> prev + now;</span><br><span class="line">    }, <span class="number">8</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(sum);      <span class="comment">//158</span></span><br><span class="line">    <span class="comment">// 回调函数的最后一次return的结果被返回到reduce方法的身上</span></span><br><span class="line">    <span class="comment">// 因为reduce有第二个参数initial，在第一次执行时被计算，所以最终结果被加上8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="21：reduceRight"><a href="#21：reduceRight" class="headerlink" title="21：reduceRight()"></a>21：reduceRight()</h3><p>功能：（与reduce类似）从数组的最后一项开始，向前逐个遍历到第一位，迭代数组的所有项，然后构建一个最终返回的值。</p><p>参数：<code>同reduce。 demo：同reduce</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/dinosaur-5995333_1280.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Javascr</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="http://blog.sky123.top/tags/Javascript/"/>
    
    <category term="数组" scheme="http://blog.sky123.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记07-Promise和axios</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Promise%E5%92%8Caxios/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Promise%E5%92%8Caxios/</id>
    <published>2020-05-04T23:45:01.000Z</published>
    <updated>2021-03-03T15:16:12.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记07-Promise和axios"><a href="#vue学习笔记07-Promise和axios" class="headerlink" title="vue学习笔记07-Promise和axios"></a>vue学习笔记07-Promise和axios</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/forest-166733_1280.jpg"></p><hr><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise?"></a>什么是Promise?</h2><p>ES6中一个非常重要和好用的特性就是Promise。但是初次接触Promise会一脸懵逼，这TM是什么东西？</p><p>看看官方或者一些文章对它的介绍和用法，也是一头雾水。</p><p><code>Promise到底是做什么的呢？Promise是异步编程的一种解决方案。</code></p><p>那什么时候我们会来处理异步事件呢？一种很常见的场景应该就是网络请求了。</p><p><code>我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。</code></p><p><code>所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。</code></p><p>如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。但是，当网络请求非常复杂时，就会出现回调地狱。</p><h3 id="网络请求的回调地狱"><a href="#网络请求的回调地狱" class="headerlink" title="网络请求的回调地狱"></a>网络请求的回调地狱</h3><p>我们来考虑下面的场景(有夸张的成分)：<br>我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2<br>我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3<br>我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4<br>发送网络请求url4，获取最终的数据data4</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180021363.png" alt="image-20201001180021363"></p><p>上面的代码有什么问题吗？</p><p>正常情况下，不会有什么问题，可以正常运行并且获取我们想要的结果。<br><code>但是，这样额代码难看而且不容易维护。我们更加期望的是一种更加优雅的方式来进行这种异步操作。</code></p><p>如何做呢？就是使用Promise。Promise可以以一种非常优雅的方式来解决这个问题。</p><h2 id="Promise的使用"><a href="#Promise的使用" class="headerlink" title="Promise的使用"></a>Promise的使用</h2><h3 id="定时器的异步事件"><a href="#定时器的异步事件" class="headerlink" title="定时器的异步事件"></a>定时器的异步事件</h3><p>我们先来看看Promise最基本的语法。这里，我们用一个定时器来模拟异步事件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180144293.png" alt="image-20201001180144293"></p><p>假设下面的data是从网络上1秒后请求的数据console.log就是我们的处理方式。</p><p>这是我们过去的处理方式，我们将它换成Promise代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180150141.png" alt="image-20201001180150141"></p><p>这个例子会让我们感觉脱裤放屁，多此一举</p><p>首先，下面的Promise代码明显比上面的代码看起来还要复杂。<br>其次，下面的Promise代码中包含的resolve、reject、then、catch都是些什么东西？</p><p>我们先不管第一个复杂度的问题，因为这样的一个屁大点的程序根本看不出来Promise真正的作用。</p><h3 id="定时器异步事件解析"><a href="#定时器异步事件解析" class="headerlink" title="定时器异步事件解析"></a>定时器异步事件解析</h3><p>我们先来认认真真的读一读这个程序到底做了什么？new Promise很明显是创建一个Promise对象</p><p>小括号中((resolve, reject) =&gt; {})也很明显就是一个函数，而且我们这里用的是之前刚刚学习过的箭头函数。<br>但是resolve, reject它们是什么呢？</p><p>我们先知道一个事实：<code>在创建Promise时，传入的这个箭头函数是固定的（一般我们都会这样写）</code></p><p>resolve和reject它们两个也是函数，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。<br>成功还是失败？</p><p>如果是成功的，那么通常我们会调用resolve(messsage)，这个时候，我们后续的then会被回调。<br>如果是失败的，那么通常我们会调用reject(error)，这个时候，我们后续的catch会被回调。 </p><p>OK，这就是Promise最基本的使用了。</p><h3 id="Promise三种状态"><a href="#Promise三种状态" class="headerlink" title="Promise三种状态"></a>Promise三种状态</h3><p>首先, 当我们开发中有异步操作时, 就可以给异步操作包装一个Promise<br>异步操作之后会有三种状态我们一起来看一下这三种状态:</p><p>pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p><p>fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</p><p>reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180314041.png" alt="image-20201001180314041"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180320624.png" alt="image-20201001180320624"></p><h2 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h2><p>我们在看Promise的流程图时，发现无论是then还是catch都可以返回一个Promise对象。<br>所以，我们的代码其实是可以进行链式调用的：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180432443.png" alt="image-20201001180432443"></p><p>这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了<br>Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数<br>Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数</p><h3 id="链式调用简写"><a href="#链式调用简写" class="headerlink" title="链式调用简写"></a>链式调用简写</h3><p>简化版代码：<br>如果我们希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据<br>注意下面的代码中，我讲return Promise.resovle(data)改成了return data<br>结果依然是一样的</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180530409.png" alt="image-20201001180530409"></p><h1 id="网络模块封装"><a href="#网络模块封装" class="headerlink" title="网络模块封装"></a>网络模块封装</h1><ul><li>常见的网络请求模块，以及优缺点对比。</li><li>JSONP的原理和封装<ul><li>JSONP原理回顾</li><li>JSONP请求封装</li></ul></li><li>axios的内容详解<ul><li>认识axios网络模块</li><li>发送基本请求</li><li>axios创建实例</li><li>axios拦截器的使用</li></ul></li></ul><h2 id="选择什么网络模块"><a href="#选择什么网络模块" class="headerlink" title="选择什么网络模块?"></a>选择什么网络模块?</h2><p>Vue中发送网络请求有非常多的方式, 那么, 在开发中, 如何选择呢?</p><p>选择一: 传统的Ajax是基于XMLHttpRequest(XHR)。为什么不用它呢?</p><p>非常好解释, 配置和调用方式等非常混乱。编码起来看起来就非常蛋疼。</p><p>所以真实开发中很少直接使用, 而是使用jQuery-Ajax</p><p>选择二: 在前面的学习中, 我们经常会使用jQuery-Ajax。相对于传统的Ajax非常好用.</p><p>为什么不选择它呢?首先, 我们先明确一点: 在Vue的整个开发中都是不需要使用jQuery了.</p><p>那么, 就意味着为了方便我们进行一个网络请求, 特意引用一个jQuery, 你觉得合理吗?<br>jQuery的代码1w+行.<br>Vue的代码才1w+行.</p><p>完全没有必要为了用网络请求就引用这个重量级的框架.</p><p>选择三: 官方在Vue1.x的时候, 推出了Vue-resource。Vue-resource的体积相对于jQuery小很多。另外Vue-resource是官方推出的.为什么不选择它呢?</p><p>在Vue2.0退出后, Vue作者就在GitHub的Issues中说明了去掉vue-resource, 并且以后也不会再更新.</p><p>那么意味着以后vue-reource不再支持新的版本时, 也不会再继续更新和维护.</p><p>对以后的项目开发和维护都存在很大的隐患.</p><p><code>选择四: 在说明不再继续更新和维护vue-resource的同时, 作者还推荐了一个框架: axios为什么用它呢?</code></p><p><code>axios有非常多的优点, 并且用起来也非常方便.</code></p><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>在前端开发中, 我们一种常见的网络请求方式就是JSONP。使用JSONP最主要的原因往往是为了解决跨域访问的问题.</p><p>JSONP的原理是什么呢?</p><p>JSONP的核心在于通过<code>&lt;script&gt;</code>标签的src来帮助我们请求数据.</p><p>原因是我们的项目部署在<code>domain1.com</code>服务器上时, 是不能直接访问<code>domain2.com</code>服务器上的资料的.</p><p>这个时候, 我们利用<code>&lt;script&gt;</code>标签的src帮助我们去服务器请求到数据, 将数据当做一个javascript的函数来执行, 并且执行</p><p>的过程中传入我们需要的json.<br>所以, 封装jsonp的核心就在于我们监听window上的jsonp进行回调时的名称.<br>JSONP如何封装呢?<br>我们一起自己来封装一个处理JSONP的代码吧.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181211558.png" alt="image-20201001181211558"></p><h3 id="JSONP封装"><a href="#JSONP封装" class="headerlink" title="JSONP封装"></a>JSONP封装</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181303298.png" alt="image-20201001181303298"></p><h2 id="为什么选择axios"><a href="#为什么选择axios" class="headerlink" title="为什么选择axios?"></a>为什么选择axios?</h2><p>作者推荐和功能特点</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181347060.png" alt="image-20201001181347060"></p><p>功能特点:</p><p>在浏览器中发送 XMLHttpRequests 请求</p><p>在 node.js 中发送 http请求</p><p>支持 Promise API</p><p>拦截请求和响应</p><p>转换请求和响应数据</p><p><code>补充: axios名称的由来? 个人理解。没有具体的翻译。axios: ajax i/o system.</code></p><h3 id="axiox请求方式"><a href="#axiox请求方式" class="headerlink" title="axiox请求方式"></a>axiox请求方式</h3><p>支持多种请求方式:</p><p>axios(config)</p><p>axios.request(config)</p><p>axios.get(url[, config])</p><p>axios.delete(url[, config])</p><p>axios.head(url[, config])</p><p>axios.post(url[, data[, config]])</p><p>axios.put(url[, data[, config]])</p><p>axios.patch(url[, data[, config]])</p><h4 id="发送get请求演示"><a href="#发送get请求演示" class="headerlink" title="发送get请求演示"></a>发送get请求演示</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181523520.png" alt="image-20201001181523520"></p><h4 id="发送并发请求"><a href="#发送并发请求" class="headerlink" title="发送并发请求"></a>发送并发请求</h4><p>有时候, 我们可能需求同时发送两个请求。使用axios.all, 可以放入多个请求的数组.</p><p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181609571.png" alt="image-20201001181609571"></p><p>在上面的示例中, 我们的BaseURL是固定的。事实上, 在开发中可能很多参数都是固定的。这个时候我们可以进行一些抽取, 也可以利用axiox的全局配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = ‘<span class="number">123.207</span><span class="number">.32</span><span class="number">.32</span>:<span class="number">8000</span>’</span><br><span class="line">axios.defaults.headers.post[‘Content-Type’] = ‘application/x-www-form-urlencoded’;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181716339.png" alt="image-20201001181716339"></p><h3 id="常见的配置选项"><a href="#常见的配置选项" class="headerlink" title="常见的配置选项"></a>常见的配置选项</h3><p>请求地址：url: ‘/user’    请求类型：method: ‘get’,</p><p>请根路径：baseURL: ‘<a class="link" href="http://www.mt.com/api'">http://www.mt.com/api'<i class="fas fa-external-link-alt"></i></a>    请求前的数据处理：transformRequest:[function(data){}],</p><p>请求后的数据处理：transformResponse: [function(data){}],</p><p>自定义的请求头：headers:{‘x-Requested-With’:’XMLHttpRequest’},</p><p>URL查询对象：params:{ id: 12 }    查询对象序列化函数：paramsSerializer: function(params){ }</p><p>request body：data: { key: ‘aa’},</p><p>超时设置s：timeout: 1000,</p><p>跨域是否带Token：withCredentials: false,</p><p>自定义请求处理：adapter: function(resolve, reject, config){},</p><p>身份验证信息：auth: { uname: ‘’, pwd: ‘12’},</p><p>响应的数据格式 json / blob /document /arraybuffer / text / stream：responseType: ‘json’,</p><h3 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h3><p>为什么要创建axios的实例呢?当我们从axios模块中导入对象时, 使用的实例是默认的实例.</p><p>当给该实例设置一些默认配置时, 这些配置就被固定下来了。但是后续开发中, 某些配置可能会不太一样.</p><p>比如某些请求需要使用特定的baseURL或者timeout或者content-Type等。这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182018472.png" alt="image-20201001182018472"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182031415.png" alt="image-20201001182031415"></p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。如何使用拦截器呢？</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182111819.png" alt="image-20201001182111819"></p><p>请求拦截可以做到的事情：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182137248.png" alt="image-20201001182137248"></p><p>请求拦截中错误拦截较少，通常都是配置相关的拦截。可能的错误比如请求超时，可以将页面跳转到一个错误页面中。</p><p>响应拦截中完成的事情：</p><p>响应的成功拦截中，主要是对数据进行过滤。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182210645.png" alt="image-20201001182210645"></p><p>响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182214712.png" alt="image-20201001182214712"></p><h2 id="项目开发中的网络模块使用"><a href="#项目开发中的网络模块使用" class="headerlink" title="项目开发中的网络模块使用"></a>项目开发中的网络模块使用</h2><p>目录结构</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182916556.png" alt="image-20201001182916556"></p><p>在 request.js 中封装网络请求模块</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="comment">//import Cookie from 'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = {</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    msg: <span class="string">"请求异常"</span>,</span><br><span class="line">    data: {}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, data, type</span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">//自动给请求加上token和collegeId，因为mock原因暂时注释掉</span></span><br><span class="line">        <span class="comment">// try {</span></span><br><span class="line">        <span class="comment">//     // 获取登录数据</span></span><br><span class="line">        <span class="comment">//     if (Cookie.get('token') !== undefined) {</span></span><br><span class="line">        <span class="comment">//         const token = JSON.parse(Cookie.get('token'))</span></span><br><span class="line">        <span class="comment">//         console.log('token信息',token)</span></span><br><span class="line">        <span class="comment">//         if (data !== undefined &amp;&amp; data !== null ) {</span></span><br><span class="line">        <span class="comment">//             data.token = token.token</span></span><br><span class="line">        <span class="comment">//             data.collegeId = token.collegeId</span></span><br><span class="line">        <span class="comment">//         } else {</span></span><br><span class="line">        <span class="comment">//             data = {</span></span><br><span class="line">        <span class="comment">//                 token: token.token,</span></span><br><span class="line">        <span class="comment">//                 collegeId: token.collegeId</span></span><br><span class="line">        <span class="comment">//             }</span></span><br><span class="line">        <span class="comment">//         }</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// } catch (e) {</span></span><br><span class="line">        <span class="comment">//     //</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// 判断请求类型</span></span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'get'</span>) {</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> axios.get(url, {<span class="attr">params</span>: data})).data</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'post'</span>) {</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> axios.post(url, QS.stringify(data), {<span class="attr">headers</span>: {<span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>}})).data</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (e) {</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>api文件夹中调用 request.js 封装的 request函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录、注册、忘记密码模块</span></span><br><span class="line"><span class="keyword">import</span> { request } <span class="keyword">from</span> <span class="string">'../util/request.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>{ <span class="comment">// 登录接口</span></span><br><span class="line">    <span class="keyword">return</span> request( <span class="string">'/api/login/collegeAdmin'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">data</span>) </span>{ <span class="comment">// 注册接口</span></span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/register'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">systemMessage</span>(<span class="params">data</span>) </span>{ <span class="comment">// 获取院管理员信息</span></span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'/api/account/msg'</span>, data, <span class="string">'get'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changePassword</span>(<span class="params">data</span>) </span>{ <span class="comment">// 获取院管理员信息</span></span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'/api/account/password/change'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在action中的调用</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">changePasswd</span>(<span class="params">{ commit },data</span>)</span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">           changePassword(data).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">               <span class="keyword">if</span> (res.code === <span class="number">1</span>){</span><br><span class="line">                   resolve(res.msg)</span><br><span class="line">                   commit(<span class="string">'NULL'</span>)</span><br><span class="line">               } <span class="keyword">else</span> {</span><br><span class="line">                   reject(res.msg)</span><br><span class="line">               }</span><br><span class="line">           }).catch(<span class="function"><span class="params">error</span>=&gt;</span>{</span><br><span class="line">               reject(error)</span><br><span class="line">           })</span><br><span class="line">       })</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记07-Promise和axios&quot;&gt;&lt;a href=&quot;#vue学习笔记07-Promise和axios&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记07-Promise和axios&quot;&gt;&lt;/a&gt;vue学习笔记07-Promise</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记06-vuex</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Vuex/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Vuex/</id>
    <published>2020-05-04T22:45:01.000Z</published>
    <updated>2021-02-26T15:08:47.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记06-vuex"><a href="#vue学习笔记06-vuex" class="headerlink" title="vue学习笔记06-vuex"></a>vue学习笔记06-vuex</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/tree-736875_1280.jpg"></p><hr><h2 id="Vuex是做什么的"><a href="#Vuex是做什么的" class="headerlink" title="Vuex是做什么的?"></a>Vuex是做什么的?</h2><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。<br>它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h3 id="状态管理到底是什么？"><a href="#状态管理到底是什么？" class="headerlink" title="状态管理到底是什么？"></a>状态管理到底是什么？</h3><p>状态管理模式、集中式存储管理这些名词听起来就非常高大上，让人捉摸不透。其实，你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。<br><code>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。</code>那么，多个组件是不是就可以共享这个对象中的所有变量属性了呢？等等，如果是这样的话，为什么官方还要专门出一个插件Vuex呢？难道我们不能自己封装一个对象来管理吗？<br><code>当然可以，只是我们要先想想VueJS带给我们最大的便利是什么呢？没错，就是响应式。</code><br>如果你自己封装实现一个对象能不能保证它里面所有的属性做到响应式呢？当然也可以，只是自己封装可能稍微麻烦一些。不用怀疑，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它就可以了。</p><h3 id="管理什么状态呢"><a href="#管理什么状态呢" class="headerlink" title="管理什么状态呢?"></a>管理什么状态呢?</h3><p>但是，有什么状态时需要我们在多个组件间共享的呢？如果你做过大型开放，你一定遇到过多个状态，在多个界面间的共</p><p>享问题。比如用户的登录状态、用户名称、头像、地理位置信息等等。比如商品的收藏、购物车中的物品等等。</p><p>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的（待会儿我们就可以看到代码了，莫着急）。</p><p>OK，从理论上理解了状态管理之后，让我们从实际的代码再来看看状态管理。</p><p><code>毕竟，Talk is cheap, Show me the code.(来自Linus)我们先来看看但界面的状态管理吧.</code></p><h3 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h3><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情。什么意思呢？我们来看下面的图片。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101301530.png" alt="image-20201001101301530"></p><p>这图片中的三种东西，怎么理解呢？<br>State：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）<br>View：视图层，可以针对State的变化，显示不同的信息。（这个好理解吧？）<br>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</p><p>写点代码，加深理解：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101328897.png" alt="image-20201001101328897"></p><p>看下右边的代码效果, 肯定会实现吧?</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101338978.png" alt="image-20201001101338978"></p><p>在这个案例中，我们有木有状态需要管理呢？没错，就是个数counter。<br><code>counter需要某种方式被记录下来，也就是我们的State。</code></p><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），<code>需要去更新状态，也就是我们的Actions</code></p><p>这不就是上面的流程图了吗？</p><h3 id="多界面状态管理"><a href="#多界面状态管理" class="headerlink" title="多界面状态管理"></a>多界面状态管理</h3><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</p><p><code>多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）</code></p><p>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的<br>状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。<br>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</p><p>没错，<code>Vuex就是为我们提供这个大管家的工具。</code></p><p><code>全局单例模式（大管家）</code><br>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。<br>之后，你们每个 view，按照我规定好的规定，进行访问和修改等操作。<br>这就是Vuex背后的基本思想。</p><h3 id="Vuex状态管理图例"><a href="#Vuex状态管理图例" class="headerlink" title="Vuex状态管理图例"></a>Vuex状态管理图例</h3><p>一起在来看一副官方给出的图片</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101635053.png" alt="image-20201001101635053"></p><h2 id="Vuex的基本使用"><a href="#Vuex的基本使用" class="headerlink" title="Vuex的基本使用"></a>Vuex的基本使用</h2><p>我们还是实现一下之前简单的案例</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101751123.png" alt="image-20201001101751123"></p><p>首先，我们需要在某个地方存放我们的Vuex代码：<br>这里，我们先创建一个文件夹store，并且在其中创建一个index.js文件<br>在index.js文件中写入如下代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101815560.png" alt="image-20201001101815560"></p><p>其次，我们让所有的Vue组件都可以使用这个store对象。来到main.js文件，导入store对象，并且放在new Vue中</p><p>这样，<code>在其他Vue组件中，我们就可以通过this.$store的方式，获取到这个store对象了</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101925409.png" alt="image-20201001101925409"></p><p>好的，这就是使用Vuex最简单的方式了。我们来对使用步骤，做一个简单的小节：</p><ol><li><p>提取出一个公共的store对象，用于保存在多个组件中共享的状态</p></li><li><p>将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到</p></li><li><p>在其他组件中使用store对象中保存的状态即可。通过this.$store.state.属性的方式来访问状态</p><p>通过this.$store.commit(‘mutation中方法’)来修改状态</p><p>注意事项：<code>我们通过提交mutation的方式，而非直接改变store.state.count。</code><br>这是因为Vuex可以更明确的追踪状态的变化，<code>所以不要直接改变store.state.count的值。</code></p></li></ol><h2 id="Vuex的核心概念"><a href="#Vuex的核心概念" class="headerlink" title="Vuex的核心概念"></a>Vuex的核心概念</h2><p>Vuex有几个比较核心的概念:<br>State<br>Getters<br>Mutation<br>Action<br>Module<br>我们对它进行一一介绍.</p><h3 id="State单一状态树"><a href="#State单一状态树" class="headerlink" title="State单一状态树"></a>State单一状态树</h3><p>Vuex提出使用单一状态树, 什么是单一状态树呢？英文名称是Single Source of Truth，也可以翻译成单一数据源。</p><p>但是，它是什么呢？我们来看一个生活中的例子。OK，我用一个生活中的例子做一个简单的类比。</p><p>我们知道，在国内我们有很多的信息需要被记录，比如上学时的个人档案，工作后的社保记录，公积金记录，结婚后的婚姻信息，以及其他相关的户口、医疗、文凭、房产记录等等（还有很多信息）。</p><p>这些信息被分散在很多地方进行管理，有一天你需要办某个业务时(比如入户某个城市)，你会发现你需要到各个对应的工作地点去打印、盖章各种资料信息，最后到一个地方提交证明你的信息无误。</p><p>这种保存信息的方案，不仅仅低效，而且不方便管理，以及日后的维护也是一个庞大的工作(需要大量的各个部门的人力来维护，当然国家目前已经在完善我们的这个系统了)。<br>这个和我们在应用开发中比较类似：<br><code>如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难。所以Vuex也使用了单一状态树来管理应用层级的全部状态。</code><br>单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</p><h3 id="Getters基本使用"><a href="#Getters基本使用" class="headerlink" title="Getters基本使用"></a>Getters基本使用</h3><p>有时候，我们需要从store中获取一些state变异后的状态，比如下面的Store中：<br>获取学生年龄大于20的个数。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102316623.png" alt="image-20201001102316623"></p><p>我们可以在Store中定义getters</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102324808.png" alt="image-20201001102324808"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102330021.png" alt="image-20201001102330021"></p><p>如果我们已经有了一个获取所有年龄大于20岁学生列表的getters, 那么代码可以这样来写</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102350974.png" alt="image-20201001102350974"></p><p>getters默认是不能传递参数的, 如果希望传递参数, 那么只能让getters本身返回另一个函数.<br>比如上面的案例中,我们希望根据ID获取用户的信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102358424.png" alt="image-20201001102358424"></p><h3 id="Mutation状态更新"><a href="#Mutation状态更新" class="headerlink" title="Mutation状态更新"></a>Mutation状态更新</h3><p><code>Vuex的store状态的更新唯一方式：提交Mutation</code></p><p>Mutation主要包括两部分：</p><p>字符串的事件类型（type）。一个回调函数（handler）,该回调函数的第一个参数就是state。<br>mutation的定义方式：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102908754.png" alt="image-20201001102908754"></p><p>通过mutation更新</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102912834.png" alt="image-20201001102912834"></p><h4 id="Mutation传递参数"><a href="#Mutation传递参数" class="headerlink" title="Mutation传递参数"></a>Mutation传递参数</h4><p>在通过mutation更新数据的时候, 有可能我们希望携带一些额外的参数。参数被称为是mutation的载荷(Payload)<br>Mutation中的代码:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103024606.png" alt="image-20201001103024606"></p><p>但是如果参数不是一个呢?比如我们有很多参数需要传递.<br>这个时候, 我们通常会以对象的形式传递, 也就是payload是一个对象。这个时候可以再从对象中取出相关的信息.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103043242.png" alt="image-20201001103043242"></p><h4 id="Mutation提交风格"><a href="#Mutation提交风格" class="headerlink" title="Mutation提交风格"></a>Mutation提交风格</h4><p>上面的通过commit进行提交是一种普通的方式<br>Vue还提供了另外一种风格, 它是一个包含type属性的对象</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103154798.png" alt="image-20201001103154798"></p><p>Mutation中的处理方式是将整个commit的对象作为payload使用, 所以代码没有改变, 依然如下:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103202938.png" alt="image-20201001103202938"></p><h4 id="Mutation响应规则"><a href="#Mutation响应规则" class="headerlink" title="Mutation响应规则"></a>Mutation响应规则</h4><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新。这就要求我们必须遵守一些Vuex对应的规则:</p><p>提前在store中初始化好所需的属性。当给state中的对象添加新属性时, 使用下面的方式:</p><ol><li>使用Vue.set(obj, ‘newProp’, 123)</li><li> 用新对象给旧对象重新赋值</li></ol><p>我们来看一个例子:当我们点击更新信息时, 界面并没有发生对应改变.</p><p>如何才能让它改变呢?查看下面代码的方式一和方式二。都可以让state中的属性是响应式的.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103428715.png" alt="image-20201001103428715"></p><h4 id="Mutation常量类型-–-概念"><a href="#Mutation常量类型-–-概念" class="headerlink" title="Mutation常量类型 – 概念"></a>Mutation常量类型 – 概念</h4><p>我们来考虑下面的问题：在mutation中, 我们定义了很多事件类型(也就是其中的方法名称)。</p><p>当我们的项目增大时, Vuex管理的状态越来越多, 需要更新状态的情况越来越多, 那么意味着Mutation中的方法越来越多.</p><p>方法过多, 使用者需要花费大量的经历去记住这些方法, 甚至是多个文件间来回切换, 查看方法名称, 甚至如果不是复制的时候, 可能还会出现写错的情况.<br>如何避免上述的问题呢?</p><p><code>在各种Flux实现中, 一种很常见的方案就是使用常量替代Mutation事件的类型.</code></p><p>我们可以将这些常量放在一个单独的文件中, 方便管理以及让整个app所有的事件类型一目了然.<br>具体怎么做呢?<br>我们可以创建一个文件: mutation-types.js, 并且在其中定义我们的常量.<br>定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103801680.png" alt="image-20201001103801680"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103819962.png" alt="image-20201001103819962"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103825664.png" alt="image-20201001103825664"></p><h4 id="Mutation同步函数"><a href="#Mutation同步函数" class="headerlink" title="Mutation同步函数"></a>Mutation同步函数</h4><p>通常情况下, Vuex要求我们Mutation中的方法必须是同步方法。主要的原因是当我们使用devtools时, 可以devtools可以帮助我们捕捉mutation的快照。但是如果是异步操作, 那么devtools将不能很好的追踪这个操作什么时候会被完成.<br>比如我们之前的代码, 当执行更新时, devtools中会有如下信息: 图1</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103926907.png" alt="image-20201001103926907"></p><p>但是, 如果Vuex中的代码, 我们使用了异步函数: 图2</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103931794.png" alt="image-20201001103931794"></p><p>你会发现state中的info数据一直没有被改变, 因为他无法追踪到。<code>因此，通常情况下, 不要再mutation中进行异步的操作</code></p><h3 id="Action的基本定义"><a href="#Action的基本定义" class="headerlink" title="Action的基本定义"></a>Action的基本定义</h3><p>我们强调, 不要再Mutation中进行异步操作。但是某些情况, 我们确实希望在Vuex中进行一些异步操作, 比如网络请求, 必然是异步的. 这个时候怎么处理呢?</p><p><code>Action类似于Mutation, 但是是用来代替Mutation进行异步操作的.</code></p><p>Action的基本使用代码如下:<br>context是什么?</p><p><code>context是和store对象具有相同方法和属性的对象.</code></p><p>也就是说, 我们可以通过context去进行commit相关的操作, 也可以获取context.state等.</p><p>但是注意, 这里它们并不是同一个对象, 为什么呢? 我们后面学习Modules的时候,。</p><p>我们定义了actions, 然后又在actions中去进行commit, 这不是脱裤放屁吗?</p><p><code>事实上并不是这样, 如果在Vuex中有异步操作, 那么我们就可以在actions中完成了.</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104150464.png" alt="image-20201001104150464"></p><h4 id="Action的分发"><a href="#Action的分发" class="headerlink" title="Action的分发"></a>Action的分发</h4><p>在Vue组件中, 如果我们调用action中的方法, 那么就需要使用dispatch</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104235614.png" alt="image-20201001104235614"></p><p>同样的, 也是支持传递payload</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104241037.png" alt="image-20201001104241037"></p><h4 id="Action返回的Promise"><a href="#Action返回的Promise" class="headerlink" title="Action返回的Promise"></a>Action返回的Promise</h4><p>前面我们学习ES6语法的时候说过, Promise经常用于异步操作。在Action中, 我们可以将异步操作放在一个Promise中, 并且在成功或者失败后, 调用对应的resolve或reject.<br>OK, 我们来看下面的代码:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104354476.png" alt="image-20201001104354476"></p><h3 id="认识Module"><a href="#认识Module" class="headerlink" title="认识Module"></a>认识Module</h3><p>Module是模块的意思, 为什么在Vuex中我们要使用模块呢?<code>Vue使用单一状态树,那么也意味着很多状态都会交给Vuex来管理。当应用变得非常复杂时,store对象就有可能变得相当臃肿。</code>为了解决这个问题, Vuex允许我们将store分割成模块(Module), 而每个模块拥有自己的state、mutation、action、getters等</p><p>我们按照什么样的方式来组织模块呢? </p><p>我们来看左边的代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104611130.png" alt="image-20201001104611130"></p><h4 id="Module局部状态"><a href="#Module局部状态" class="headerlink" title="Module局部状态"></a>Module局部状态</h4><p>上面的代码中, 我们已经有了整体的组织结构, 下面我们来看看具体的局部模块中的代码如何书写.</p><p>我们在moduleA中添加state、mutations、getters</p><p>mutation和getters接收的第一个参数是局部状态对象</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104707803.png" alt="image-20201001104707803"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104728296.png" alt="image-20201001104728296"></p><p>注意：虽然, 我们的doubleCount和increment都是定义在对象内部的。但是在调用的时候, 依然是通过this.$store来直接调用的.</p><h4 id="Actions的写法"><a href="#Actions的写法" class="headerlink" title="Actions的写法"></a>Actions的写法</h4><p>actions的写法呢? 接收一个context参数对象<br>局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110647431.png" alt="image-20201001110647431"></p><p>如果getters中也需要使用全局的状态, 可以接受更多的参数</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110654980.png" alt="image-20201001110654980"></p><p>项目结构</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110737846.png" alt="image-20201001110737846"></p><h4 id="常用的模块化开发结构"><a href="#常用的模块化开发结构" class="headerlink" title="常用的模块化开发结构"></a>常用的模块化开发结构</h4><p>目录结构：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001105136797.png" alt="image-20201001105136797"></p><p>在 index.js中做如下定义：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store的index.js文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.context(<span class="string">'./modules'</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.keys().reduce(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// set './app.js' =&gt; 'app'</span></span><br><span class="line">    <span class="keyword">const</span> moduleName = modulePath.replace(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">'$1'</span>)</span><br><span class="line">    <span class="keyword">const</span> value = modulesFiles(modulePath)</span><br><span class="line">    modules[moduleName] = value.default</span><br><span class="line">    <span class="keyword">return</span> modules</span><br><span class="line">}, {})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    modules</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在每个store文件中可以这样定义：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> ({</span><br><span class="line">  .......</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">    ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = { <span class="comment">// mutations改变state中的数据</span></span><br><span class="line">  ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = { <span class="comment">// 发送请求</span></span><br><span class="line">  ........</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    namespaced: <span class="literal">true</span>,<span class="comment">//注意要开启这个</span></span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这样在组件中使用的时候可以这样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  .......</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import { mapState } from 'vuex' //</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: "login",</span><br><span class="line">  methods: {</span><br><span class="line">  },</span><br><span class="line">  computed: </span><br><span class="line">    ...mapState({ // 这个是提取store中access.js的state的数据</span><br><span class="line">      'loginState': 'login'</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">   ....</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记06-vuex&quot;&gt;&lt;a href=&quot;#vue学习笔记06-vuex&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记06-vuex&quot;&gt;&lt;/a&gt;vue学习笔记06-vuex&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; </summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记05-vue-router</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/vue-router/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/vue-router/</id>
    <published>2020-05-04T21:45:01.000Z</published>
    <updated>2021-02-26T15:10:05.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记05-vue-router"><a href="#vue学习笔记05-vue-router" class="headerlink" title="vue学习笔记05-vue-router"></a>vue学习笔记05-vue-router</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/forest-166733_1280.jpg"></p><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="什么是路由？"><a href="#什么是路由？" class="headerlink" title="什么是路由？"></a>什么是路由？</h2><p>说起路由你想起了什么？路由是一个网络工程里面的术语。<br><code>路由（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动. --- 维基百科</code></p><p>在生活中, 我们有没有听说过路由的概念呢? 当然了, 路由器嘛.路由器是做什么的? 你有想过吗?路由器提供了两种机制: <code>路</code></p><p><code>由和转送</code>。<code>路由是决定数据包从来源到目的地的路径。转送将输入端的数据转移到合适的输出端.</code></p><p>路由中有一个非常重要的概念叫路由表。路由表本质上就是一个映射表, 决定了数据包的指向。</p><h2 id="后端路由阶段"><a href="#后端路由阶段" class="headerlink" title="后端路由阶段"></a>后端路由阶段</h2><p>早期的网站开发整个HTML页面是由服务器来渲染的.服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示.</p><p>但是, 一个网站, 这么多页面服务器如何处理呢?一个页面有自己对应的网址, 也就是URL.</p><p>URL会发送到服务器, <code>服务器会通过正则对该URL进行匹配,</code> 并且最后交给一个Controller进行处理.<br>Controller进行各种处理, 最终生成HTML或者数据, 返回给前端.这就完成了一个IO操作.</p><p>上面的这种操作, 就是后端路由。</p><p>当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户顿.<br>这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化.<br><code>后端路由的缺点:</code><br>一种情况是<code>整个页面的模块由后端人员来编写和维护的</code>.<br>另一种情况是前端开发人员如果要开发页面, 需要通过PHP和Java等语言来编写页面代码。而且通常情况下HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情.</p><h2 id="前后端分离阶段"><a href="#前后端分离阶段" class="headerlink" title="前后端分离阶段"></a>前后端分离阶段</h2><p>随着Ajax的出现, 有了前后端分离的开发模式。后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中。这样做最大的优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上。<code>并且当移动端(iOS/Android)出现后, 后端不需要进行任何处理, 依然使用之前的一套API即可</code>.<br>目前很多的网站依然采用这种模式开发.</p><h2 id="单页面富应用阶段"><a href="#单页面富应用阶段" class="headerlink" title="单页面富应用阶段"></a>单页面富应用阶段</h2><p>其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由。也就是前端来维护一套路由规则.<br>前端路由的核心是什么呢？改变URL，但是页面不进行整体的刷新。如何实现呢？</p><h2 id="前端路由规则"><a href="#前端路由规则" class="headerlink" title="前端路由规则"></a>前端路由规则</h2><h3 id="URL的hash"><a href="#URL的hash" class="headerlink" title="URL的hash"></a>URL的hash</h3><p>URL的hash也就是锚点(#), 本质上是改变window.location的href属性。我们可以通过直接赋值location.hash来改变href, 但是页面不发生刷新。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220342432.png" alt="image-20200923220342432" style="zoom:80%;"><h3 id="HTML5的history模式"><a href="#HTML5的history模式" class="headerlink" title="HTML5的history模式"></a>HTML5的history模式</h3><p>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面.</p><h4 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h4><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220441761.png" alt="image-20200923220441761" style="zoom:80%;"><h4 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h4><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220523487.png" alt="image-20200923220523487" style="zoom:80%;"><h4 id="history-go"><a href="#history-go" class="headerlink" title="history.go()"></a>history.go()</h4><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220546868.png" alt="image-20200923220546868" style="zoom:80%;"><p><code>补充说明：上面只演示了三个方法。因为 history.back() 等价于 history.go(-1)。history.forward() 则等价于 history.go(1)这三个接口等同于浏览器界面的前进后退。</code></p><h2 id="认识vue-router"><a href="#认识vue-router" class="headerlink" title="认识vue-router"></a>认识vue-router</h2><p>目前前端流行的三大框架, 都有自己的路由实现:</p><ul><li>Angular的ngRouter</li><li>React的ReactRouter</li><li>Vue的vue-router</li></ul><p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。</p><p>我们可以访问其官方网站对其进行学习: <a class="link" href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/<i class="fas fa-external-link-alt"></i></a></p><p>vue-router是基于路由和组件的。路由用于设定访问路径, 将路径和组件映射起来。在vue-router的单页面应用中, 页面的路径的改变就是组件的切换。</p><h3 id="安装和使用vue-router"><a href="#安装和使用vue-router" class="headerlink" title="安装和使用vue-router"></a>安装和使用vue-router</h3><p>因为我们已经学习了webpack, 后续开发中我们主要是通过工程化的方式进行开发的.<br>所以在后续, 我们直接使用npm来安装路由即可.</p><ol><li><p>安装vue-router<br><code>npm install vue-router --save</code></p></li><li><p>在模块化工程中使用它(因为是一个插件, 所以可以通过Vue.use()来安装路由功能)</p><ol><li><p>导入路由对象，并且调用 Vue.use(VueRouter)</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221159303.png" alt="image-20200923221159303"></p></li><li><p>创建路由实例，并且传入路由映射配置</p></li><li><p>在Vue实例中挂载创建的路由实例</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221213842.png" alt="image-20200923221213842"></p></li></ol></li><li><p>使用vue-router的步骤:</p><ol><li><p>创建路由组件</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221233833.png" alt="image-20200923221233833"></p></li><li><p>配置路由映射: 组件和路径映射关系</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221308596.png" alt="image-20200923221308596"></p></li><li><p>使用路由: 通过<router-link>和<router-view></router-view></router-link></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221318561.png" alt="image-20200923221318561"></p></li></ol></li></ol><p><code>&lt;router-link&gt;: 该标签是一个vue-router中已经内置的组件, 它会被渲染成一个&lt;a&gt;标签.</code><br><code>&lt;router-view&gt;: 该标签会根据当前的路径, 动态渲染出不同的组件.</code><br><code>网页的其他内容, 比如顶部的标题/导航, 或者底部的一些版权信息等会和&lt;router-view&gt;处于同一个等级.</code><br><code>在路由切换时, 切换的是&lt;router-view&gt;挂载的组件, 其他内容不会发生改变.</code></p><p>最终效果如下：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221359788.png" alt="image-20200923221359788"></p><h3 id="细节配置"><a href="#细节配置" class="headerlink" title="细节配置"></a>细节配置</h3><h4 id="路由的默认路径"><a href="#路由的默认路径" class="headerlink" title="路由的默认路径"></a>路由的默认路径</h4><p>我们这里还有一个不太好的实现。默认情况下, 进入网站的首页, 我们希望<router-view>渲染首页的内容.</router-view></p><p>但是我们的实现中, 默认没有显示首页组件, 必须让用户点击才可以.如何可以让路径默认跳到到首页, 并且<router-view>渲染首页组件呢?非常简单, 我们只需要配置多配置一个映射就可以了。</router-view></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221540662.png" alt="image-20200923221540662"></p><p>配置解析：<code>我们在routes中又配置了一个映射。path配置的是根路径: /</code><br><code>redirect是重定向, 也就是我们将根路径重定向到/home的路径下, 这样就可以得到我们想要的结果了.</code></p><h4 id="HTML5的History模式"><a href="#HTML5的History模式" class="headerlink" title="HTML5的History模式"></a>HTML5的History模式</h4><p>我们前面说过改变路径的方式有两种:</p><ul><li>URL的hash</li><li>HTML5的history</li></ul><p>默认情况下, 路径的改变使用的URL的hash。如果希望使用HTML5的history模式, 非常简单, 进行如下配置即可:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221701111.png" alt="image-20200923221701111"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221706520.png" alt="image-20200923221706520"></p><h4 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h4><p>在前面的<router-link>中, 我们只是使用了一个属性: to, 用于指定跳转的路径.<br><router-link>还有一些其他属性:</router-link></router-link></p><ul><li>tag: tag可以指定<router-link>之后渲染成什么组件, 比如上面的代码会被渲染成一个</router-link></li><li>元素, 而不是<a></a></li><a><li>replace: replace不会留下history记录, <code>所以指定replace的情况下, 后退键返回不能返回到上一个页面中</code></li><li>active-class: 当<router-link>对应的路由匹配成功时, 会自动给当前元素设置一个router-link-active 的 class, 设置active-class可以修改默认的名称。在进行高亮显示的导航菜单或者底部tabbar时, 会使用到该类。但是通常不会修改类的属性, 会直接使用默认的router-link-active即可. </router-link></li></a></ul><a><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221930141.png" alt="image-20200923221930141"></p></a><h5 id="修改linkActiveClass"><a></a><a href="#修改linkActiveClass" class="headerlink" title="修改linkActiveClass"></a>修改linkActiveClass</h5><p>该class具体的名称也可以通过router实例的属性进行修改 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222013970.png" alt="image-20200923222013970"></p><h4 id="路由代码跳转"><a href="#路由代码跳转" class="headerlink" title="路由代码跳转"></a>路由代码跳转</h4><p>有时候, 页面的跳转可能需要执行对应的JavaScript代码, 这个时候, 就可以使用第二种跳转方式了<br>比如, 我们将代码修改如下: </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222228304.png" alt="image-20200923222228304"></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望是如下的路径：</p><p><code>/user/aaaa或/user/bbbb</code></p><p>除了有前面的/user之外，后面还跟上了用户的ID</p><p>这种path和Component的匹配关系，<code>我们称之为动态路由(也是路由传递数据的一种方式)。</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222338914.png" alt="image-20200923222338914"></p><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>官方给出了解释：<code>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。</code><br><code>如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</code><br>官方在说什么呢?<br>首先, 我们知道路由中通常会定义很多不同的页面。这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.</p><p>但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大。</p><p>如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.</p><p>如何避免这种情况呢? 使用路由懒加载就可以了.</p><p>路由懒加载做了什么?</p><p>路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块。只有在这个路由被访问到的时候, 才加载对应的组件。</p><h4 id="懒加载的实现"><a href="#懒加载的实现" class="headerlink" title="懒加载的实现"></a>懒加载的实现</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222609010.png" alt="image-20200923222609010"></p><h4 id="懒加载的方式"><a href="#懒加载的方式" class="headerlink" title="懒加载的方式"></a>懒加载的方式</h4><ol><li><p>结合Vue的异步组件和Webpack的代码分析.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">resolve</span> =&gt;</span> { <span class="built_in">require</span>.ensure([<span class="string">'../components/Home.vue'</span>], <span class="function">() =&gt;</span> { resolve(<span class="built_in">require</span>(<span class="string">'../components/Home.vue'</span>)) })};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>AMD写法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/About.vue'</span>], resolve);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>在ES6中, 我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Home.vue'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><h4 id="认识嵌套路由"><a href="#认识嵌套路由" class="headerlink" title="认识嵌套路由"></a>认识嵌套路由</h4><p>嵌套路由是一个很常见的功能。比如在home页面中, 我们希望通过/home/news和/home/message访问一些内容.</p><p>一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件。路径和组件的关系如下:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222909623.png" alt="image-20200923222909623"></p><p>实现嵌套路由有两个步骤:</p><ol><li>创建对应的子组件, 并且在路由映射中配置对应的子路由.</li><li>在组件内部使用<router-view>标签.</router-view></li></ol><h4 id="嵌套路由的实现"><a href="#嵌套路由的实现" class="headerlink" title="嵌套路由的实现"></a>嵌套路由的实现</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223014241.png" alt="image-20200923223014241"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223026910.png" alt="image-20200923223026910"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223036217.png" alt="image-20200923223036217"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223046378.png" alt="image-20200923223046378"></p><h4 id="嵌套默认路径"><a href="#嵌套默认路径" class="headerlink" title="嵌套默认路径"></a>嵌套默认路径</h4><p>嵌套路由也可以配置默认的路径, 配置方式如下: </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223136320.png" alt="image-20200923223136320"></p><h3 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h3><p>为了演示传递参数, 我们这里再创建一个组件, 并且将其配置好</p><ol><li>创建新的组件Profile.vue </li><li>配置路由映射 </li><li>添加跳转的<router-link> </router-link></li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223252508.png" alt="image-20200923223252508"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223303292.png" alt="image-20200923223303292"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223310568.png" alt="image-20200923223310568"></p><h4 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h4><p>传递参数主要有两种类型: params和query</p><ul><li><p>params的类型：配置路由格式: /router/:id。</p><p>传递的方式: 在path后面跟上对应的值</p><p>传递后形成的路径: /router/123, /router/abc</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223510447.png" alt="image-20200923223510447"></p><p>获取参数通过$route对象获取的。在使用了 vue-router 的应用中，路由对象会被注入每个组件中，赋值为 this.$route ，并且当路由切换时，路由对象会被更新。通过$route获取传递的信息如下:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223541240.png" alt="image-20200923223541240"></p></li><li><p>query的类型：配置路由格式: /router, 也就是普通配置</p><p>传递的方式: 对象中使用query的key作为传递方式</p><p>传递后形成的路径: /router?id=123, /router?id=abc</p></li></ul><p>注意：<code>$route和$router是有区别的</code></p><p>$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法</p><p>$route为当前router跳转对象里面可以获取name、path、query、params等 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223639810.png" alt="image-20200923223639810"></p><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>我们来考虑一个需求: <code>在一个SPA应用中, 如何改变网页的标题呢?</code></p><p>网页标题是通过<title>来显示的, 但是SPA只有一个固定的HTML, 切换不同的页面时, 标题并不会改变.&lt;/p&gt;&lt;p&gt;但是我们可以通过JavaScript来修改&lt;title&gt;的内容.window.document.title = ‘新的标题’.&lt;/p&gt;&lt;p&gt;那么在Vue项目中, 在哪里修改? 什么时候修改比较合适呢?&lt;/p&gt;&lt;p&gt;&lt;code&gt;普通的修改方式：我们比较容易想到的修改标题的位置是每一个路由对应的组件.vue文件中.&lt;/code&gt;&lt;br&gt;&lt;code&gt;通过mounted声明周期函数, 执行对应的代码进行修改即可.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;但是当页面比较多时, 这种方式不容易维护(因为需要在多个页面执行类似的代码).&lt;br&gt;有没有更好的办法呢? 使用导航守卫即可。&lt;/p&gt;&lt;p&gt;什么是导航守卫?&lt;br&gt;vue-router 提供的导航守卫&lt;code&gt;主要用来监听监听路由的进入和离开的.&lt;/code&gt;&lt;br&gt;vue-router 提供了&lt;code&gt;beforeEach和afterEach的钩子函数, 它们会在路由即将改变前和改变后触发.&lt;/code&gt;&lt;/p&gt;&lt;h4 id="导航守卫的使用"&gt;&lt;a href="#导航守卫的使用" class="headerlink" title="导航守卫的使用"&gt;&lt;/a&gt;导航守卫的使用&lt;/h4&gt;&lt;p&gt;我们可以利用beforeEach来完成标题的修改.&lt;/p&gt;&lt;p&gt;首先, 我们可以在钩子当中定义一些标题, 可以利用meta来定义&lt;/p&gt;&lt;p&gt;其次, 利用导航守卫,修改我们的标题.&lt;/p&gt;&lt;p&gt;导航钩子的三个参数解析:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;to: 即将要进入的目标的路由对象.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;from: 当前导航即将要离开的路由对象.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;next: 调用该方法后, 才能进入下一个钩子.&lt;/p&gt;&lt;p&gt;&lt;img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.sky123.top/img/image-20200923223934004.png"                      alt="image-20200923223934004"                &gt;&lt;/p&gt;&lt;p&gt;&lt;img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.sky123.top/img/image-20200923223940612.png"                      alt="image-20200923223940612"                &gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id="导航守卫的补充"&gt;&lt;a href="#导航守卫的补充" class="headerlink" title="导航守卫的补充"&gt;&lt;/a&gt;导航守卫的补充&lt;/h4&gt;&lt;p&gt;补充一：如果是后置钩子, 也就是afterEach, 不需要主动调用next()函数.&lt;br&gt;补充二：上面我们使用的导航守卫, 被称之为全局守卫.&lt;/p&gt;&lt;p&gt;更多内容, 可以查看官网进行学习:&lt;br&gt;&lt;a class="link"   href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB" &gt;https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB&lt;i class="fas fa-external-link-alt"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id="keep-alive"&gt;&lt;a href="#keep-alive" class="headerlink" title="keep-alive"&gt;&lt;/a&gt;keep-alive&lt;/h3&gt;&lt;p&gt;keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。&lt;br&gt;它们有两个非常重要的属性:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;include - 字符串或正则表达，只有匹配的组件会被缓存&lt;/li&gt;&lt;li&gt;exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：&lt;/p&gt;&lt;p&gt;&lt;img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.sky123.top/img/image-20200923224116134.png"                      alt="image-20200923224116134"                &gt;&lt;/p&gt;&lt;p&gt;通过create声明周期函数来验证&lt;/p&gt;</title></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记05-vue-router&quot;&gt;&lt;a href=&quot;#vue学习笔记05-vue-router&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记05-vue-router&quot;&gt;&lt;/a&gt;vue学习笔记05-vue-router&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记04-前端模块化和vueCli的使用</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8CVueCLI%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8CVueCLI%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-04T20:45:01.000Z</published>
    <updated>2021-02-26T15:06:13.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记04-前端模块化和vueCli的使用"><a href="#vue学习笔记04-前端模块化和vueCli的使用" class="headerlink" title="vue学习笔记04-前端模块化和vueCli的使用"></a>vue学习笔记04-前端模块化和vueCli的使用</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sunset-675847_1280.jpg"></p><hr><h1 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h1><h2 id="为什么需要模块化？"><a href="#为什么需要模块化？" class="headerlink" title="为什么需要模块化？"></a>为什么需要模块化？</h2><h3 id="js原生功能带来的各种问题"><a href="#js原生功能带来的各种问题" class="headerlink" title="js原生功能带来的各种问题"></a>js原生功能带来的各种问题</h3><p>在网页开发的早期，js制作作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的。那个时候的代码是怎么写的呢？直接将代码写在 <code>&lt;script&gt;</code> 标签中即可。随着ajax异步请求的出现，慢慢形成了前后端的分离<br>客户端需要完成的事情越来越多，代码量也是与日俱增。为了应对代码量的剧增，我们通常会将代码组织在多个js文件中，进行维护。但是这种维护方式，依然不能避免一些灾难性的问题。</p><ol><li>比如<code>全局变量同名</code>问题：看下边的例子。<code>小明后来发现代码不能正常运行，去检查自己的变量，发现确实true</code><br><code>最后杯具发生了，小明加班到2点还是没有找到问题出在哪里(所以，某些加班真的是无意义的)</code></li><li>另外，<code>这种代码的编写方式对js文件的依赖顺序几乎是强制性的</code>。但是当js文件过多，比如有几十个的时候，弄清楚它们的顺序是一件比较同时的事情。且即使你弄清楚顺序了，也不能避免上面出现的这种尴尬问题的发生。</li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808122843314.png" alt="image-20200808122843314"></p><h3 id="匿名函数的解决方案"><a href="#匿名函数的解决方案" class="headerlink" title="匿名函数的解决方案"></a>匿名函数的解决方案</h3><p>我们可以使用匿名函数来解决方面的重名问题。在aaa.js文件中，我们使用匿名函数</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123048497.png" alt="image-20200808123048497"></p><p>但是如果我们希望在main.js文件中，用到flag，应该如何处理呢？显然，另外一个文件中不容易使用，因为flag是一个局部变量。</p><h3 id="模块化的解决方案"><a href="#模块化的解决方案" class="headerlink" title="模块化的解决方案"></a>模块化的解决方案</h3><p>我们可以使用将需要暴露到外面的变量，使用一个模块作为出口，什么意思呢？来看下对应的代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123210671.png" alt="image-20200808123210671">非常简单，在匿名函数内部，定义一个对象。</p><p>给对象添加各种需要暴露到外面的属性和方法(不需要暴露的直接定义即可)。</p><blockquote><p>最后将这个对象返回，并且在外面使用了一个MoudleA接受。接下来，我们在man.js中怎么使用呢？我们只需要使用属于自己模块的属性和方法即可。<br>这就是模块最基础的封装，事实上模块的封装还有很多高级的话题：但是我们这里就是要认识一下为什么需要模块，以及模块的原始雏形。幸运的是，前端模块化开发已经有了很多既有的规范，以及对应的实现方案。</p></blockquote><p><code>常见的模块化规范：</code><br><code>CommonJS、AMD、CMD，也有ES6的Modules</code></p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p><code>模块化有两个核心：导出和导入</code><br>CommonJS的导出：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123345858.png" alt="image-20200808123345858"></p><p>CommonJS的导入</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123350759.png" alt="image-20200808123350759"></p><h2 id="ES6的Modules"><a href="#ES6的Modules" class="headerlink" title="ES6的Modules"></a>ES6的Modules</h2><h3 id="export基本使用"><a href="#export基本使用" class="headerlink" title="export基本使用"></a>export基本使用</h3><p>export指令用于导出变量，比如下面的代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123448500.png" alt="image-20200808123448500"></p><p>上面的代码还有另外一种写法：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123453884.png" alt="image-20200808123453884"></p><p>上面我们主要是输出变量，<code>也可以输出函数或者输出类</code><br>上面的代码也可以写成这种形式：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123558628.png" alt="image-20200808123558628"></p><p>某些情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且<code>让导入者可以自己来命名</code><br>这个时候就可以使用export default</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123623210.png" alt="image-20200808123623210"></p><p>我们来到main.js中，这样使用就可以了<br>这里的myFunc是我自己命名的，你可以根据需要命名它对应的名字</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123636533.png" alt="image-20200808123636533"></p><p>另外，需要注意：<code>export default在同一个模块中，不允许同时存在多个。</code></p><h3 id="import使用"><a href="#import使用" class="headerlink" title="import使用"></a>import使用</h3><p>我们使用export指令导出了模块对外提供的接口，下面我们就可以通过import命令来加载对应的这个模块了<br>首先，<code>我们需要在HTML代码中引入两个js文件，并且类型需要设置为module</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123756542.png" alt="image-20200808123756542"></p><p>import 指令用于导入模块中的内容，比如 main.js 的代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123803004.png" alt="image-20200808123803004"></p><p><code>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦：通过*可以导入模块中所有的export变量 但是通常情况下我们需要给*起一个别名，方便后续的使用</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123807955.png" alt="image-20200808123807955"></p><h1 id="Vue-CLI相关"><a href="#Vue-CLI相关" class="headerlink" title="Vue CLI相关"></a>Vue CLI相关</h1><p>如果你只是简单写几个Vue的Demo程序, 那么你不需要Vue CLI。</p><p>如果你在开发大型项目, 那么你需要, 并且必然需要使用Vue CLI。</p><p>使用Vue.js开发大型应用时，我们需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情。</p><p>如果每个项目都要手动完成这些工作，那无以效率比较低效，所以通常我们会使用一些脚手架工具来帮助完成这些事情。</p><p>CLI是什么意思?<br><code>CLI是Command-Line Interface,</code> 翻译为命令行界面, 但是俗称脚手架。Vue CLI是一个官方发布 vue.js 项目脚手架</p><p>使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置</p><h2 id="Vue-CLI使用前提-Node"><a href="#Vue-CLI使用前提-Node" class="headerlink" title="Vue CLI使用前提 - Node"></a>Vue CLI使用前提 - Node</h2><h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><p>可以直接在官方网站中下载安装.<br>网址: <a class="link" href="http://nodejs.cn/download/">http://nodejs.cn/download/<i class="fas fa-external-link-alt"></i></a><br>检测安装的版本</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916164951331.png" alt="image-20200916164951331"></p><p>默认情况下自动安装Node和NPM</p><p>Node环境要求8.9以上或者更高版本</p><p>什么是NPM呢?<br><code>NPM的全称是Node Package Manager。是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。后续我们会经常使用NPM来安装一些开发过程中依赖包.</code></p><h3 id="cnpm安装"><a href="#cnpm安装" class="headerlink" title="cnpm安装"></a>cnpm安装</h3><p>由于国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p><p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>这样就可以使用 cnpm 命令来安装模块了：</p><p><code>cnpm install [name]</code></p><h2 id="Vue-CLI使用前提-Webpack"><a href="#Vue-CLI使用前提-Webpack" class="headerlink" title="Vue CLI使用前提 - Webpack"></a>Vue CLI使用前提 - Webpack</h2><p>Vue.js官方脚手架工具就使用了webpack模板。对所有的资源会压缩等优化操作。它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效。Webpack的全局安装</p><p><code>npm install webpack -g</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916165156206.png" alt="image-20200916165156206"></p><h2 id="Vue-CLI的使用"><a href="#Vue-CLI的使用" class="headerlink" title="Vue CLI的使用"></a>Vue CLI的使用</h2><p>安装Vue脚手架<br><code>npm install -g @vue/cli</code></p><p>注意：上面安装的是Vue CLI3的版本，如果需要想按照Vue CLI2的方式初始化项目时不可以的。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916165258454.png" alt="image-20200916165258454"></p><p>Vue CLI2初始化项目<br><code>vue init webpack my-project</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916165316533.png" alt="image-20200916165316533"></p><p>Vue CLI3初始化项目<br><code>vue create my-project</code></p><h2 id="VueCLI4的使用和配置"><a href="#VueCLI4的使用和配置" class="headerlink" title="VueCLI4的使用和配置"></a>VueCLI4的使用和配置</h2><p>一般喜欢用 test、preview、production分别表示测试，预览，生产三种环境。修改 package.json 文件如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line"></span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"vue-cli-service build --mode test"</span>,           <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"preview"</span>: <span class="string">"vue-cli-service build --mode preview"</span>,     <span class="comment">//预览</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vue-cli-service build --mode production"</span>,    <span class="comment">//生产</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"vue-cli-service lint"</span></span><br><span class="line"></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><code>在项目根目录下新建 .env.test、.env.preview、 .env.production 文件，分别对应三个环境的配置文件，注意，名字要与 --mode 后面的名字分别对应</code></p><p>.env.test 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"test"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"测试环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>.env.pre 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"preview"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"预览环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>.env.prod 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"production"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"生产环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>ok，这样环境就配置好了，分别用以下命令来打包不同环境的包就可以了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run test    <span class="comment">//测试</span></span><br><span class="line">npm run pre     <span class="comment">//预发布</span></span><br><span class="line">npm run prod    <span class="comment">//生产</span></span><br></pre></td></tr></tbody></table></figure><p>另外需要说明一点的是，本地环境会默认从 .env.development 文件中读取配置。所以记得有需要记得新建一个然后存放配置。我的 .env.development 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"development"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"本地环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>从 vue-cli3.0 开始 build 和 config 目录就取消了，如果需要修改配置，可以在项目的根目录新建一个 vue.config.js 文件来覆盖项目的配置，因为项目的配置比较多，这里就不分别介绍了，可以 <a class="link" href="https://cli.vuejs.org/zh/config/#vue-config-js">访问官方文档<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记04-前端模块化和vueCli的使用&quot;&gt;&lt;a href=&quot;#vue学习笔记04-前端模块化和vueCli的使用&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记04-前端模块化和vueCli的使用&quot;&gt;&lt;/a&gt;vue学习笔记04-前</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
