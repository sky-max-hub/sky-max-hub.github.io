<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.sky123.top/atom.xml" rel="self"/>
  
  <link href="http://blog.sky123.top/"/>
  <updated>2021-05-21T04:26:21.184Z</updated>
  <id>http://blog.sky123.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker可视化工具</title>
    <link href="http://blog.sky123.top/2021/05/14/docker/Docker04%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    <id>http://blog.sky123.top/2021/05/14/docker/Docker04%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/</id>
    <published>2021-05-13T16:00:00.000Z</published>
    <updated>2021-05-21T04:26:21.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Portainer">Portainer</h2><p>Docker 图形化界面管理工具，提供一个后台面板供我们操作！</p><figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">8080</span>:<span class="number">9000</span> \</span><br><span class="line">-<span class="literal">-restart</span>=always <span class="literal">-v</span> /var/run/docker.sock:/var/run/docker.sock -<span class="literal">-privileged</span>=true portainer/portainer</span><br></pre></td></tr></tbody></table></figure><p>访问测试：<a class="link" href="http://ip:8080/">http://ip:8080/<i class="fas fa-external-link-alt"></i></a> (可视化面板一般不使用，测试时使用)（注意一定要先在阿里云安全组防火墙配置中开放端口）：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512111853677.png" alt="image-20210512111853677"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512111931325.png" alt="image-20210512111931325"></p><p>创建用户后可以看到：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512112815070.png" alt="image-20210512112815070"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210512112854757.png" alt="image-20210512112854757"></p><h2 id="Rancher（CI-CD再用）">Rancher（CI/CD再用）</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Portainer&quot;&gt;Portainer&lt;/h2&gt;
&lt;p&gt;Docker 图形化界面管理工具，提供一个后台面板供我们操作！&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;c</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker镜像</title>
    <link href="http://blog.sky123.top/2021/05/14/docker/Docker05%E9%95%9C%E5%83%8F/"/>
    <id>http://blog.sky123.top/2021/05/14/docker/Docker05%E9%95%9C%E5%83%8F/</id>
    <published>2021-05-13T16:00:00.000Z</published>
    <updated>2021-05-21T02:40:02.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像是什么？">镜像是什么？</h2><p>镜像是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码，运行时库，环境变量和配置文件。</p><h3 id="如何获得镜像">如何获得镜像</h3><ul><li>从远程仓库下载</li><li>朋友拷贝给你</li><li>自己制作一个镜像 <code>Dockerfile</code></li></ul><h3 id="UnionFS（联合文件系统）">UnionFS（联合文件系统）</h3><p><code>Docker</code>的镜像实际上由一层一层的文件系统组成，这种层级的文件系统<code>UnionFS</code>。</p><p>这是一种分层，轻量级且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（ <code>Unite several directories into a single virtual filesystem</code> ）。<code>Union文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像。</code></p><h3 id="Docker镜像加载原理">Docker镜像加载原理</h3><p><code>bootfs(boot file system)</code>主要包含<code>bootloader</code>和<code>kernel</code>，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的, 包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514101219281.png" alt="image-20210514101219281" style="zoom: 50%;"><p><code>rootfs(root file system)</code> 在bootfs之上。包含的就是典型Linux系统中的<code>/dev, /proc, /bin, /etc等标准目录和文件</code>。<code>rootfs</code>就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514100545302.png" alt="image-20210514100545302"></p><h3 id="镜像分层下载优点">镜像分层下载优点</h3><ul><li>可以精简镜像文件的大小，对于一个OS，rootfs可以很小，需要包含最基本的命令，工具库和程序库即可，因为底层直接使用 Host 和 kernel，自己只需要提供 rootfs即可，由此对于不同的 Linux 发行版本，bootfs基本是一致的。</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514101442249.png" alt="image-20210514101442249"></p><ul><li>资源共享，比如又多个镜像从相同的 base 镜像构建而来，主机只要在磁盘上保存一份 base 镜像，同时内存也只需加载一份 base 镜像即可为所有的容器服务了，而且镜像的每一层都能被共享。</li></ul><h3 id="Docker-镜像理解">Docker 镜像理解</h3><ol><li><p>所有的镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，都会在当前镜像层上创建新的镜像层。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514103234209.png" alt=""></p></li><li><p>创建新的镜像层时，镜像始终是当前所有镜像的组合</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514103159914.png" alt="image-20210514103159914"></p></li><li><p>上层镜像层的文件要覆盖底层镜像层的文件时，会使得文件的更新版本作为一个新的镜像层添加到镜像中。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514103823330.png" alt="image-20210514103823330" style="zoom:80%;"></li><li><p>所有镜像层堆叠并合并，对外提供统一的视图</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514104009648.png" alt="image-20210514104009648"></p></li><li><p>Docker 镜像都是只读的，当容器启动时，一个新的可写层会被加载到镜像的顶部。（这一层称为 <code>容器层</code>，容器之下的都叫 <code>镜像层</code>）。</p></li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210514102529830.png" alt="image-20210514102529830"></p><h3 id="commit镜像">commit镜像</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker commit -m=<span class="string">"提交的描述信息"</span> -a=<span class="string">"作者"</span> 容器ID 目标镜像名:[tag]</span></span><br></pre></td></tr></tbody></table></figure><p>参考教程：<a href="https://blog.sky123.top/2021/05/04/docker/Docker03%E9%83%A8%E7%BD%B2%E7%BB%83%E4%B9%A0/">Tomcat 部署练习</a></p><p>发现：官方的默认 tomcat 的 <code>webapp文件夹</code> 并没有一些文件，需要自己手动拷贝。</p><p>解决：将我们操作国的容器 <code>commit</code> 提交成一个新的镜像，我们以后就直接使用我们修改过的镜像即可。</p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">39f11d68d64d   tomcat    <span class="string">"catalina.sh run"</span>   18 minutes ago   Up 18 minutes   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker commit -m="这个修改了的tomcat" -a="zhang" 39f11d68d64d modified_tomcat:1.1</span></span><br><span class="line">sha256:57cab5f1479d5c0c6f85ba59415b8c7e9563d9907d32fc5d61a54a74945e57e7</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">modified_tomcat       1.1       57cab5f1479d   7 seconds ago   672MB</span><br><span class="line">tomcat                latest    c0e850d7b9bb   3 weeks ago     667MB</span><br><span class="line">nginx                 latest    62d49f9bab67   4 weeks ago     133MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   8 weeks ago     79.1MB</span><br><span class="line">centos                latest    300e315adb2f   5 months ago    209MB</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：如果想保存当前容器的状态，可以通过 commit 来提交，获得一个镜像。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;镜像是什么？&quot;&gt;镜像是什么？&lt;/h2&gt;
&lt;p&gt;镜像是一种轻量级，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码，运行时库，环境变量和配置文件。&lt;/p&gt;
&lt;h3 id=&quot;如何获得镜像&quot;&gt;如何获得镜像&lt;/h</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://blog.sky123.top/2021/05/04/docker/Docker02%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.sky123.top/2021/05/04/docker/Docker02%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-11T05:45:13.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="帮助命令：">帮助命令：</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示版本</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker version</span><br><span class="line"></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.6</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        370c289</span><br><span class="line"> Built:             Fri Apr  9 22:45:33 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.6</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       8728dd2</span><br><span class="line">  Built:            Fri Apr  9 22:43:57 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.4</span><br><span class="line">  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc93</span><br><span class="line">  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示Docker的系统信息</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker info</span><br><span class="line"></span><br><span class="line">Client:</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Plugins:</span><br><span class="line">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class="line">  buildx: Build with BuildKit (Docker Inc., v0.5.1-docker)</span><br><span class="line">  scan: Docker Scan (Docker Inc.)</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 1</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 1</span><br><span class="line"> Images: 1</span><br><span class="line"> Server Version: 20.10.6</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Native Overlay Diff: false</span><br><span class="line">  userxattr: false</span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: 05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class="line"> runc version: 12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class="line"> init version: de40ad0</span><br><span class="line"> Security Options:</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 3.10.0-514.26.2.el7.x86_64</span><br><span class="line"> Operating System: CentOS Linux 7 (Core)</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 1</span><br><span class="line"> Total Memory: 1.796GiB</span><br><span class="line"> Name: izwz91mv6i3x6k12jjqh60z</span><br><span class="line"> ID: KA6F:5IVG:6OGX:WPVP:I74K:PAUV:EI5L:SGYK:3GRQ:E3DA:FVTQ:X4BM</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Registry Mirrors:</span><br><span class="line">  https://bjyjzfeq.mirror.aliyuncs.com/</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">帮助信息</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker --help</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach     #当前shell下 attach连接指定运行镜像</span><br><span class="line">  build      #通过dokcerfile 定制镜像 </span><br><span class="line">  commit     #提交当前容器为新的镜像</span><br><span class="line">  cp         #从容器中拷贝指定文件或目录到宿主机</span><br><span class="line">  create     #创建一个新的容器 ，同 run ，但不会启动容器</span><br><span class="line">  diff       #查看docker 容器变化</span><br><span class="line">  events     #从docker服务器获取容器实时事件</span><br><span class="line">  exec       #在已存在的容器上运行命令</span><br><span class="line">  export     #导出容器的内容流作为一个 tar 归档文件（对应 import）</span><br><span class="line">  history    #展示镜像的形成历史</span><br><span class="line">  images     #列出系统当前所有镜像</span><br><span class="line">  import     #从 tar 包中的内容创建一个新的文件系统映像（对应 export）</span><br><span class="line">  info       #查看系统相关信息</span><br><span class="line">  inspect    #查看容器详细信息</span><br><span class="line">  kill       #kill 指定的 docker 容器</span><br><span class="line">  load       #从一个 tar包中加载一个镜像（对应save）</span><br><span class="line">  login      #注册或登陆一个docker 源服务器</span><br><span class="line">  logout     #登出当前源服务器</span><br><span class="line">  logs       #输出当前容器的日志内容</span><br><span class="line">  pause      #暂停容器</span><br><span class="line">  port       #查看映射端口对应的容器内部源端口</span><br><span class="line">  ps         #列出容器列表</span><br><span class="line">  pull       #从docker镜像源服务器拉取指定镜像或库镜像</span><br><span class="line">  push       #推送指定镜像或者库镜像到 docker 源服务器</span><br><span class="line">  rename     #</span><br><span class="line">  restart    #重启运行的容器</span><br><span class="line">  rm         #移除一个或多个容器</span><br><span class="line">  rmi        #移除一个或多个镜像</span><br><span class="line">  run        #创建一个新的容器并运行一个命令</span><br><span class="line">  save       #保存一个镜像为一个 tar (对应load)</span><br><span class="line">  search     #在docker hub中搜索镜像</span><br><span class="line">  start      #启动容器</span><br><span class="line">  stop       #停止容器</span><br><span class="line">  tag        #给源镜像打标签</span><br><span class="line">  top        #查看容器中运行的进程消息</span><br><span class="line">  unpause    #取消暂停容器</span><br><span class="line">  version    #查看容器版本号</span><br><span class="line">  wait       #获取容器停止时的退出状态值</span><br></pre></td></tr></tbody></table></figure><h3 id="镜像命令：">镜像命令：</h3><h4 id="docker-images">docker images</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主机上的所有本地镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker images help</span><br><span class="line"><span class="meta">#</span><span class="bash">解释</span></span><br><span class="line">REPOSITORY：镜像的仓库源   </span><br><span class="line">TAG：镜像的标签</span><br><span class="line">IMAGE ID：镜像的ID   </span><br><span class="line">CREATED：创建时间   </span><br><span class="line">SIZE：大小</span><br><span class="line"><span class="meta">#</span><span class="bash">可选项</span></span><br><span class="line">-a   --all #列出所有镜像</span><br><span class="line">-q   --quiet #只列出镜像的ID</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world   latest    d1165f221234   7 weeks ago   13.3kB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="docker-search">docker search</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">搜索镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker search mysql</span><br><span class="line"></span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   10777     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4058      [OK] </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">搜索镜像的 star&gt;3000 的镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker search mysql --filter=stars=3000</span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   10777     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4058      [OK]   </span><br></pre></td></tr></tbody></table></figure><h4 id="docker-pull">docker pull</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 [:tag]</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker pull mysql</span><br><span class="line">Using default tag: latest  # 不写tag 默认就是 latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">f7ec5a41d630: Pull complete #分层下载， docker image的核心，联合文件系统</span><br><span class="line">9444bb562699: Pull complete </span><br><span class="line">6a4207b96940: Pull complete </span><br><span class="line">181cefd361ce: Pull complete </span><br><span class="line">8a2090759d8a: Pull complete </span><br><span class="line">15f235e0d7ee: Pull complete </span><br><span class="line">d870539cd9db: Pull complete </span><br><span class="line">493aaa84617a: Pull complete </span><br><span class="line">bfc0e534fc78: Pull complete </span><br><span class="line">fae20d253f9d: Pull complete </span><br><span class="line">9350664305b3: Pull complete </span><br><span class="line">e47da95a5aab: Pull complete </span><br><span class="line">Digest: sha256:04ee7141256e83797ea4a84a4d31b1f1bc10111c8d1bc1879d52729ccd19e20a #文件签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest #存放的镜像的文件真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">等价写法</span></span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定版本下载</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">f7ec5a41d630: Already exists </span><br><span class="line">9444bb562699: Already exists </span><br><span class="line">6a4207b96940: Already exists </span><br><span class="line">181cefd361ce: Already exists </span><br><span class="line">8a2090759d8a: Already exists </span><br><span class="line">15f235e0d7ee: Already exists </span><br><span class="line">d870539cd9db: Already exists </span><br><span class="line">cb7af63cbefa: Pull complete </span><br><span class="line">151f1721bdbf: Pull complete </span><br><span class="line">fcd19c3dd488: Pull complete </span><br><span class="line">415af2aa5ddc: Pull complete </span><br><span class="line">Digest: sha256:a655529fdfcbaf0ef28984d68a3e21778e061c886ff458b677391924f62fb457</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">mysql         5.7       87eca374c0ed   8 days ago    447MB</span><br><span class="line">mysql         latest    0627ec6901db   8 days ago    556MB</span><br><span class="line">hello-world   latest    d1165f221234   7 weeks ago   13.3kB</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="docker-rmi">docker rmi</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rmi 镜像ID [镜像ID,...]   删除没有运行容器的镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker rmi 0627ec6901db</span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:04ee7141256e83797ea4a84a4d31b1f1bc10111c8d1bc1879d52729ccd19e20a</span><br><span class="line">Deleted: sha256:0627ec6901db4b2aed6ca7ab35e43e19838ba079fffe8fe1be66b6feaad694de</span><br><span class="line">Deleted: sha256:94d5db550d62032ddc8ad8d4cfef8bac06fe7d35757deb2f8638d0fdc1e89217</span><br><span class="line">Deleted: sha256:5fbbb0e9bfb8f2a4d665cc60aaf4876191c057898db276d2d030a0d6123afc8e</span><br><span class="line">Deleted: sha256:124a9d262ebecea284b6438b0a04766b076bd3f89cb0f29a8a475f26bf93911f</span><br><span class="line">Deleted: sha256:5aa37b6c8e31197ab2f357c09755bcb83228ff0fb69c2009a12b6eddb087e884</span><br><span class="line">Deleted: sha256:d0b1d5665c308823bbc5b8986d405e5202ade6994dfa00d8ff576eff372dd045</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rmi -f 镜像ID [镜像ID,...]  删除连带删除容器的镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker rmi -f d1165f221234</span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:f2266cbfc127c960fd30e76b7c792dc23b588c0db76233517e1891a4e357d519</span><br><span class="line">Deleted: sha256:d1165f2212346b2bab48cb01c1e39ee8ad1be46b87873d9ca7a4e434980a7726</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">docker rmi -f $(docker images -aq)  删除所有容器和镜像</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="容器命令：">容器命令：</h3><p>前置环境，下载一个  <code>centos</code> 镜像</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">7a0437f04f83: Pull complete </span><br><span class="line">Digest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br></pre></td></tr></tbody></table></figure><h4 id="新建并运行容器：">新建并运行容器：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run --help</span><br><span class="line"></span><br><span class="line">Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">  -d                        以后台方式运行，并打印容器ID</span><br><span class="line">  --name=“string”                容器名字用于区分容器，</span><br><span class="line">  -p 指定容器的端口（设置主机和容器的端口映射）</span><br><span class="line">  -p ip:主机端口:容器端口（访问公网主机的端口可以访问到容器内容的端口）</span><br><span class="line">  -p 主机端口:容器端口</span><br><span class="line">  -p 容器端口</span><br><span class="line">  -P                     随机指定端口</span><br><span class="line">  -it        使用交互方式运行，进入容器内查看内容</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -it centos /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">容器内的centos ,发现很多命令并不完善</span></span><br><span class="line">[root@e77313cc0ef1 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta">#</span><span class="bash">从容器中退出到主机</span></span><br><span class="line">[root@e77313cc0ef1 /]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash">主机的centos</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# ls</span><br><span class="line">docker-client  docker-client-latest  docker-common  docker-engine  docker-latest  docker-latest-logrotate  docker-logrotate</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="列出所有运行的容器：">列出所有运行的容器：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line">-q 只显示容器编号</span><br><span class="line">-a 列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=? 显示最近创建的容器的个数</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">e77313cc0ef1   centos         "/bin/bash"   3 minutes ago   Exited (0) 2 minutes ago             romantic_elgamal</span><br><span class="line">17d31c5f5553   centos         "/bin/bash"   9 minutes ago   Exited (0) 9 minutes ago             os1</span><br><span class="line">19d5eac5de11   d1165f221234   "/hello"      3 hours ago     Exited (0) 3 hours ago               naughty_williams</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps -n=2</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">e77313cc0ef1   centos    "/bin/bash"   11 minutes ago   Exited (0) 9 minutes ago              romantic_elgamal</span><br><span class="line">17d31c5f5553   centos    "/bin/bash"   16 minutes ago   Exited (0) 16 minutes ago             os1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="退出容器：">退出容器：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">exit #直接容器停止并退出</span><br><span class="line">Ctrl + P + Q #容器不停止而退出</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -it centos /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器后按住快捷键</span></span><br><span class="line">[root@f3a97eadb092 /]# </span><br><span class="line"><span class="meta">#</span><span class="bash">发现返回了主机</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# </span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos    "/bin/bash"   28 seconds ago   Up 27 seconds             thirsty_pasteur</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="删除容器：">删除容器：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker rm [-f] 容器ID #删除指定的容器，rm -f 表示强制删除正在运行的容器</span><br><span class="line">docker rm -f $(docker ps -aq) #删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm #删除所有容器</span><br></pre></td></tr></tbody></table></figure><h4 id="启动和停止容器：">启动和停止容器：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker start 容器ID  #启动容器</span><br><span class="line">docker restart 容器ID #重启容器</span><br><span class="line">docker stop 容器ID #停止正在运行的容器</span><br><span class="line">docker kill 容器ID #强制停止当前运行的容器</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos    "/bin/bash"   28 seconds ago   Up 27 seconds             thirsty_pasteur</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker stop f3a97eadb092</span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker start f3a97eadb092</span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker restart f3a97eadb092</span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker kill  f3a97eadb092</span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos         "/bin/bash"   12 minutes ago   Exited (137) 5 seconds ago             thirsty_pasteur</span><br><span class="line">e77313cc0ef1   centos         "/bin/bash"   25 minutes ago   Exited (0) 23 minutes ago              romantic_elgamal</span><br><span class="line">17d31c5f5553   centos         "/bin/bash"   30 minutes ago   Exited (0) 30 minutes ago              os1</span><br><span class="line">19d5eac5de11   d1165f221234   "/hello"      4 hours ago      Exited (0) 4 hours ago                 naughty_williams</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker start f3a97eadb092</span><br><span class="line">f3a97eadb092</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS         PORTS     NAMES</span><br><span class="line">f3a97eadb092   centos    "/bin/bash"   12 minutes ago   Up 2 seconds             thirsty_pasteur</span><br></pre></td></tr></tbody></table></figure><h4 id="后台启动容器：">后台启动容器：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -d centos</span><br><span class="line">ddb941029e1fd47abfbd83968afc2103b2685d3ee0cf3f7ec32cd6f6fee96aca</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">常见问题：-d 运行之后，docker ps 发现它并没有运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">原因：docker 容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx 容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="查看日志：">查看日志：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker logs --help</span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    显示的日志的条数</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">自己写一段 shell 脚本</span></span><br><span class="line">docker run -d centos /bin/sh -c "while true;do echo ios;sleep 1;done"</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -d centos /bin/sh -c "while true;do echo ios;sleep 1;done"</span><br><span class="line">018801a5cdcfc762fb5def6d8f1ff3a7ec4d136f6b2812717937ee43a5f6ff66</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker logs 018801a5cdcfc762fb5def6d8f1ff3a7ec4d136f6b2812717937ee43a5f6ff66</span><br><span class="line">ios....</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="查看容器进程的信息：">查看容器进程的信息：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker top 018801a5cdcf</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                9040                9015                0                   16:09               ?                   00:00:00            /bin/sh -c while true;do echo ios;sleep 1;done</span><br><span class="line">root                9288                9040                0                   16:11               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="查看镜像中的元数据：">查看镜像中的元数据：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker inspect 018801a5cdcf </span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "Id": "018801a5cdcfc762fb5def6d8f1ff3a7ec4d136f6b2812717937ee43a5f6ff66",</span><br><span class="line">        "Created": "2021-04-28T08:09:10.127985045Z",</span><br><span class="line">        "Path": "/bin/sh",</span><br><span class="line">        "Args": [</span><br><span class="line">            "-c",</span><br><span class="line">            "while true;do echo ios;sleep 1;done"</span><br><span class="line">        ],</span><br><span class="line">        ......</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h4 id="进入当前正在运行的容器：">进入当前正在运行的容器：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方法一：docker <span class="built_in">exec</span>进入容器后开启一个新的终端，可以在里面操作（常用）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看正在运行的容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos    "/bin/sh -c 'while t…"   21 hours ago   Up 21 hours             confident_mayer</span><br><span class="line">f79cbdf9c012   centos    "/bin/bash"              21 hours ago   Up 21 hours             sweet_lehmann</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker exec -it 018801a5cdcf /bin/bash</span><br><span class="line">[root@018801a5cdcf /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器内的进程</span></span><br><span class="line">[root@018801a5cdcf /]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 Apr28 ?        00:00:16 /bin/sh -c while true;do echo ios;sleep 1;done</span><br><span class="line">root      9005     0  0 04:43 pts/0    00:00:00 /bin/bash</span><br><span class="line">root      9042     1  0 04:43 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root      9043  9005  0 04:43 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">方法二：docker attach 进入容器正在执行的终端，不会执行新的进程</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker attach 018801a5cdcf</span><br><span class="line">ios</span><br><span class="line">ios</span><br><span class="line">ios</span><br><span class="line">ios</span><br><span class="line"><span class="meta">#</span><span class="bash">发现正在执行脚本。。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="拷贝文件到主机：">拷贝文件到主机：</h4><p>从容器中拷贝文件到主机上（拷贝目前是一个手动过程，未来使用 -v 卷技术可以实现自动拷贝）</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看运行的容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos    "/bin/sh -c 'while t…"   21 hours ago   Up 21 hours             confident_mayer</span><br><span class="line">f79cbdf9c012   centos    "/bin/bash"              21 hours ago   Up 21 hours             sweet_lehmann</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看主机文件</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# ls</span><br><span class="line">docker-client  docker-client-latest  docker-common  docker-engine  docker-latest  docker-latest-logrotate  docker-logrotate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器，新建一个测试文件后退出</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker attach f79cbdf9c012</span><br><span class="line">[root@f79cbdf9c012 /]# cd /home</span><br><span class="line">[root@f79cbdf9c012 home]# ls</span><br><span class="line">[root@f79cbdf9c012 home]# touch test.java</span><br><span class="line">[root@f79cbdf9c012 home]# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">再次查看，发现容器已经不再运行</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED        STATUS        PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos    "/bin/sh -c 'while t…"   21 hours ago   Up 21 hours             confident_mayer</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS                      PORTS     NAMES</span><br><span class="line">018801a5cdcf   centos         "/bin/sh -c 'while t…"   21 hours ago   Up 21 hours                           confident_mayer</span><br><span class="line">f79cbdf9c012   centos         "/bin/bash"              21 hours ago   Exited (0) 25 seconds ago </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝文件命令</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker cp f79cbdf9c012:/home/test.java /home</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看是否拷贝成功</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# cd /home</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z home]# ls</span><br><span class="line">admin  test.java</span><br></pre></td></tr></tbody></table></figure><h4 id="小结">小结</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210221200910336.png" alt="image-20210221200910336"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;帮助命令：&quot;&gt;帮助命令：&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/s</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器防火墙端口配置</title>
    <link href="http://blog.sky123.top/2021/05/04/linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.sky123.top/2021/05/04/linux/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-04T02:24:52.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看防火墙状态">查看防火墙状态</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br></pre></td></tr></tbody></table></figure><h3 id="开启、关闭防火墙">开启、关闭防火墙</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭</span></span><br><span class="line">systemctl start firewalld</span><br></pre></td></tr></tbody></table></figure><h3 id="开放指定端口">开放指定端口</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=1935/tcp --permanent</span><br><span class="line">命令含义：</span><br><span class="line">--zone #作用域</span><br><span class="line">--add-port=1935/tcp #添加端口，格式为：端口/通讯协议</span><br><span class="line">--permanent #永久生效，没有此参数重启后失效</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# firewall-cmd --zone=public --add-port=3304/tcp --permanent</span><br><span class="line">success</span><br></pre></td></tr></tbody></table></figure><h3 id="重启防火墙">重启防火墙</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></tbody></table></figure><h3 id="查看端口号">查看端口号</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">netstat -ntlp //查看当前所有tcp端口·</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# netstat -ntlp </span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:3304            0.0.0.0:*               LISTEN      29109/docker-proxy  </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2185/sshd           </span><br><span class="line">tcp6       0      0 :::3304                 :::*                    LISTEN      29113/docker-proxy  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">netstat -ntulp |grep 3304 //查看所有3304端口使用情况</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# netstat -ntulp |grep 3304</span><br><span class="line">tcp        0      0 0.0.0.0:3304            0.0.0.0:*               LISTEN      29109/docker-proxy  </span><br><span class="line">tcp6       0      0 :::3304                 :::*                    LISTEN      29113/docker-proxy  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="开放阿里云安全组">开放阿里云安全组</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504102358335.png" alt="image-20210504102358335"></p><p>设置要开放的对应的端口</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504102424090.png" alt="image-20210504102424090"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;查看防火墙状态&quot;&gt;查看防火墙状态&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@izwz91mv6i3x6</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
    <category term="服务器" scheme="http://blog.sky123.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署练习</title>
    <link href="http://blog.sky123.top/2021/05/04/docker/Docker03%E9%83%A8%E7%BD%B2%E7%BB%83%E4%B9%A0/"/>
    <id>http://blog.sky123.top/2021/05/04/docker/Docker03%E9%83%A8%E7%BD%B2%E7%BB%83%E4%B9%A0/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-14T05:00:32.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署Nginx">部署Nginx</h2><ol><li>搜索镜像，建议去 docker hub 搜索，可以看到帮助文档</li><li>下载镜像</li><li>运行测试</li><li>配置容器内的ngnix的配置文件</li></ol><p><a class="link" href="https://hub.docker.com/">https://hub.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504094603067.png" alt="image-20210504094603067"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">f7ec5a41d630: Pull complete </span><br><span class="line">aa1efa14b3bf: Pull complete </span><br><span class="line">b78b95af9b17: Pull complete </span><br><span class="line">c7d6bca2b8dc: Pull complete </span><br><span class="line">cf16cd8e71e0: Pull complete </span><br><span class="line">0241c68333ef: Pull complete </span><br><span class="line">Digest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    62d49f9bab67   2 weeks ago    133MB</span><br><span class="line">centos       latest    300e315adb2f   4 months ago   209MB</span><br><span class="line"><span class="meta">#</span><span class="bash">参考运行容器的命令</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -d --name nginx01 -p 3304:80 nginx</span><br><span class="line">dccb2ad300dbbb4598dbb2017805fba5364379326d4a6296dac9b88bc61d8970</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">dccb2ad300db   nginx     "/docker-entrypoint.…"   21 seconds ago   Up 20 seconds   0.0.0.0:3304-&gt;80/tcp, :::3304-&gt;80/tcp   nginx01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试是否运行成功，发送一个请求</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# curl localhost:3304</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body {</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    }</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href="http://nginx.org/"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href="http://nginx.com/"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>开放对应端口后，公网访问看到效果如下图：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504102706906.png" alt="image-20210504102706906"></p><p>查看容器内的ngnix的配置文件：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@dccb2ad300db:/# whereis nginx </span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@dccb2ad300db:/# cd /etc/nginx</span><br><span class="line">root@dccb2ad300db:/etc/nginx# ls</span><br><span class="line">conf.dfastcgi_paramskoi-utf  koi-win  mime.types  modules  nginx.conf  scgi_paramsuwsgi_params  win-utf</span><br></pre></td></tr></tbody></table></figure><p>端口暴露原理示意图：</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504100014282.png" alt="image-20210504100014282" style="zoom: 67%;"><p>问题：每次改动 <code>nginx</code> 配置文件，都需要进入容器内部？十分的麻烦，要是可以在容器外部提供一个映射路径，达到在外部文件修改的同时，同步修改内部就好了！</p><p>解决技术：<code>数据卷技术！！</code></p><h2 id="部署Tomcat">部署Tomcat</h2><ol><li>搜索和下载 tomcat</li><li>启动运行</li><li>测试效果</li></ol><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">运行时提示错误</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -d -p 8080:8080 --name tomcat02 tomcat</span><br><span class="line">9cdceb4daa857dbd5c4e03dfd7eeded50ae027d8484137889d605871520dee97</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint tomcat02 (56f474809e2ca18c3e9ce63318aa6918600e004621743625e4be5754f74b6493):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 8080 -j DNAT --to-destination 172.18.0.2:8080 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line"> (exit status 1)).</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重启后再次运行</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]#  systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提示容器名已经有的</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -d -p 8080:8080 --name tomcat02 tomcat</span><br><span class="line">docker: Error response from daemon: Conflict. The container name "/tomcat02" is already in use by container "9cdceb4daa857dbd5c4e03dfd7eeded50ae027d8484137889d605871520dee97". You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See 'docker run --help'.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">没有正在运行的容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看历史记录</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED             STATUS                        PORTS     NAMES</span><br><span class="line">9cdceb4daa85   tomcat         "catalina.sh run"        5 minutes ago       Created                                 tomcat02</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开启容器</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker start 9cdceb4daa85</span><br><span class="line">9cdceb4daa85</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">运行成功</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">9cdceb4daa85   tomcat    "catalina.sh run"   5 minutes ago   Up 4 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>查看效果：测试访问没有问题</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504105656898.png" alt="image-20210504105656898"></p><p>发现问题：</p><ol><li>容器内部的 <code>Linux</code> 命令变少了（镜像只保证了最小的可运行环境）</li><li>webapps中没有内容（需要把 <code>webapps.dist</code> 文件夹的内容复制到 <code>webapps</code>）</li></ol><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">tomcat                latest    c0e850d7b9bb   3 weeks ago    667MB</span><br><span class="line">nginx                 latest    62d49f9bab67   4 weeks ago    133MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   8 weeks ago    79.1MB</span><br><span class="line">centos                latest    300e315adb2f   5 months ago   209MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">运行 tomcat</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run -d -p 8080:8080 --name tomcat02 tomcat</span><br><span class="line">39f11d68d64d3c585dd3a7f0a4e2123e03703cead8361c1cf0b6a61c1a7fb474</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                                       NAMES</span><br><span class="line">39f11d68d64d   tomcat    "catalina.sh run"   16 seconds ago   Up 15 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器内部</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker exec -it tomcat02 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">发现一些命令不存在</span></span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat# ll</span><br><span class="line">bash: ll: command not found</span><br><span class="line"></span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs    temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin      lib   native-jni-lib  webapps  work</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">webapps文件夹没有内容</span></span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat# cd webapps</span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat/webapps# ls</span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat/webapps# cd ../</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">webapps.dist文件夹有内容</span></span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat# cd webapps.dist</span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat/webapps.dist# cd ../</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">把webapps.dist文件夹的内容复制到 webapps</span></span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">快捷键 ctrl+P+Q 退出容器但不停止容器运行</span></span><br><span class="line">root@39f11d68d64d:/usr/local/tomcat# read escape sequence</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">确认容器状态</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">39f11d68d64d   tomcat    "catalina.sh run"   4 minutes ago   Up 4 minutes   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   tomcat02</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>查看效果：（注意一定要在服务器的安全组中开放对应的端口！！！）</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210504112530764.png" alt="image-20210504112530764"></p><h2 id="部署Mysql">部署Mysql</h2><p>注意：<a class="link" href="https://hub.docker.com/_/mysql">官网 <i class="fas fa-external-link-alt"></i></a> 中解释 Mysql 是要配置数据库密码的！！</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/6487268471927.jpg" alt="6487268471927"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载镜像 Mysql5.7</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ceshi]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">69692152171a: Pull complete </span><br><span class="line">1651b0be3df3: Pull complete </span><br><span class="line">951da7386bc8: Pull complete </span><br><span class="line">0f86c95aa242: Pull complete </span><br><span class="line">37ba2d8bd4fe: Pull complete </span><br><span class="line">6d278bb05e94: Pull complete </span><br><span class="line">497efbd93a3e: Pull complete </span><br><span class="line">a023ae82eef5: Pull complete </span><br><span class="line">e76c35f20ee7: Pull complete </span><br><span class="line">e887524d2ef9: Pull complete </span><br><span class="line">ccb65627e1c3: Pull complete </span><br><span class="line">Digest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21fa</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动镜像并挂载目录配置数据库的初始密码</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ceshi]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql01 mysql:5.7</span><br><span class="line">d869c76c987c305b9dd91321f523db7708a2a1c220712b4beaf2ac7f0e68fa1e</span><br></pre></td></tr></tbody></table></figure><p>使用数据库连接工具连接，查看连接是否成功：</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/Snipaste_2021-05-14_12-49-42.jpg" alt="Snipaste_2021-05-14_12-49-42" style="zoom: 50%;"><p>发现连接成功：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/Snipaste_2021-05-14_12-49-58.jpg" alt="Snipaste_2021-05-14_12-49-58"></p><p>新建数据库并查看主机的文件是否对应改变：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/Snipaste_2021-05-14_12-56-29.jpg" alt="Snipaste_2021-05-14_12-56-29"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z home]# ls</span><br><span class="line">admin  ceshi  mysql  test.java</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z home]# cd mysql/data</span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]# ls</span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem   test</span><br></pre></td></tr></tbody></table></figure><p>测试删除 mysql 容器后，主机上的文件是否依然存在：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line">d869c76c987c   mysql:5.7   "docker-entrypoint.s…"   26 minutes ago   Up 26 minutes   33060/tcp, 0.0.0.0:3310-&gt;3306/tcp, :::3310-&gt;3306/tcp   mysql01</span><br><span class="line">1309cabd368d   centos      "/bin/bash"              38 minutes ago   Up 38 minutes                                                          epic_neumann</span><br><span class="line">39f11d68d64d   tomcat      "catalina.sh run"        2 hours ago      Up 2 hours      0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp              tomcat02</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]# docker rm -f d869c76c987c</span><br><span class="line">d869c76c987c</span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z data]# ls</span><br><span class="line">auto.cnf    ca.pem           client-key.pem  ibdata1      ib_logfile1  mysql               private_key.pem  server-cert.pem  sys</span><br><span class="line">ca-key.pem  client-cert.pem  ib_buffer_pool  ib_logfile0  ibtmp1       performance_schema  public_key.pem   server-key.pem   test</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>发现我们挂载到本地的数据卷依旧没有丢失，这就实现了 容器数据持久化的功能！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;部署Nginx&quot;&gt;部署Nginx&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;搜索镜像，建议去 docker hub 搜索，可以看到帮助文档&lt;/li&gt;
&lt;li&gt;下载镜像&lt;/li&gt;
&lt;li&gt;运行测试&lt;/li&gt;
&lt;li&gt;配置容器内的ngnix的配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker概述和安装</title>
    <link href="http://blog.sky123.top/2021/05/04/docker/Docker01%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.sky123.top/2021/05/04/docker/Docker01%E6%A6%82%E8%BF%B0%E5%92%8C%E5%AE%89%E8%A3%85/</id>
    <published>2021-05-03T16:00:00.000Z</published>
    <updated>2021-05-04T03:17:27.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker概述">Docker概述</h2><h3 id="Docker出现的原因">Docker出现的原因</h3><p>一款产品有两个环境：开发（开发环境）和上线（运维环境）。</p><p>环境配置和切换过于麻烦，每一台机器都要部署环境（集群Redis,ES,Hadoop），费时费力。</p><p>解决思路：发布一个项目<code>（jar+(redis+mysql+jdk+es)）</code>的同时能不能都带上环境安装打包？</p><p>传统思路：开发项目，运维部署项目和环境配置。</p><p>现在：开发打包部署上线，一套流程做完。</p><p><code>Docker为以上问题，提出了解决方案！</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422110559011.png" alt="image-20210422110559011"></p><p>Docker的思想来自于集装箱：通过特殊的隔离机制，将服务器利用到机制。</p><h3 id="Docker历史">Docker历史</h3><blockquote><p>1.Docker诞生于2013年</p></blockquote><blockquote><p>2.Docker &amp; LXC：Docker的第一个执行环境：LXC；但从0.9版本开始被Libcontainer取代</p></blockquote><blockquote><p>3.Docker &amp; Libcontainer：Libcontainer为Docker封装了Linux提供的基础功能，如cgroups，namespaces，netlink和netfilter等</p></blockquote><blockquote><p>4.Docker &amp; RunC： 2015年，Docker发布了RunC，一个轻量级的跨平台的容器运行；可以直接利用Libcontainer运行容器</p></blockquote><blockquote><p>5.Docker &amp; OCI（The Open Containers Initiative）: OCI是一个轻量级的开放式管理架构，由Docker，CoreOS和容器行业的其他领导厂商2015年建立，维护一些项目，制定容器运行的规范等</p></blockquote><blockquote><p>6.Docker &amp; Containerd： 2016年，Docker分拆了Containerd，并将其捐献给了社区；使得Docker将容器的管理功能移出Docker的核心引擎并移入了一个单独的守护进程（containerd）</p></blockquote><p>在容器技术出来以前，都是使用虚拟机技术，相比于虚拟机几个G,几分钟的启动时间，Docker做到了几个M甚至几KB的容量和秒级开启时间，这主要得益于它并不像虚拟机虚拟出操作系统或者内核，而是只保留了最核心的环境，十分的小巧。<code>所有的程序员都必须要会docker!</code></p><h3 id="Docker介绍">Docker介绍</h3><p><code>Docker是基于GO语言开发的开源项目！！</code></p><p>官网：<a class="link" href="https://www.docker.com/">https://www.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p>文档地址：<a class="link" href="https://docs.docker.com/">https://docs.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p>仓库地址：<a class="link" href="https://hub.docker.com/">https://hub.docker.com/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422111746659.png" alt="image-20210422111746659"></p><h3 id="Docker与虚拟机的比较">Docker与虚拟机的比较</h3><p>虚拟机技术缺点：启动慢，占用资源多，冗余步骤多</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422115546688.png" alt="image-20210422115546688" style="zoom:50%;"><p>Docker容器化技术：不是模拟出一个完整的操作系统。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210422115733382.png" alt="image-20210422115733382" style="zoom:50%;"><p>总结：</p><ol><li>传统虚拟机：虚拟出一系列硬件，运行一个完整的操作系统，然后在这个系统安装和运行软件</li><li>容器内的应用直接运行在宿主机上，容器没有自己的内核，也没有虚拟出硬件，所以十分轻便</li><li>每个容器是相互隔离的，每个容器都有一个属于自己的文件系统，互不影响。</li></ol><h3 id="Docker作用">Docker作用</h3><p>可以实现了 <code>DevOps(开发，运维)</code></p><ol><li>应用更快速的交付和部署：打包镜像发布测试，一键运行</li><li>更便捷的升级和扩缩容：使用了Docker，部署应用就像搭积木一个，项目打包为一个镜像，方便扩展</li><li>更简单的系统运维：在容器化之后，开发和测试环境都是高度一致的。</li><li>更高效的计算资源利用：Docker是内核级别的虚拟化，可以在一个物理机上运行多个容器实例，容器的性能可以被压榨到极致。</li></ol><h2 id="Docker基本组成">Docker基本组成</h2><h3 id="架构图">架构图</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210221182251636.png" alt="image-20210221182251636"></p><h3 id="基本概念">基本概念</h3><ol><li><p>镜像<code>（image）</code>：docker镜像好比是一个模板，可以通过这个模板创建容器服务，tomcat镜像===》run==》tomcat01容器，通过镜像可以创建多个容器（最终服务运行或项目运行就是在容器中的）</p></li><li><p>容器<code>（container）</code>：docker利用容器技术，独立地运行一个或一组应用，通过<code>image</code>来创建。</p><p>启动，停止，删除，基本命令</p><p>目前就可以将容器理解为一个简单的Linux系统</p></li><li><p>仓库<code>（repository）</code>：仓库是存放镜像的地方。有公有和私有仓库之分。</p><p>Docker Hub(默认是国外的)，阿里云。。。都有容器服务器（配置镜像加速）</p></li></ol><h2 id="Docker安装">Docker安装</h2><h3 id="环境准备：">环境准备：</h3><ol><li>Linux基础</li><li>Linux操作系统</li><li>使用 Xshell 连接远程服务器</li></ol><h3 id="查看环境：">查看环境：</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">系统内核是3.10以上的</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# uname -r</span><br><span class="line">3.10.0-514.26.2.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统信息</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# cat /etc/os-release</span><br><span class="line">NAME="CentOS Linux"</span><br><span class="line">VERSION="7 (Core)"</span><br><span class="line">ID="centos"</span><br><span class="line">ID_LIKE="rhel fedora"</span><br><span class="line">VERSION_ID="7"</span><br><span class="line">PRETTY_NAME="CentOS Linux 7 (Core)"</span><br><span class="line">ANSI_COLOR="0;31"</span><br><span class="line">CPE_NAME="cpe:/o:centos:centos:7"</span><br><span class="line">HOME_URL="https://www.centos.org/"</span><br><span class="line">BUG_REPORT_URL="https://bugs.centos.org/"</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT="CentOS-7"</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION="7"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT="centos"</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION="7"</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="安装教程：">安装教程：</h3><p>可以查看官网文档：<a class="link" href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210423220917139.png" alt="image-20210423220917139"></p><p>对于 <code>CentOS</code> 系统：</p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先卸载旧版本Docker系统（如果有的话）</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# sudo yum remove docker \</span><br><span class="line">                   docker-client \</span><br><span class="line">                   docker-client-latest \</span><br><span class="line">                   docker-common \</span><br><span class="line">                   docker-latest \</span><br><span class="line">                   docker-latest-logrotate \</span><br><span class="line">                   docker-logrotate \</span><br><span class="line">                   docker-engine</span><br><span class="line">                   </span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">No Match for argument: docker</span><br><span class="line">No Match for argument: docker-client</span><br><span class="line">No Match for argument: docker-client-latest</span><br><span class="line">No Match for argument: docker-common</span><br><span class="line">No Match for argument: docker-latest</span><br><span class="line">No Match for argument: docker-latest-logrotate</span><br><span class="line">No Match for argument: docker-logrotate</span><br><span class="line">No Match for argument: docker-engine</span><br><span class="line">No Packages marked for removal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装需要的安装包</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  yum-utils.noarch 0:1.1.31-54.el7_8                                                                                                           </span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  libxml2-python.x86_64 0:2.9.1-6.el7.5           python-chardet.noarch 0:2.2.1-3.el7           python-kitchen.noarch 0:1.1.1-5.el7          </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  libxml2.x86_64 0:2.9.1-6.el7.5                                                                                                               </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置下载Docker镜像</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装docker，一路输入确定安装即可</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  audit-libs-python.x86_64 0:2.8.5-4.el7                                  checkpolicy.x86_64 0:2.5-8.el7                                       </span><br><span class="line">  container-selinux.noarch 2:2.119.2-1.911c772.el7_8                      docker-ce-rootless-extras.x86_64 0:20.10.6-3.el7                     </span><br><span class="line">  docker-scan-plugin.x86_64 0:0.7.0-3.el7                                 fuse-overlayfs.x86_64 0:0.7.2-6.el7_8                                </span><br><span class="line">  fuse3-libs.x86_64 0:3.6.1-4.el7                                         libcgroup.x86_64 0:0.41-21.el7                                       </span><br><span class="line">  libseccomp.x86_64 0:2.3.1-4.el7                                         libsemanage-python.x86_64 0:2.5-14.el7                               </span><br><span class="line">  policycoreutils-python.x86_64 0:2.5-34.el7                              python-IPy.noarch 0:0.75-6.el7                                       </span><br><span class="line">  setools-libs.x86_64 0:3.3.8-4.el7                                       slirp4netns.x86_64 0:0.4.3-4.el7_8                                   </span><br><span class="line"></span><br><span class="line">Dependency Updated:</span><br><span class="line">  audit.x86_64 0:2.8.5-4.el7                             audit-libs.x86_64 0:2.8.5-4.el7         libselinux.x86_64 0:2.5-15.el7               </span><br><span class="line">  libselinux-python.x86_64 0:2.5-15.el7                  libselinux-utils.x86_64 0:2.5-15.el7    libsemanage.x86_64 0:2.5-14.el7              </span><br><span class="line">  libsepol.x86_64 0:2.5-10.el7                           policycoreutils.x86_64 0:2.5-34.el7     selinux-policy.noarch 0:3.13.1-268.el7_9.2   </span><br><span class="line">  selinux-policy-targeted.noarch 0:3.13.1-268.el7_9.2   </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="启动测试：">启动测试：</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看 docker 是否安装成功，和版本</span></span><br><span class="line"></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker -v</span><br><span class="line"></span><br><span class="line">Docker version 20.10.6, build 370c289</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动 docker</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">运行测试</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image 'hello-world:latest' locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">b8dfde127a29: Pull complete </span><br><span class="line">Digest: sha256:f2266cbfc127c960fd30e76b7c792dc23b588c0db76233517e1891a4e357d519</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看下载的 hello-world 镜像</span></span><br><span class="line">[root@izwz91mv6i3x6k12jjqh60z ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world   latest    d1165f221234   7 weeks ago   13.3kB</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="卸载Docker：">卸载Docker：</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">卸载</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件</span>  </span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">/var/lib/docker  是docker的默认工作路径</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Docker配置阿里云镜像仓库地址">Docker配置阿里云镜像仓库地址</h2><p>参考教程：<a class="link" href="https://www.cnblogs.com/allenjing/p/12575972.html">https://www.cnblogs.com/allenjing/p/12575972.html<i class="fas fa-external-link-alt"></i></a></p><p>登陆阿里云，找到如下选项：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428092132408.png" alt="image-20210428092132408"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428092924853.png" alt="image-20210428092924853"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://bjyjzfeq.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure><h2 id="Docker原理">Docker原理</h2><h3 id="helloworld的运行流程：">helloworld的运行流程：</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428121216893.png" alt="image-20210428121216893"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428121520142.png" alt="image-20210428121520142"></p><h3 id="底层原理：">底层原理：</h3><p>Docker工作原理：Docker是一个 <code>CS结构</code> 的系统，Docker 的守护进程运行在主机上，通过 Socket从客户端访问。</p><p>DockerServer 接收到 DokcerClient 的指令，就会执行这个命令。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428122527218.png" alt="image-20210428122527218"></p><h3 id="Docker为什么比VM快？">Docker为什么比VM快？</h3><ol><li>Docker 有着比虚拟机更少的抽象层</li><li>Docker 利用的是宿主机的内核，而 VM 需要的是 <code>Guest OS</code>。</li><li>新建一个容器时，Docker 不需要像虚拟机一样重新加载一个操作系统的内核。</li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428122751694.png" alt="image-20210428122751694"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210428123110597.png" alt="image-20210428123110597"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker概述&quot;&gt;Docker概述&lt;/h2&gt;
&lt;h3 id=&quot;Docker出现的原因&quot;&gt;Docker出现的原因&lt;/h3&gt;
&lt;p&gt;一款产品有两个环境：开发（开发环境）和上线（运维环境）。&lt;/p&gt;
&lt;p&gt;环境配置和切换过于麻烦，每一台机器都要部署环境（集群Redis</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://blog.sky123.top/tags/Docker/"/>
    
    <category term="Linux" scheme="http://blog.sky123.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Mock和Mock.js</title>
    <link href="http://blog.sky123.top/2021/04/22/javascript/mock/"/>
    <id>http://blog.sky123.top/2021/04/22/javascript/mock/</id>
    <published>2021-04-22T06:53:47.000Z</published>
    <updated>2021-04-22T02:20:27.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于mock">关于mock</h2><p><code>mock可以简单理解为假数据</code>。在软件开发中，我们不可避免的要调用一些外部或者系统级别的接口，然而，我们在测试时，也许这些接口或环境并不存在。比如在对我们自己的模块做单元测试时，发现自己的模块依赖的别的模块或接口还没有建立好，如何测试？<code>（后端的接口还没写好，前端该怎么测试接口？前端写假数据接口，暂时替代后端）</code></p><p>Mock概念应运而生，最开始在Java领域，后来各种语言或开发领域均引入该概念。</p><p>Mock实际上就是一种模拟和控制外部或者系统级别对象或接口的方法。因此，我们在做测试时，尤其是单元测试或覆盖测试时，不必与真实环境交互即可完成对自己的模块业务逻辑的测试，或许自己的模块需要依赖外部环境。</p><p><code>(这里看看即可，主要理解一下这种 mock 思想的出现解决了什么问题？)</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330144250709.png" alt="image-20210330144250709"></p><h2 id="Mock-js">Mock.js</h2><p>上面所说的 mock 是一种思想，而现在说的<code>Mock.js</code>是一门技术，是这种思想的具体实现。我们主要学的是<code>Mock.js</code>。其实此外还有许多技术可以替代它。比如 <code>easyMock，apifox..</code></p><p>官网：<a class="link" href="http://mockjs.com/">http://mockjs.com/<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330145423844.png" alt="image-20210330145423844"></p><p>优点：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330145453711.png" alt="image-20210330145453711"></p><h2 id="这个东西怎么用到项目中去？">这个东西怎么用到项目中去？</h2><h3 id="安装">安装</h3><p>进入项目根目录</p><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section"># 安装</span></span><br><span class="line">npm install mockjs</span><br></pre></td></tr></tbody></table></figure><p>出现如下，说明安装成功</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330151134751.png" alt="image-20210330151134751"></p><h3 id="配置使用">配置使用</h3><p>新建如下目录结构：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330155310609.png" alt="image-20210330155310609"></p><p>解释：<code>decision目录</code>中的文件命名尽量和<code>api文件夹</code>里的文件对应</p><p>在  <code>mock/index.js</code> 中写入：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">"mockjs"</span>;</span><br><span class="line"><span class="keyword">import</span> file <span class="keyword">from</span> <span class="string">"./decision/file"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截 `/api/testGet` 接口的`get方式`的请求，如果拦截到就调用 `file.testGet` 中的函数。</span></span><br><span class="line">Mock.mock(<span class="built_in">RegExp</span>(<span class="string">"/api/testGet"</span> + <span class="string">".*"</span>), <span class="string">"get"</span>, file.testGet);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截 `/api/testGet` 接口的`post方式`的请求，如果拦截到就返回 `file.testPost` 中的对象。</span></span><br><span class="line">Mock.mock(<span class="string">"/api/testPost"</span>, <span class="string">"post"</span>, file.testPost);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Mock;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在 <code>mock/decision/file.js</code> 中写入：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 管理mock数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="function"><span class="title">testGet</span>(<span class="params">options</span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      code: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">"GET成功"</span>,</span><br><span class="line">      data: {</span><br><span class="line">        token: <span class="string">"123456"</span>,</span><br><span class="line">        collegeId: <span class="string">"123"</span></span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">    <span class="comment">// 登录接口返回的数据</span></span><br><span class="line">  },</span><br><span class="line">  testPost: {</span><br><span class="line">    code: <span class="number">1</span>,</span><br><span class="line">    msg: <span class="string">"POST成功"</span>,</span><br><span class="line">    data: {</span><br><span class="line">      token: <span class="string">"123456"</span>,</span><br><span class="line">      collegeId: <span class="string">"123"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在项目的 <code>main.js</code> 中引入<code>mockjs</code></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./mock/index.js"</span>; <span class="comment">// 使用mockjs模拟</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330155820989.png" alt="image-20210330155820989"></p><h3 id="测试效果">测试效果</h3><p><img lazyload="" src="/images/loading.svg" data-src="upload%5Cimage-20210330155908404.png" alt="image-20210330155908404"></p><p><img lazyload="" src="/images/loading.svg" data-src="upload%5Cimage-20210330155919853.png" alt="image-20210330155919853"></p><h2 id="Mock-js-配置的一些注意点">Mock.js 配置的一些注意点</h2><ol><li><p>模拟 <code>get</code> 请求的 <code>url</code> 注意一定要正则表达式的风格：例如</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">Mock.mock(<span class="built_in">RegExp</span>(<span class="string">"/api/testGet"</span> + <span class="string">".*"</span>), <span class="string">"get"</span>, file.testGet);</span><br></pre></td></tr></tbody></table></figure><p>这段代码的含义是，拦截 <code>/api/testGet</code> 接口的<code>get方式</code>的请求，如果拦截到就调用 <code>file.testGet</code> 函数。</p><p>为什么不直接像拦截post请求那样 <code>url</code>  直接是个字符串形式的？因为 <code>get请求的url后面是带参数的！！！</code></p><p>直接使用字符串mock只会拦截 <code>/api/testGet</code>，不会拦截  <code>/api/testGet?XXX=XXX&amp;XXX=XXX</code>这种形式的。</p></li><li><p>从上面的使用可以看出：一个接口就要写一个 <code>Mock.mock(XXXXXXX)</code>。而我们写完这个之后最主要的就是写它返回的假数据。（<code>Mock.mock</code>函数的使用可以看一下官网的解释：<a class="link" href="https://github.com/nuysoft/Mock/wiki/Mock.mock()%EF%BC%89">https://github.com/nuysoft/Mock/wiki/Mock.mock()）<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330161517775.png" alt="image-20210330161517775"></p><p>看到官网的解释可以发现，第三个参数（模拟数据）其实有两种方式：<code>function 和 template</code> 。分别对应之前写的<code>testGet和testPost</code> ：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330161829735.png" alt="image-20210330161829735"></p><p>这两种方式都很常用。都要会使用！</p></li></ol><h4 id="template类型">template类型</h4><p>看官网的解释：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330162015199.png" alt="image-20210330162015199"></p><p>这里说明：<code>template</code> 它可以直接就是一个对象或字符串，也就是说你在写它的假数据时可以直接定义一个对象或字符串就行。比如前面写的 <code>testPost</code></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">testPost: {</span><br><span class="line">    code: <span class="number">1</span>,</span><br><span class="line">    msg: <span class="string">"POST成功"</span>,</span><br><span class="line">    data: {</span><br><span class="line">      token: <span class="string">"123456"</span>,</span><br><span class="line">      collegeId: <span class="string">"123"</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>拦截成功后直接就是返回你所写的假数据。而这种方式最好的一点是<code>它可以生成随机数据</code></p><p>看到官网的：<a class="link" href="http://mockjs.com/examples.html#String%E3%80%82%E5%8F%91%E7%8E%B0%E8%BF%99%E9%87%8C%E8%AE%B2%E4%BA%86%E5%BE%88%E5%A4%9A%E7%9A%84%E8%AF%AD%E6%B3%95%E3%80%82%E6%80%8E%E4%B9%88%E7%94%A8%EF%BC%9F%E5%81%87%E5%A6%82%E6%88%91%E6%83%B3%E6%AF%8F%E6%AC%A1%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8B%A6%E6%88%AA%E4%B9%8B%E5%90%8E%E8%BF%94%E5%9B%9E%E7%9A%84">http://mockjs.com/examples.html#String。发现这里讲了很多的语法。怎么用？假如我想每次调用接口拦截之后返回的<i class="fas fa-external-link-alt"></i></a> <code>token 和 collegeId</code> 都是不一样的。那么可以这么写：</p><p>在官网找到数据类型：这里由于两个都是字符串类型的，我选择使用 正则表达式的类型</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163542540.png" alt="image-20210330163542540"></p><p>修改为：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">testPost: {</span><br><span class="line">    code: <span class="number">1</span>,</span><br><span class="line">    msg: <span class="string">"POST成功"</span>,</span><br><span class="line">    data: {</span><br><span class="line">      token: <span class="regexp">/[a-z][A-Z][0-9][0-9][0-9]/</span>,</span><br><span class="line">      collegeId: <span class="regexp">/[0-9][0-9][0-9][0-9]/</span></span><br><span class="line">    }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>查看效果：发现多次调用返回的都是不同的结果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163811844.png" alt="image-20210330163811844"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163820152.png" alt="image-20210330163820152"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330163834223.png" alt="image-20210330163834223"></p><p>总结：使用 template 类型可以生成随机数据，使得每次调用接口时的数据都不同，但是你如果不想用随机数据的话也可以直接写死，每次返回同样的数据，这样甚至都不用去关注官网提到的那些随机数据的生成语法。不过多了解点总是好的。</p><h4 id="function类型">function类型</h4><p>看官网：<a class="link" href="https://github.com/nuysoft/Mock/wiki/Mock.mock()">https://github.com/nuysoft/Mock/wiki/Mock.mock()<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330164423839.png" alt="image-20210330164423839"></p><p>这种方式就最大的好处就是可以<code>前端简单的实现增删改数据的效果</code>。就是说当你调用涉及到增删改数据的接口时，仅仅使用上面的 <code>template</code> 类型是看不到增删改的效果的。此时只能使用 <code>function</code> 类型的。返回这种类型时实际上就是调用了你所定义的函数，然后<code>将函数的返回值作为假数据</code>。比如之前写的 <code>testGet</code>:</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">testGet</span>(<span class="params">options</span>)</span> {</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">      code: <span class="number">1</span>,</span><br><span class="line">      msg: <span class="string">"GET成功"</span>,</span><br><span class="line">      data: {</span><br><span class="line">        token: <span class="string">"123456"</span>,</span><br><span class="line">        collegeId: <span class="string">"123"</span></span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">  },</span><br></pre></td></tr></tbody></table></figure><p>可以发现这个函数有一个参数，打印之后发现：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330165256662.png" alt="image-20210330165256662"></p><p>实际上就是你调用的接口的信息！！拿到这个你其实可以做很多事情，比如下面这个，找到之前发的出卷系统的项目的<code>mock/decision/auditJoin.js/auditJoinGet  这个函数</code>：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210330165702842.png" alt="image-20210330165702842"></p><p>在 <code>auditJoin.js</code> 中可以看到首先定义一连串的数据，然后不同的函数根据自己的<code>options</code>找到参数后进行对应的操作返回不同的数据。</p><p>总结：function 类型的使用可以实现一些增删改接口数据的效果。但是使用这种方法后要想生成随机数据的话就不能使用之前 <a class="link" href="http://mockjs.com/examples.html#String">http://mockjs.com/examples.html#String<i class="fas fa-external-link-alt"></i></a> 提到的这些语法。而要使用别的方法实现（MockRandom：<a class="link" href="https://github.com/nuysoft/Mock/wiki/Mock.Random%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%96%B9%E6%B3%95%E4%B8%8D%E5%81%9A%E8%A6%81%E6%B1%82%EF%BC%8C%E8%83%BD%E7%9C%8B%E6%87%82%E7%9A%84%E4%BA%BA%E5%B0%B1%E7%94%A8%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%9C%8B%E4%B8%8D%E6%87%82%E7%9A%84%E4%BA%BA%E5%B0%B1%E5%BD%93%E4%BD%9C%E6%B2%A1%E7%9C%8B%E8%BF%87%EF%BC%89%E3%80%82%E6%80%BB%E4%B9%8B%EF%BC%8C%E7%94%A8">https://github.com/nuysoft/Mock/wiki/Mock.Random，这种方法不做要求，能看懂的人就用一下，看不懂的人就当作没看过）。总之，用<i class="fas fa-external-link-alt"></i></a> <code>function</code> 类型时可以参照：<code>之前发的出卷系统的项目的mock/decision/auditJoin.js</code> 里面的写法。</p><h3 id="总结">总结</h3><p><code>Mock.js</code> 实际上只是在前端开发时写的一些假接口数据，之后等后端代码写好，前后端整合的时候，就需要把它注释掉了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于mock&quot;&gt;关于mock&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mock可以简单理解为假数据&lt;/code&gt;。在软件开发中，我们不可避免的要调用一些外部或者系统级别的接口，然而，我们在测试时，也许这些接口或环境并不存在。比如在对我们自己的模块做单元测试时，发现自己的模块依</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://blog.sky123.top/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>PowerDesigner安装教程（含下载+汉化+破解）</title>
    <link href="http://blog.sky123.top/2021/03/10/%E8%BD%AF%E4%BB%B6/powerDesigner/"/>
    <id>http://blog.sky123.top/2021/03/10/%E8%BD%AF%E4%BB%B6/powerDesigner/</id>
    <published>2021-03-10T02:18:11.000Z</published>
    <updated>2021-03-10T02:18:46.989Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自：<a class="link" href="https://www.fujieace.com/software/powerdesigner.html">https://www.fujieace.com/software/powerdesigner.html<i class="fas fa-external-link-alt"></i></a></p><p>软件版本：Sybase PowerDesigner 16.5</p><h2 id="准备工作：">准备工作：</h2><p>下载下面三个文件：</p><p>1、安装文件 链接: <a class="link" href="https://pan.baidu.com/s/1fxmBlcee4qEqxM4djSzvWA">https://pan.baidu.com/s/1fxmBlcee4qEqxM4djSzvWA<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><p>2、破解文件 链接: <a class="link" href="https://pan.baidu.com/s/1jadOumXVh6iC6XeXqwPGQw">https://pan.baidu.com/s/1jadOumXVh6iC6XeXqwPGQw<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><p>3、汉化文件 链接: <a class="link" href="https://pan.baidu.com/s/19yeyWfAPMJ_WeJy8SDVu5Q">https://pan.baidu.com/s/19yeyWfAPMJ_WeJy8SDVu5Q<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><h2 id="PowerDesigner安装图文教程：">PowerDesigner安装图文教程：</h2><p>1、解压PowerDesigner安装文件，并双击PowerDesigner.exe；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/1-2.png" alt=""></p><p>2、欢迎来到PowerDesigner安装界面，点击 Next</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/3-3.png" alt=""></p><p>3、一定要选择Trial，再点击Next，不要选择其它，这一步如果选择错，后面破解是不行的。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/3-3.png" alt=""></p><p>4、选择Hong Kong，点击I AGREE，再点击Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/4-1.png" alt=""></p><p>5、选择一个安装目录，默认是安装在C盘。再点击Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/5-1.png" alt=""></p><p>6、点击General和Notaion，再点击Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/7.png" alt=""></p><p>走到这一 步，如果你电脑上已经安装了“Eclipse”软件，请不要打勾此插件选项。否则：就会出现，让你选择“Eclipse”软件的安装路径。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/159.png" alt=""></p><p>7、直接点击Next；进入正在安装界面</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/160.png" alt=""></p><p>9、点击Finish（安装完成）</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/9-1.png" alt=""></p><h2 id="PowerDesigner破解步骤：">PowerDesigner破解步骤：</h2><p>1、将PowerDesigner破解文件解压，然后，你能看到一个“pdflm16.dll”文件；</p><p>2、将“pdflm16.dll”复制并覆盖到你软件安装的目录中，一定要是此软件的安装根目录；例如：我这里就直接复制到 E:\powerdesigner 即可！</p><h2 id="PowerDesigner汉化步骤：">PowerDesigner汉化步骤：</h2><p>1、将PowerDesigner汉化文件解压，然后你能看到很多文件；</p><p>2、Ctrl+A（全选）所有文件，复制并覆盖到你软件安装的目录中；</p><p>3、如果点击PdShell16.exe不能正常启动，请点击pdlegacyshell16.exe启动；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/856.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章转自：&lt;a class=&quot;link&quot; href=&quot;https://www.fujieace.com/software/powerdesigner.html&quot;&gt;https://www.fujieace.com/software/powerdesigner.html&lt;i c</summary>
      
    
    
    
    
    <category term="软件" scheme="http://blog.sky123.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="powerDesigner" scheme="http://blog.sky123.top/tags/powerDesigner/"/>
    
  </entry>
  
  <entry>
    <title>栅格布局基本概念</title>
    <link href="http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栅格化布局">栅格化布局</h2><p>网格布局<code>（Grid）</code>是最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 <code>CSS 框架</code>达到的效果，现在浏览器内置了。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123208640.png" alt="image-20210306123208640"></p><p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定"项目"针对轴线的位置，可以看作是一维布局。</p><p>Grid 布局则是将容器划分成"行"和"列"，产生单元格，然后指定"项目所在"的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p><h3 id="基本概念">基本概念</h3><p>容器和项目<br>采用网格布局的区域，称为<code>"容器"（container）</code>。容器内部采用网格定位的子元素，称为<code>"项目"（item）</code>。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123226964.png" alt="image-20210306123226964"></p><p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。</p><p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<code>&lt;p&gt;</code>元素就不是项目。Grid 布局只对项目生效。</p><p>行和列<br>容器里面的水平区域称为"行"（row），垂直区域称为"列"（column）。水平的深色区域就是"行"，垂直的深色区域就是"列"</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123236954.png" alt="image-20210306123236954"></p><h3 id="容器中的属性">容器中的属性</h3><p><code>display：grid</code>  指定一个容器采用网格布局，默认情况下，容器元素都是块元素。inline-grid  设置为行内元素网格布局</p><p><code>grid-template-columns</code> 属性定义每一列的列宽。<br><code>grid-template-rows</code> 属性定义每一行的行高</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123247282.png" alt="image-20210306123247282"></p><p>注意，设为网格布局以后，<code>容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</code></p><p>科普视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=629123551&amp;bvid=BV1Gt4y1z7NQ&amp;cid=293320928&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;栅格化布局&quot;&gt;栅格化布局&lt;/h2&gt;
&lt;p&gt;网格布局&lt;code&gt;（Grid）&lt;/code&gt;是最强大的 CSS 布局方案。&lt;/p&gt;
&lt;p&gt;它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 &lt;code&gt;CSS 框架&lt;/code&gt;</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>media媒体查询</title>
    <link href="http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Media-Query响应式布局—媒体查询">Media Query响应式布局—媒体查询</h2><p>​响应式布局是在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。<br>​响应式布局可以为不同终端的用户提供更加舒适的界面和更好的用户体验，而且随着目前大屏幕移动设备的普及，越来越多的网站采用这个技术。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306113916951.png" alt="image-20210306113916951"></p><h3 id="响应式设计一定是最佳选择吗？">响应式设计一定是最佳选择吗？</h3><p>​如果预算充足且形势需要，做一个真正的“手机版”网站是首选。因为响应式设计没有专门设计一个手机版网站的功能多，比如获取当前用户的<code>GPS定位</code>，只是用响应式设计会很难实现。但如果只是根据视口大小为用户提供匹配的视觉效果还是优先选择响应式设计。</p><p>优点：</p><ol><li>面对不同分辨率设备灵活性强</li><li>能够快捷解决多设备显示适应问题</li></ol><p>缺点：</p><ol><li>兼容各种设备工作量大，效率略慢</li><li>代码累赘，会出现隐藏无用的元素，加载时间加长</li><li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ol><h3 id="CSS中的Media-Query（媒介查询）是什么？">CSS中的Media Query（媒介查询）是什么？</h3><p>​作为<code>CSS3</code>规范的一部分，媒体查询可以针对不同的屏幕尺寸设置不同的样式，它为每种类型的用户提供了最佳的体验，网站在任何尺寸设置下都能有最佳的显示效果。通过不同的媒体类型和条件定义样式表规则。<br>​<br>​媒体查询让<code>CSS</code>可以更精确作用于不同的媒体类型和同一媒体的不同条件。媒体查询的大部分媒体特性都接受min和max用于表达“大于或等于”和“小与或等于”。如：<code>width会有min-width和max-width</code><br>​<br>​<code>Media Queries</code>功能是非常强大的，他可以让你定制不同的分辨率和设备，并在不改变内容的情况下，让你制作的web页面在不同的分辨率和设备下都能显示正常，并且不会因此而丢失样式</p><h4 id="媒体查询实例">媒体查询实例</h4><p>​通过此实例观察媒体查询的功能后，再来分析语法</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">body</span>{<span class="attribute">background-color</span>:grey; }   //正常情况是灰色</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) {//宽度大于 <span class="number">992px</span> 的时候被应用 pc端</span><br><span class="line">  <span class="selector-class">.class</span> {<span class="attribute">background</span>: <span class="number">#666</span>;}  }  </span><br><span class="line">           </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) { //宽度小于<span class="number">768px</span>的时候被应用  移动端</span><br><span class="line">  <span class="selector-class">.class</span> { <span class="attribute">background</span>: <span class="number">#ccc</span>; }  }</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768</span>x) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">992px</span>) {  //宽度在 <span class="number">768px</span> 和 <span class="number">992px</span> 之间的时候被应用</span><br><span class="line">  <span class="selector-class">.class</span> {  <span class="attribute">background</span>: <span class="number">#333</span>;  }   }</span><br></pre></td></tr></tbody></table></figure><h4 id="使用Media-Query的基本语法">使用Media Query的基本语法</h4><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) {</span><br><span class="line">       CSS-<span class="selector-tag">Code</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>​以上通过<code>@media</code>定义媒体查询，<code>mediatype</code>代表了设备类型，目前只有<code>screen</code>最常用，<code>and|not|only</code>为条件，<code>media feature</code>为媒体特点，通常是写设备的宽度。</p><p>​<code>@media screen and (max-width:960px)</code> 的意思为：当前设备为screen（电脑、平板、手机）时，并且最大宽度为960时，显示的样式。</p><p>媒体类型有：</p><ul><li>all   所有设备</li><li>print用于打印机和打印预览</li><li>screen用于电脑屏幕，平板电脑，智能手机等</li><li>speech应用于屏幕阅读器等发声设备</li></ul><h3 id="用媒体查询改造我们的设计">用媒体查询改造我们的设计</h3><p>​我们都知道，样式表里面，后面的样式会覆盖前面的样式。因此，我们可以在设置好网站基本样式后，使用媒体查询来进一步重写相应的部分。例如，在PC端将导航显示成简单的链接，然后再针对小视口，使用媒体查询重写这一部分。理论上讲最好是从小屏幕设备开始设计，然后渐进增强。但实际上我们使用媒体查询要解决的问题，都是已经存在PC端站点了，<code>更多的是要将现有的桌面版网页改造成响应式的</code>。</p><p>加载媒体查询的最佳方法：</p><p>​使用<code>多个独立的CSS文件会增加HTTP请求的数量</code>，使页面加载变慢。所以我们的媒体查询样式的文件尽量放在一个里面，以注释加以区分。</p><p>阻止移动浏览器自动调整页面大小</p><p>​<code>ios和android浏览器都基于webkit内核</code>，这两种浏览器和许多其它浏览器都支持用<code>viewport，meta元素覆盖默认的画布缩放设置</code>。只需要在HTML的<code>&lt;head&gt;</code>标签中插入一个<code>&lt;meta&gt;</code>标签，<code>meta</code>标签中可以设置具体的宽度或缩放比。下面为示例</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span>  <span class="attr">content</span>=<span class="string">"initial-scale=1.0,width=device-width"</span> /&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p><code>name=”viewport”</code>  说明此meta标签定义视口的属性<br><code>​initial-scale=2.0</code>   意思是将页面放大两倍<br><code>​width=device-width</code>   告诉浏览器页面的宽度等于设备宽度</p><p>允许用户将页面最大放大至设备宽度3倍，最小压缩至设备宽度的一半</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">device-width,</span> <span class="attr">maximum-scale</span>=<span class="string">3,</span> <span class="attr">minimum-scale</span>=<span class="string">0.5”</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>禁止用户缩放，可以在混合<code>APP</code>时，为了使<code>html</code>页面更逼真，使页面无法缩放</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”initial-scale</span>=<span class="string">1.0,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span> /&gt;</span>   //user-scalable=no是禁止缩放</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Media-Query响应式布局—媒体查询&quot;&gt;Media Query响应式布局—媒体查询&lt;/h2&gt;
&lt;p&gt;​	响应式布局是在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-03T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="伸缩盒模型flexbox">伸缩盒模型flexbox</h2><p>伸缩盒模型也叫弹性盒模型，或<code>flexBox</code>。它决定一个盒子在其它盒子中的分布，以及如何处理可用的空间。使用该模型，可以轻松的创建“自适应”浏览器窗口的流动布局。</p><blockquote><p><code>flexbox</code>是一个很新的东西，在<code>w3c</code>希望可以使用<code>flexbox</code>实现一些更复杂的布局和应用。传统盒模型基于HTML文档流排列，使用弹性盒模型可以规定特定的顺序。要开启弹性盒模型，只需要设置display的属性值 flex，因为它是<code>CSS3</code>中为display新添加的值类型。</p></blockquote><p>目的：在浏览器窗口变化时，盒子相应改变大小。<br><code>设置了弹性盒模型后，float，clear和vertical-align在flex中不起作用。</code></p><h3 id="旧的伸缩盒">旧的伸缩盒</h3><p>​       伸缩盒从被提出到如今一直在修改，所以这里涉及到了新老写法。伸缩盒最老版本<br>​<code>display:box;</code>  将对象作为弹性伸缩盒显示（火狐和<code>webkit</code>内核都支持<code>display:-webkit-box;</code>或<code>display:-moz-box;</code>）。子元素   <code>box-flex:;</code><br>伸缩盒过渡版本：<code>display:flexbox;</code>  将对象作为弹性伸缩盒显示<br>伸缩盒最新版本：<code>display:flex;</code>  将对象作为弹性伸缩盒显示</p><h3 id="flexbox的基础知识">flexbox的基础知识</h3><p>​由于 <code>flexbox</code>是一个整体的模块，它们之中一些属性是在父容器上设置，而一些是在子容器上设置。一个<code>flexbox</code>的基本结构：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">         <span class="selector-class">.box</span>{ <span class="attribute">display</span>: flex;}    //最外层的为父容器，定义此容器为弹性布局</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}       <span class="attribute">flex-grow</span>占<span class="number">1</span>比例</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">2</span>; <span class="attribute">background</span>:orange}     占<span class="number">2</span>比例</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">3</span>; <span class="attribute">background</span>:red}        占<span class="number">3</span>比例</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>1.首先规定哪个是父容器，父容器中包含多个“项目”（每个子div），项目是可以在父容器中弹性布局的。<br>2.其次还可以规定父容器中要怎么来显示它里面的项目，如是否换行、项目排列方向等</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112154902.png" alt="image-20210306112154902"></p><h3 id="父容器常用属性">父容器常用属性</h3><p><code>display: flex;</code>   定义一个flex容器。新弹性盒  设置父元素是一个弹性盒，子元素会自动水平排列</p><p><code>justify-content: flex-end;</code>   设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112215032.png" alt="image-20210306112215032"></p><p><code>align-items</code> 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112226193.png" alt="image-20210306112226193"></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   .container{</span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">border</span>: <span class="number">1px</span> solid blueviolet;</span></span><br><span class="line">     }   </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112238867.png" alt="image-20210306112238867"></p><p><code>flex-wrap</code>  让弹性盒元素在必要的时候拆行</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112251352.png" alt="image-20210306112251352"></p><h3 id="子元素常用属性">子元素常用属性</h3><p>伸缩盒中的每一个元素称为一个项目。<br><code>flex-grow: number;</code>   一个数字，规定项目将相对于其他灵活的项目进行扩展的量。默认值是 0。</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}                </span><br><span class="line"><span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:orange}             </span><br><span class="line"><span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:red}    </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;伸缩盒模型flexbox&quot;&gt;伸缩盒模型flexbox&lt;/h2&gt;
&lt;p&gt;伸缩盒模型也叫弹性盒模型，或&lt;code&gt;flexBox&lt;/code&gt;。它决定一个盒子在其它盒子中的分布，以及如何处理可用的空间。使用该模型，可以轻松的创建“自适应”浏览器窗口的流动布局。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>display属性和盒子模型</title>
    <link href="http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-09-02T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="display属性">display属性</h2><p>​根据CSS规范的规定，每一个网页元素都有一个display属性，用于确定该元素的类型，每一个元素都有默认的display属性值，比如div元素，它的默认display属性值为“block”，称为块元素，而span元素的默认display属性值为“inline”，称为“行内”元素。</p><p>​       块元素与行元素是可以转换的，也就是说display的属性值可以由我们来改变 。</p><h3 id="display常见属性值">display常见属性值</h3><ol><li>none：隐藏对象</li><li>inline：指定对象为内联元素</li><li>block：指定对象为块元素</li><li>inline-block：指定对象为内联块元素</li><li>table-cell：指定对象作为表格单元格</li><li>flex：弹性盒</li></ol><h3 id="visibility-hidden和display-none和opacity-0的区别：">visibility:hidden和display:none和opacity:0的区别：</h3><ol><li><p><code>visibility:hidden</code>和<code>opacity:0</code>会将元素隐藏，但是物理位置实际存在。</p></li><li><p><code>display:none</code> 隐藏元素，不保留物理位置。</p></li></ol><p>​网页中大部分对象<code>默认是占用文档流</code>，也有一些对象是不占文档流的，比如表单中隐藏域。当然我们也可以让占用文档流的元素转换成不占文档流，这就要用到CSS中属性position、float、display来控制。默认情况下，所有元素都处在文档流中。</p><p>四种情况将<code>使得元素离开文档流：浮动float、绝对定位absolute、固定定位fixed、元素不显示display:none</code>，这种情况不占文档流的空间，而普通元素的位置基于文档流。</p><h2 id="盒子模型">盒子模型</h2><h3 id="W3C盒模型">W3C盒模型</h3><p>盒模型由内容(content)、填充(padding)、边框(border)、边界(margin)组成</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211024837.png" alt="image-20210305211024837"></p><h3 id="margin（外边距）">margin（外边距）</h3><p>围绕在元素边框周围的空白区域，会在元素外创建额外的空白区域，外边距是透明的。<br>语法：<code>margin:value;</code><br><code>margin-top/right/bottom/left: value;</code><br>value可取值为<code>像素，%，auto，负值</code></p><p>外边距简写</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211118212.png" alt="image-20210305211118212" style="zoom:80%;"><p>margin设置元素外边距的宽度，它有这么几个特点：</p><ol><li>块级元素的垂直相邻外边距会合并</li><li>行内元素实际上不占上下外边距。行内元素的的左右外边距不合并</li><li>浮动元素的外边距也不会合并</li><li>允许指定负的外边距值，不过使用时要小心</li></ol><h3 id="border（边框）">border（边框）</h3><p>border属性设置一个元素的边框，它有三个要素：<code>宽、样式、颜色</code>，统称“边框三要素”。三要素书写的时候一般如下顺序：</p><p>​<code>border：宽度 样式 颜色        border: 1px solid red;</code></p><p>​不过不按此顺序来写依然能正常显示。<code>div{ border: red solid 2px; }</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211414164.png" alt="image-20210305211414164"></p><p><code>border-style</code>设置边框的样式，有五种常用样式可选：</p><ul><li>点状dotted</li><li>实线solid</li><li>双线double   （ 需要最起码设置为3像素，不然显示不下）</li><li>虚线dashed</li><li>无边框none</li></ul><p>border的三要素可以统一写在”border”属性中，也可以单独设置。</p><p>​统一的写法：<code>border: 1px solid  red;</code><br>​单独设置的写法：</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">border-width</span>: ; </span><br><span class="line"><span class="attribute">border-style</span>: ;</span><br><span class="line"><span class="attribute">border-color</span>: ;</span><br></pre></td></tr></tbody></table></figure><h3 id="padding（内边距）">padding（内边距）</h3><p>内容区域和边框之间的空间。会扩大元素边框所占用的区域<br>语法：<code>padding:value;</code><br>单边设置<br><code>padding-top/right/bottom/left:value;</code>value可取值为像素，百分比，但不能为负数</p><p>内边距的简写</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><h3 id="怪异盒模型">怪异盒模型</h3><p>​盒子模型分两种，一种是符合W3C规范的标准例子模型，另一种是IE的盒子模型，IE的盒子模型也被叫怪异盒子。<br>​可以看到 IE 盒子模型也包括 margin、border、padding、content，不过，和标准 盒子模型不同的是：IE 盒子模型的宽，包含了 border 和 pading。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211844651.png" alt="image-20210305211844651"></p><h3 id="Box-sizing">Box-sizing</h3><p>​<code>box-sizing</code> 属性允许你以“W3C的盒模型”或“IE盒模型”来定义元素，以适应区域。换句话说，当前元素使用哪种盒模型，<code>可以由box-sizing属性来指定</code><br>​它有两个值<br>​<code>content-box（标准）</code><br>​padding和border不被包含在width和height内，<code>元素的实际大小为宽高+border+padding</code>，此为标准模式下的盒模型。</p><p>​<code>border-box（怪异）</code><br>​padding和border被包含在定义的width和height中，<code>元素实际的大小为你定义了多宽就是多宽</code>。此属性为怪异模式下的盒模型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;display属性&quot;&gt;display属性&lt;/h2&gt;
&lt;p&gt;​	根据CSS规范的规定，每一个网页元素都有一个display属性，用于确定该元素的类型，每一个元素都有默认的display属性值，比如div元素，它的默认display属性值为“block”，称为块元素，</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Position定位和z-index</title>
    <link href="http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/"/>
    <id>http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/</id>
    <published>2020-09-01T06:53:47.000Z</published>
    <updated>2021-05-24T04:20:43.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="position定位">position定位</h2><p>position属性指定一个元素（静态的，相对的，绝对或固定）的定位方法的类型。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305201823730.png" alt="image-20210305201823730"></p><h3 id="realtive">realtive</h3><p>以<code>自身为参照物</code>移动到指定的位置，并且<code>被定位的元素会占据原有的位置</code></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203011083.png" alt="image-20210305203011083" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203041348.png" alt="image-20210305203041348" style="zoom:50%;"><h3 id="absolute">absolute</h3><p>以其他元素作为参照物，移动指定距离，且不会占据原有的位置，关于 <code>absolute</code> 定位参考点的选择：</p><ol><li>如果元素的外层元素是非 <code>static</code> 定位（有除默认属性之外的定位属性），那么外层元素就成为了该元素的定位参考点。</li><li>如果元素的外层元素没有设置任何 <code>position</code> 的值，那么该元素将寻找离自己最近的设定过非默认 <code>position</code> 属性的外层元素作为参照物。</li><li>如果元素的外层元素没有找到设定为非默认 <code>positon</code> 属性的外层元素，那么此时定位参考元素变为 <code>body</code> ，或者说页面</li></ol><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203556950.png" alt="image-20210305203556950" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203705689.png" alt="image-20210305203705689" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d22{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d22"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305204434371.png" alt="image-20210305204434371" style="zoom:50%;"><h3 id="fixed">fixed</h3><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;2</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205431227.png" alt="image-20210305205431227"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205442554.png" alt="image-20210305205442554"></p><h2 id="z-index堆叠顺序">z-index堆叠顺序</h2><p>一旦修改了元素的定位方式，则元素可能会发生堆叠。可以<code>使用z-index属性来控制定位元素的出现顺序</code>。z-index仅能在定位的元素（使用了 <code>position</code> 非默认属性的元素）上生效<br>z-index属性：<br>值为数值，数值越大表示堆叠顺序越高，即离用户越近，可以设置为负值，表示离用户更远 ，一般不设置负值</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210239608.png" alt="image-20210305210239608" style="zoom:50%;"><p>可以发现后面的<code>div</code>会覆盖前面的，如果想让前面的覆盖后面的，可以设置 <code>z-index</code>：</p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210411571.png" alt="image-20210305210411571" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;position定位&quot;&gt;position定位&lt;/h2&gt;
&lt;p&gt;position属性指定一个元素（静态的，相对的，绝对或固定）的定位方法的类型。&lt;/p&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css3动画常用属性和阴影圆角</title>
    <link href="http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/</id>
    <published>2020-08-30T06:53:47.000Z</published>
    <updated>2021-05-24T04:14:45.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3的含义">CSS3的含义</h2><p>​<code>CSS3</code>是<code>CSS</code>（层叠样式表）技术的升级版本。<code>CSS3</code>完全向后兼容，不必改变现有的设计，浏览器将永远支持<code>CSS2</code>。<code>W3C</code>的<code>CSS3</code>规范仍在开发。但是，许多新的<code>CSS3</code>属性已在现代浏览器使用。</p><h2 id="浏览器内核以及其前缀">浏览器内核以及其前缀</h2><p>​<code>CSS</code>标准中各个属性都要经历从草案到推荐的过程，<code>css3</code>中的属性进展都不一样，浏览器厂商在标准尚未明确情况下提前支持会有风险，浏览器厂商对新属性的支持情况也不同，所以会加厂商前缀加以区分。如果某个属性已经从草案变为了或接近推荐方案，并且厂商已经完全实现了推荐属性，那就不用加厂商前缀。如<code>border-radius</code>已经很成熟，不用加前缀。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103253008.png" alt="image-20210306103253008"></p><p>​<code>根据不同的浏览器内核，css前缀会有不同</code>。最基本的浏览器内核有如下四种，其它的内核都是基于此四种进行再研发的。</p><ol><li><p><code>Gecko内核</code>      前缀为<code>-moz-</code>   火狐浏览器</p></li><li><p><code>Webkit内核</code>    前缀为<code>-webkit-</code>   也叫谷歌内核，chrome浏览器最先开发使用，safari浏览器也使用 该内核。国内很多浏览器也使用了<code>webkit内核</code>，如360极速、世界之窗、猎豹等。</p></li><li><p><code>Trident内核</code>    前缀为<code>-ms-</code>  也称IE内核</p></li><li><p><code>Presto内核</code>      前缀<code>-o-</code>   目前只有opera采用</p></li></ol><h3 id="圆角border-radius">圆角border-radius</h3><p>语法</p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>：value；四个角</span><br><span class="line"><span class="attribute">border-radius</span>：value value；左上右下、右上左下</span><br><span class="line"><span class="attribute">border-radius</span>：value value value value；</span><br><span class="line">代表设置对象左上角、右上角、右下角、左下角</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103337192.png" alt="image-20210306103337192" style="zoom:50%;"><h3 id="盒阴影box-shadow">盒阴影box-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">语法：<span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103327261.png" alt="image-20210306103327261"></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .shadow{</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">3px</span> darkred;</span></span><br><span class="line">        }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103724901.png" alt="image-20210306103724901"></p><h3 id="文字阴影text-shadow">文字阴影text-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">语法：<span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103735569.png" alt="image-20210306103735569"></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .text1{</span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: palegreen;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-shadow</span>: <span class="number">10px</span> -<span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span> ;</span></span><br><span class="line">       }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text1"</span>&gt;</span>学习猿地<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103747132.png" alt="image-20210306103747132"></p><h2 id="CSS3-渐变">CSS3 渐变</h2><p><a class="link" href="https://www.runoob.com/css3/css3-gradients.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>​<code>CSS3 渐变（gradients）</code>可以让你在两个或多个指定的颜色之间显示平稳的过渡。以前，你必须使用图像来实现这些效果。现在，使用 <code>CSS3 渐变（gradients）</code>，通过代码来实现渐变可以减少请求和节约带宽。</p><p><code>CSS3</code> 定义了两种类型的渐变（gradients）:</p><ul><li>线性渐变（Linear Gradients）: 向下/向上/向左/向右/对角方向<br><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code></li><li>径向渐变（Radial Gradients）: 由它们的中心定义<br><code>background: radial-gradient(center, shape， size, start-color, ..., last-color);</code><br>默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），它可以是值 <code>circle</code> 或 <code>ellipse</code>。其中，circle 表示圆形，ellipse 表示椭圆形</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103803293.png" alt="image-20210306103803293"></p><h2 id="CSS3-转换Transform（2D转换）">CSS3 转换Transform（2D转换）</h2><p><a class="link" href="https://www.cnblogs.com/aspnetjia/p/5139020.html">transform详解<i class="fas fa-external-link-alt"></i></a></p><p>​<code>CSS3</code>中的转换允许我们对元素进行旋转、缩放、移动或倾斜。它为分<code>2D转换 或 3D 转换。</code>在css2时代，如果要做一些图片转换角度，都依赖于<code>图片、Flash或JavaScript才能完成</code>。但是现在借助<code>CSS3</code>就可以轻松倾斜、缩放、移动以及翻转元素。通过<code>CSS</code>变形，可以让元素生成静态视觉效果，但也可以很容易结合<code>CSS3的transition和动画的keyframe</code>产生一些动画效果。</p><h3 id="转换Transform-2D的属性">转换Transform 2D的属性</h3><p>​通常的属性包含了属性名和属性值，而CSS3的transform属性是用函数来定义的。Transform 2D函数包括了<code>translate()、scale()、rotate()和skew()。</code></p><p>书写格式:<br><code>transform:函数名(x轴值，y轴值);</code></p><p>转换的效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104641628.png" alt="image-20210306104641628"></p><ol><li><p><code>translate()</code><br>translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。接受CSS的标准度量单位（px），translate(x,y)：转换，沿着X和Y轴移动元素。</p></li><li><p><code>rotate()</code><br>通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。它以deg为单位，代表了旋转的角度。</p></li><li><p><code>scale()</code><br>通过值把宽和高转换为原始尺寸的n倍，接受两个参数，前面的为宽，后面的为高。可取值：默认值为1，缩小：0-1 之间的数，放大：大于1的数</p></li><li><p><code>skew()</code><br>根据水平轴和垂直轴翻转，接受两个或一个值，两个值时前面为水平，后面为垂直的角度 ，一个值只是水平轴的角度。此函数是指元素的倾斜角度。</p></li></ol><h3 id="转换Transform-3D的属性">转换Transform 3D的属性</h3><p>Transform 3D常用函数有：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104709948.png" alt="image-20210306104709948"></p><h2 id="CSS3-过渡Transition">CSS3 过渡Transition</h2><p><a class="link" href="https://www.cnblogs.com/afighter/p/5731293.html">transition演示<i class="fas fa-external-link-alt"></i></a></p><h3 id="什么是过渡">什么是过渡</h3><p>使用<code>css</code>的属性值在一段时间内平滑的过渡，比如，鼠标悬停后，背景色在<code>1s</code>内，由白色平滑的过渡到红色<br>指定四个要素：</p><ul><li><p>过渡属性，如background、color等</p></li><li><p>过渡所需时间</p></li><li><p>过渡函数，即过渡的速度、方式等</p></li><li><p>过渡延迟时间，表示开始执行的时间</p></li></ul><p>触发过渡：通过用户的行为触发，如点击、悬浮等</p><h3 id="过渡属性">过渡属性</h3><p><code>transition-property: none|all|property;</code><br>多个属性用逗号隔开，可设置过渡的属性，颜色属性。取值为数值的属性：转换属性，渐变属性，阴影属性</p><h3 id="过渡时间">过渡时间</h3><p><code>transition-duration: s|ms;</code><br>默认值为0，意味着不会有效果，所以必须设置transition-duration属性</p><h3 id="过渡函数">过渡函数</h3><p><code>transition-timing-function: ;</code><br>取值：<br>ease：默认值，规定慢速开始，然后变快，然后慢速结束的过渡效果<br>linear：匀速<br>ease-in：规定以慢速开始，加速效果<br>ease-out：规定以慢速结束，减速效果<br>ease-in-out：规定以慢速开始和结束，先加速后减速效果</p><h3 id="过渡延迟">过渡延迟</h3><p><code>transition-delay: s|ms;</code><br>改变元素属性值后多长时间开始执行过渡效果</p><h3 id="简写属性transition">简写属性transition</h3><p>transition属性是一个简写属性，用于设置四个过渡属性<br><code>语法：transition:property duration timing-function delay;</code></p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span>{</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#1fb57b</span>;</span><br><span class="line">     <span class="attribute">transition</span>: background <span class="number">4s</span> linear <span class="number">1s</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="selector-id">#box</span><span class="selector-pseudo">:hover</span>{</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="CSS3-animation动画">CSS3 animation动画</h2><p><a class="link" href="https://www.runoob.com/css3/css3-animations.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>过渡属性只能模拟动画效果，animation属性可以制作类似Flash动画，通过关键帧控制动画的每一步，使元素从一种样式逐渐变化为另一种样式，实现复杂的动画效果。</p><h3 id="keyframes">@keyframes</h3><p>作用：用于声明动画，指定关键帧<br>帧：用于分解动画动作，每个帧代表某个时间点。定义每个帧上的动作</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306105920430.png" alt="image-20210306105920430"></p><h3 id="keyframes的语法">@keyframes的语法</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name  {</span><br><span class="line">    from|0%{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line">    percent{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line">    to|100%{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="animation属性">animation属性</h3><p><code>animation</code>属性用于控制动画，调用由<code>@keyframes</code>定义的动画，设置动画属性，如时间、次数等。animation属性是一个简写属性。<br>语法为：<code>animation:name  duration timing-function delay iteration-count direction;</code></p><h3 id="动画子属性">动画子属性</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">animation-name</span>: ;调用动画，规定需要和keyframes的名字一致</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-duration</span>: s|ms;动画完成一个周期所需要的时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-timing-function</span>: ;规定动画的速度变化类型</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-delay</span>:s|ms ;播放之前的延迟时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-iteration-count</span>: 数值|infinite;播放次数 infinite表示无限次播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-direction</span>: normal|alternate;动画播放方向,<span class="attribute">normal</span>为默认值，表示正常播放,alternate表示轮流播放，即动画会在奇数次正常播放，而在偶数次向后播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-fill-mode</span>: forwards;动画停在最后一帧，默认值为<span class="attribute">none</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-play-state</span>:paused|running; 属性规定动画正在运行还是暂停，默认值为running</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSS3的含义&quot;&gt;CSS3的含义&lt;/h2&gt;
&lt;p&gt;​	&lt;code&gt;CSS3&lt;/code&gt;是&lt;code&gt;CSS&lt;/code&gt;（层叠样式表）技术的升级版本。&lt;code&gt;CSS3&lt;/code&gt;完全向后兼容，不必改变现有的设计，浏览器将永远支持&lt;code&gt;CSS2&lt;/co</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Swagger入门</title>
    <link href="http://blog.sky123.top/2020/08/08/springboot/Swagger/"/>
    <id>http://blog.sky123.top/2020/08/08/springboot/Swagger/</id>
    <published>2020-08-08T02:01:25.000Z</published>
    <updated>2021-05-24T05:02:01.268Z</updated>
    
    <content type="html"><![CDATA[<p>学习目标：</p><ul><li>了解Swagger的作用和概念</li><li>了解前后端分离的概念</li><li>在Springboot中集成Swagger</li></ul><h2 id="Swagger简介">Swagger简介</h2><p>前后端分离：vue+springboot</p><ul><li>后端：控制层+服务层+数据访问层</li><li>前端：前端控制层+视图层</li></ul><p>前后端的好处：相对独立，松耦合，可以部署在不同的服务器。之间通过API接口通信</p><p>问题：</p><ul><li>前后端在集成协调的时候，无法做到"及时沟通，尽早解决"（由于两端都是独立开发），最终会导致问题集中爆发。</li></ul><p>解决方案：</p><ul><li>指定计划的提纲（schema），实时更新最新的API，降低集成的风险</li><li>早些年：使用word文档，不是很方便，对文档编写有一定的要求</li><li>前后端分离：<ul><li>测试接口工具：postman（不推荐再使用了）</li><li>后端提供接口，需要实时更新最新的改动</li></ul></li></ul><h2 id="Swagger">Swagger</h2><p>号称世界上最流行的 API框架，可以实现 API 与 API文档实时更新，支持多种语言（java，php…），直接运行可以在线测试接口。</p><p><a class="link" href="https://swagger.io/">swagger官网<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228101919079.png" alt="image-20210228101919079"></p><h3 id="SpringFox-3-0-0-发布">SpringFox 3.0.0 发布</h3><p>此版本的亮点：</p><blockquote><p>Spring5，Webflux支持（仅支持请求映射，尚不支持功能端点）。<br>Spring Integration支持。<br>SpringBoot支持springfox Boot starter依赖性（零配置、自动配置支持）。<br>支持OpenApi 3.0.3。<br>零依赖。几乎只需要spring-plugin，swagger-core ，现有的swagger2注释将继续工作并丰富openapi3.0规范。</p></blockquote><p>兼容性说明：</p><blockquote><p>需要Java 8<br>需要Spring5.x（未在早期版本中测试）<br>需要SpringBoot 2.2+（未在早期版本中测试）</p></blockquote><h3 id="swagger3-0-与2-xx配置差异">swagger3.0 与2.xx配置差异</h3><ol><li>应用主类（即Controller层）添加注解<code>@EnableOpenApi (swagger2是@EnableSwagger2)</code>。swagger配置类<code>SwaggerProperties.class</code>，与swagger2.xx 版本有差异。自定义一个配置类 <code>SwaggerConfiguration.class</code></li><li>访问地址：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a> (swagger2.xx版本访问的地址为http://localhost:8080/swagger-ui.html)</li></ol><h2 id="Springboot集成Swagger">Springboot集成Swagger</h2><p>新建springboot   web 项目</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102748582.png" alt="image-20210228102748582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102207420.png" alt="image-20210228102207420"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102317842.png" alt="image-20210228102317842"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228103855243.png" alt="image-20210228103855243"></p><p>导入相关依赖</p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Swagger</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228104926484.png" alt="image-20210228104926484"></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试访问：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228110125566.png" alt="image-20210228110125566"></p><h2 id="配置Swagger">配置Swagger</h2><h3 id="修改Swagger信息">修改Swagger信息</h3><p>配置的关键是配置一个关键类 <code>Docket</code></p><p>点击 <code>ctrl</code> 进入查看 <code>Docket</code>，在点击进入 <code>ApiInfo.</code> 可以看到默认的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172604042.png" alt="image-20210301172604042"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172619931.png" alt="image-20210301172619931"></p><p>因此配置代码为：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从配置文件中注入值</span></span><br><span class="line">    <span class="meta">@Value("${swagger.application-name}")</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Value("${swagger.enable}")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean swaggerEnabled;</span><br><span class="line">    <span class="meta">@Value("${swagger.application-description}")</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@Value("${swagger.name}")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value("${swagger.url}")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value("${swagger.email}")</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Value("${swagger.version}")</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="meta">@Value("${swagger.try-host}")</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">         * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(title)</span><br><span class="line">                .description(description)</span><br><span class="line">                <span class="comment">// 作者信息</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(name, url, email))</span><br><span class="line">                .version(version)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里是从 <code>application.yml</code> 配置文件中读取事先定义的值：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: 这是Swagger应用的名字</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"># ===== 自定义swagger配置 ===== #</span><br><span class="line">swagger:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  application-name: ${spring.application.name}</span><br><span class="line">  application-version: <span class="number">1.0</span></span><br><span class="line">  application-description: springfox swagger <span class="number">3.0</span>整合Demo（这里配置项目的描述）</span><br><span class="line">  <span class="keyword">try</span>-host: http:<span class="comment">//localhost:${server.port}</span></span><br><span class="line">  name: 项目负责人</span><br><span class="line">  email: <span class="number">142342423</span><span class="meta">@qq</span>.com</span><br><span class="line">  url: http:<span class="comment">//www.baidu.com</span></span><br><span class="line">  version: <span class="number">2.3</span><span class="number">.4</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>查看  <code>ApiInfoBuilder</code> 可以查看更多的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301180154288.png" alt="image-20210301180154288"></p><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172838848.png" alt="image-20210301172838848"></p><h3 id="配置扫描路径">配置扫描路径</h3><p><code>any()：</code>扫描全部</p><p><code>none()：</code>都不扫描</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181141539.png" alt="image-20210301181141539"></p><h4 id="包扫描">包扫描</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.swaggerdemo.controller"</span>))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="类注解扫描">类注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="方法注解扫描">方法注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="效果">效果</h4><p>没有了 <code>error</code>  的默认接口，只显示自己写的接口：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181946804.png" alt="image-20210301181946804"></p><h3 id="配置过滤路径">配置过滤路径</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">               .host(host)</span><br><span class="line">               <span class="comment">// 是否开启</span></span><br><span class="line">               .enable(swaggerEnabled).select()</span><br><span class="line">               .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">               .build();</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301182510169.png" alt="image-20210301182510169"></p><h3 id="配置Swagger的API分组">配置Swagger的API分组</h3><p>关键：Docket有个分组方法，但是只能配置一个分组</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">.groupName(<span class="string">"A"</span>)</span><br></pre></td></tr></tbody></table></figure><p>因此要配置多个分组，只需要注入多个 Docket 实例：</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"B"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"C"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">     * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">            .host(host)</span><br><span class="line">            .groupName(<span class="string">"A"</span>)</span><br><span class="line">            <span class="comment">// 是否开启</span></span><br><span class="line">            .enable(swaggerEnabled).select()</span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">            .build();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301190020294.png" alt="image-20210301190020294"></p><h3 id="配置接口注释">配置接口注释</h3><p><code>@Api：</code>用在controller类，描述API接口<br><code>@ApiOperation：</code>描述接口方法<br><code>@ApiModel：</code>描述对象<br><code>@ApiModelProperty：</code>描述对象属性<br><code>@ApiImplicitParams：</code>描述接口参数<br><code>@ApiResponses：</code>描述接口响应</p><p>新建实体类 <code>User</code></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel("关于实体类的描述")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@ApiModelProperty("关于实体类属性的描述")</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty("关于实体类属性的描述")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">//    public User(String username,String password){</span></span><br><span class="line"><span class="comment">//        this.username = username;</span></span><br><span class="line"><span class="comment">//        this.password = password;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    public User(){</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建接口</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="meta">@ApiOperation("描述接口方法")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name="name",value="姓名",dataTypeClass = String.class,required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@ApiResponses({</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 200, message = "请求成功"),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 400, message = "请求参数没填好"),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193506582.png" alt="image-20210301193506582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193519108.png" alt="image-20210301193519108"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193532477.png" alt="image-20210301193532477"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解Swagger的作用和概念&lt;/li&gt;
&lt;li&gt;了解前后端分离的概念&lt;/li&gt;
&lt;li&gt;在Springboot中集成Swagger&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Swagger简介&quot;&gt;Swagger简介&lt;/h2&gt;
&lt;p&gt;前后端</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="Swagger" scheme="http://blog.sky123.top/tags/Swagger/"/>
    
    <category term="Java" scheme="http://blog.sky123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot多环境切换</title>
    <link href="http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/"/>
    <id>http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2021-05-24T05:01:40.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="好处">好处</h2><ol><li><p>不同环境配置可以配置不同的参数,不用来回改参数</p></li><li><p>便于部署，提高效率，减少出错</p></li></ol><h2 id="步骤">步骤</h2><p>在默认文件中 <code>application.yml</code>  中 配置切换属性：</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure><p>新建 <code>application-dev.yml</code> 文件：</p><figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">这是开发环境</span></span><br></pre></td></tr></tbody></table></figure><p>启动后看到：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301185125610.png" alt="image-20210301185125610"></p><p>说明环境切换成功。</p><p>同理可以新建多个配置文件，<code>yml 配置方式</code>会自动识别。只需在默认的 <code>application.yml</code> 切换即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;好处&quot;&gt;好处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不同环境配置可以配置不同的参数,不用来回改参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;便于部署，提高效率，减少出错&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;
&lt;p&gt;在默认文件中 &lt;cod</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="SpringBoot" scheme="http://blog.sky123.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Javascript常用字符串功能方法</title>
    <link href="http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-02T06:04:46.000Z</published>
    <updated>2021-05-24T04:28:01.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript常用字符串功能方法">Javascript常用字符串功能方法</h2><h3 id="字符串转换">字符串转换</h3><p>字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=num.toString();    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>你同样可以这么做：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="built_in">String</span>(num);    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>或者，在简单点儿：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="string">""</span> + num;    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串分割">字符串分割</h3><p>将字符串进行拆分返回一个新的数组，JavaScript就给我们提供了一个非常方便的函数：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>);    <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo","woaiziji"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>);        <span class="comment">//["q","i","n","g","c","h","e","n","g","h","u","w","o","g","u","o","x","i","a","n","s","h","e","n","g",",","w","o","a","i","s","h","e","n","g","h","u","o",",","w","o","a","i","z","i","j","i"];</span></span><br></pre></td></tr></tbody></table></figure><p><code>split()</code>的第二个参数，表示返回的字符串数组的最大长度</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>,<span class="number">2</span>); <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>,<span class="number">8</span>); <span class="comment">//["q","i","n","g","c","h","e","n"];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串替换">字符串替换</h3><p>仅仅查找到字符串并不会是题目的停止，一般题目还经常会要求你去进行替换操作，那就继续看以下代码:</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"wozaijinxingzifuchuantihuancaozuo,zifuchuantihuano"</span>;</span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="string">"zifuchuan"</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/g</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo, tihuano</span></span><br></pre></td></tr></tbody></table></figure><p>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识g</p><h3 id="获取字符串长度">获取字符串长度</h3><p>获取字符串的长度经常会用到，方法很简单：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arrLength=mystr.length;    <span class="comment">//47</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查询子字符串">查询子字符串</h3><p>判断字符串内是否包含子串，不少开发者会使用for循环来判断，而忘记了JavaScript提供子串函数：</p><ul><li><code>indexOf()</code>，该Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.indexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.indexOf(<span class="string">"l"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.indexOf(<span class="string">"l"</span>,<span class="number">3</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>lastIndexOf()</code>，该方法对大小写敏感。返回字符串中一个子串最后一处出现的索引（从右到左搜索），如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.lastIndexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.lastIndexOf(<span class="string">"l"</span>);    <span class="comment">//9</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.lastIndexOf(<span class="string">"l"</span>,<span class="number">4</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="返回指定位置的字符或其字符编码值">返回指定位置的字符或其字符编码值</h3><p>查找给定位置的字符，可以使用如下函数：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.charAt(<span class="number">7</span>);    <span class="comment">//o</span></span><br></pre></td></tr></tbody></table></figure><p>同样，它的一个兄弟函数就是查找对应位置的字符编码值，如：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> charCode=mystr. charCodeAt(<span class="number">7</span>);    <span class="comment">//111</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串匹配">字符串匹配</h3><p>可以直接通过字符串进行匹配，也可以通过正则进行匹配，可能需要你对正则表达式有一定的了解，先来看看match()函数：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=mystr.match(<span class="string">"guo"</span>);    <span class="comment">//guo</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=mystr.match(<span class="string">"Guo"</span>);    <span class="comment">//nullvar regexp1=/\d+/g;</span></span><br><span class="line"><span class="keyword">var</span> regexp2=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> regexp3=<span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr2=mystr.match(regexp1);    <span class="comment">//["6","33"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp2);    <span class="comment">//["guo"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp3);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr3.index    <span class="comment">//11</span></span><br><span class="line">matchStr3.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>注意：1.此处使用字符串直接进行匹配，被匹配的字符串内包含要匹配的字符串时，返回所要匹配的字符串。</p><p>2.如果使用正则匹配字符串时，如果正则表达式没有 g (全局标识)标志，返回与正则匹配相同的结果。而且返回的数组拥有一个额外的  input 属性，该属性包含原始字符串。另外，还拥有一个 <code>index</code> 属性，该属性表示匹配结果在被字符串中的索引（以0开始）。如果正则表达式包含 g 标志，则该方法返回匹配字符串的数组。</p><p>再来看看使用<code>exec()</code>函数：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=regexp1.exec(mystr);  <span class="comment">//["guo"]var regexp2=/guo/;</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=regexp2.exec(mystr);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr1.index    <span class="comment">//11</span></span><br><span class="line">matchStr1.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>简单吧，仅仅是把正则和字符串换了个位置，即<code>exec()</code>函数是在正则上调用，传递字符串的参数。对于上面两个方法，匹配的结果都是返回第一个匹配成功的字符串，如果匹配失败则返回<code>null</code>。</p><p>再来看一个类似的函数<code>search()</code>：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr = <span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1 = <span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr = mystr.search(regexp1);    <span class="comment">//11</span></span><br></pre></td></tr></tbody></table></figure><p>进行正则匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1</p><h3 id="字符串连接">字符串连接</h3><p>可以将两个或多个字符串进行加法操作，同时可以使用<code>JavaScript</code>提供的<code>concat函数</code>：</p><p>先看加法操作进行字符串连接：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">"world!"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1+<span class="string">" "</span>+mystr2;    <span class="comment">//Hello world!</span></span><br></pre></td></tr></tbody></table></figure><p>是不是很简单呀，那继续看看<code>concat函数</code>吧：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">" world,"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr3=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr4=<span class="string">"guoxiansheng"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1.concat(mystr2+mystr3+<span class="string">" "</span>+mystr4);    <span class="comment">//Hello world,Hello guoxiansheng</span></span><br></pre></td></tr></tbody></table></figure><p><code>concat()函数</code>可以有多个参数，传递多个字符串，拼接多个字符串。</p><h3 id="字符串切割和提取">字符串切割和提取</h3><p>有三种可以从字符串中抽取和切割的方法：</p><p>第一种，<code>slice()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.slice(-<span class="number">3</span>);    <span class="comment">//ld!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.slice(-<span class="number">3</span>,-<span class="number">1</span>);    <span class="comment">//ld</span></span><br><span class="line"><span class="keyword">var</span> sliceStr3=mystr.slice(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr4=mystr.slice(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第二种：<code>substring()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substring(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substring(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第三种：<code>substr()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substr(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substr(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo wo</span></span><br></pre></td></tr></tbody></table></figure><p>注：1.<code>slice()</code> 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。<br>　　2.<code>substring()</code>只能非负整数，截取起始结束位置同slice()函数一致。</p><p>3.<code>substr()</code>与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。</p><p>以上三种函数未填第二参数时，自动截取起始位置到字符串末尾。</p><h3 id="字符串大小写转换">字符串大小写转换</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> lowCaseStr=mystr.toLowerCase();    <span class="comment">//hello world!</span></span><br><span class="line"><span class="keyword">var</span> upCaseStr=mystr. toUpperCase();    <span class="comment">//HELLO WORLD!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去空格">字符串去空格</h3><p><code>trim方法</code>用来删除字符串前后的空格</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"     hello world      "</span>;  </span><br><span class="line"><span class="keyword">var</span> trimStr=mystr.trim();    <span class="comment">//hello world</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去重">字符串去重</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"aahhgggsssjjj"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepeat</span>(<span class="params">msg</span>)</span>{  </span><br><span class="line">    <span class="keyword">var</span> res=[];  </span><br><span class="line">    <span class="keyword">var</span> arr=msg.split(<span class="string">""</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">        <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">            res.push(arr[i]);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">""</span>);  </span><br><span class="line">}  </span><br><span class="line">removeRepeat(str);    <span class="comment">//ahgsj </span></span><br></pre></td></tr></tbody></table></figure><h3 id="判断字符串中字符出现的次数">判断字符串中字符出现的次数</h3><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    1.先实现字符串去重  </span></span><br><span class="line"><span class="comment">    2.然后对去重后的数组用for循环操作，分别与原始数组中各个值进行比较，如果相等则count++,循环结束将count保存在sum数组中，然后将count重置为0  </span></span><br><span class="line"><span class="comment">    3.这样一来去重后的数组中的元素在原数组中出现的次数与sum数组中的元素是一一对应的  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"aacccbbeeeddd"</span>;  </span><br><span class="line"><span class="keyword">var</span> sum=[];  </span><br><span class="line"><span class="keyword">var</span> res=[];  </span><br><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">""</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">    <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">        res.push(arr[i]);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length;j++){  </span><br><span class="line">        <span class="keyword">if</span>(arr[j]==res[i]){  </span><br><span class="line">            count++;  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    sum.push(count);  </span><br><span class="line">    count=<span class="number">0</span>;  </span><br><span class="line">}  </span><br><span class="line"><span class="built_in">console</span>.log(res);    <span class="comment">//["a", "c", "b", "e", "d"]  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">var</span> str=(sum[i]%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">"偶数"</span>:<span class="string">"奇数"</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+sum[i]+<span class="string">"次"</span>);  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+str+<span class="string">"次"</span>);  </span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Javascript常用字符串功能方法&quot;&gt;Javascript常用字符串功能方法&lt;/h2&gt;
&lt;h3 id=&quot;字符串转换&quot;&gt;字符串转换&lt;/h3&gt;
&lt;p&gt;字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Javascript" scheme="http://blog.sky123.top/tags/Javascript/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="字符串" scheme="http://blog.sky123.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Javascript常用的21个数组方法</title>
    <link href="http://blog.sky123.top/2020/07/01/javascript/Javascript%E5%B8%B8%E7%94%A8%E7%9A%8421%E4%B8%AA%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/07/01/javascript/Javascript%E5%B8%B8%E7%94%A8%E7%9A%8421%E4%B8%AA%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-01T05:38:27.000Z</published>
    <updated>2021-05-24T04:28:01.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript常用的21个数组方法">Javascript常用的21个数组方法</h2><p>这七个数组方法</p><p><code>unshift();  push()；  shift();</code></p><p><code>pop(); sort();reverse();splice();</code>使用后数组是会被改变的。</p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">对应版本</th><th style="text-align:center">功能</th><th style="text-align:center">原数组是否改变</th></tr></thead><tbody><tr><td style="text-align:center">concat()</td><td style="text-align:center">ES5-</td><td style="text-align:center">合并数组，并返回合并之后的数据</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">join()</td><td style="text-align:center">ES5-</td><td style="text-align:center">使用分隔符，将数组转为字符串并返回</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">pop()</td><td style="text-align:center">ES5-</td><td style="text-align:center">删除最后一位，并返回删除的数据</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">shift()</td><td style="text-align:center">ES5-</td><td style="text-align:center">删除第一位，并返回删除的数据</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">unshift()</td><td style="text-align:center">ES5-</td><td style="text-align:center">在第一位新增一或多个数据，返回长度</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">push()</td><td style="text-align:center">ES5-</td><td style="text-align:center">在最后一位新增一或多个数据，返回长度</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">reverse()</td><td style="text-align:center">ES5-</td><td style="text-align:center">反转数组，返回结果</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">slice()</td><td style="text-align:center">ES5-</td><td style="text-align:center">截取指定位置的数组，并返回</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">sort()</td><td style="text-align:center">ES5-</td><td style="text-align:center">排序（字符规则），返回结果</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">splice()</td><td style="text-align:center">ES5-</td><td style="text-align:center">删除指定位置，并替换，返回删除的数据</td><td style="text-align:center">y</td></tr><tr><td style="text-align:center">toString()</td><td style="text-align:center">ES5-</td><td style="text-align:center">直接转为字符串，并返回</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">valueOf()</td><td style="text-align:center">ES5-</td><td style="text-align:center">返回数组对象的原始值</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">indexOf()</td><td style="text-align:center">ES5</td><td style="text-align:center">查询并返回数据的索引</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">lastIndexOf()</td><td style="text-align:center">ES5</td><td style="text-align:center">反向查询并返回数据的索引</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">forEach()</td><td style="text-align:center">ES5</td><td style="text-align:center">参数为回调函数，会遍历数组所有的项，回调函数接受三个参数，分别为value，index，self；forEach没有返回值</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">map()</td><td style="text-align:center">ES5</td><td style="text-align:center">同forEach，同时回调函数返回数据，组成新数组由map返回</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">filter()</td><td style="text-align:center">ES5</td><td style="text-align:center">同forEach，同时回调函数返回布尔值，为true的数据组成新数组由filter返回</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">every()</td><td style="text-align:center">ES5</td><td style="text-align:center">同forEach，同时回调函数返回布尔值，全部为true，由every返回true</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">some()</td><td style="text-align:center">ES5</td><td style="text-align:center">同forEach，同时回调函数返回布尔值，只要由一个为true，由some返回true</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">reduce()</td><td style="text-align:center">ES5</td><td style="text-align:center">归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduce返回</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">reduceRight()</td><td style="text-align:center">ES5</td><td style="text-align:center">反向归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduceRight返回</td><td style="text-align:center">n</td></tr></tbody></table><h3 id="1：concat">1：concat()</h3><p>功能：合并数组，可以合并一个或多个数组，会返回合并数组之后的数据，不会改变原来的数组；</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];<span class="keyword">var</span> str2 = [<span class="string">"world"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(str2));　　　　　　　　<span class="comment">//[12, 2, "hello", "world"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　<span class="comment">//[12,2,"hello"];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2：join">2：join()</h3><p>功能：将数组转为字符串并返回转化的字符串数据，不会改变原来的数组；</p><p>注意：()中用双引号包括自己想用的分隔符，默认为逗号，这里方便观察，我用了-</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="string">"world"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.join(<span class="string">"-"</span>));　　　　　　　　<span class="comment">//12-2-hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　<span class="comment">//[12, 2, "hello"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3：pop">3：pop()</h3><p>功能：删除数组的最后一位，并且返回删除的数据，会改变原来的数组</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.pop()　　　　　　　　<span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　<span class="comment">//[12, 2]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4：shift">4：shift()</h3><p>功能：删除数组的第一位数据，并且返回新数组的长度，会改变原来的数组</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.shift());　　　　　　<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　<span class="comment">//[2,"hello"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5：unshift">5：unshift()</h3><p>功能：在数组的首位新增一个或多数据，并且返回新数组的长度，会改变原来的数组</p><p>注意：<code>unshift()</code>方法返回的数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据，</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">"test"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.unshift(<span class="string">"你好"</span>));　　　　　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.unshift(<span class="string">"hello"</span>,<span class="string">"world"</span>));　　　　　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//["你好", 12, 2, "hello"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//["hello", "world", 43, 2, "test"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6：push">6：push()</h3><p>功能：在数组的最后一位新增一个或多个数据，并且返回新数组的长度，会改变原来的数组</p><p>注意：push()方法返回的是数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">"test"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.push(<span class="string">"你好"</span>));　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.push(<span class="string">"hello"</span>,<span class="string">"world"</span>));　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　<span class="comment">//[12, 2, "hello","你好"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　<span class="comment">//[43, 2, "test","hello", "world"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7：reverse">7：reverse()</h3><p>功能：将数组的数据进行反转，并且返回反转后的数组，会改变原数组</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.reverse());　　　　　　<span class="comment">//["hello", 2, 12]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　<span class="comment">//["hello", 2, 12]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8：sort">8：sort()</h3><p>功能：对数组内的数据进行排序(默认为升序)，并且返回排过序的新数组，会改变原来的数组</p><p>注意：</p><ol><li>这里的排序是针对字符的排序，先使用数组的<code>toString()</code>方法转为字符串，再逐位比较，3是大于12的，因为首位3&gt;1，不要与<code>Number型</code>的数据排序混淆</li><li>str2数组中增加了三个字符，可以看到，比较的时候，<code>zoom</code>是最大的，因为首位的英文字母通过ASCII码可以转为相应的数值，再根据数值比较</li></ol><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="string">"hello"</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.sort());<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.sort());<span class="comment">//[2, 2, 43, 5, 5, 92, "abc", "hello", "zoom"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//[2, 2, 43, 5, 5, 92, "abc", "hello", "zoom"]</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>排序问题</li></ol><p>参数：<code>sort(callback)</code> 如果需要按照数值排序，需要传参。sort(callback)，callback为回调函数，该函数应该具有两个参数，比较这两个参数，然后返回一个用于说明这两个值的相对顺序的数字（a-b）。其返回值如下：</p><ul><li>若 a 小于 b，返回一个小于 0 的值。</li><li>若 a 等于 b，则返回 0。</li><li>若 a 大于 b，则返回一个大于 0 的值。</li></ul><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];     </span><br><span class="line"><span class="built_in">console</span>.log(str3.sort(fn));　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,b</span>)</span>{</span><br><span class="line">　　　　<span class="keyword">return</span> a-b;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="9：slice">9：slice()</h3><p>功能：截取指定位置的数组，并且返回截取的数组，不会改变原数组</p><p>参数：<code>slice(startIndex, endIndex)</code></p><p>注意：可从已有的数组中返回选定的元素。该方法接收两个参数<code>slice(start,end)</code>，strat为必选，表示从第几位开始；end为可选，表示到第几位结束(不包含end位)，省略表示到最后一位；start和end都可以为负数，负数时表示从最后一位开始算起，如-1表示最后一位。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"T1"</span>,<span class="string">"J1"</span>,<span class="string">"L1"</span>,<span class="string">"L2"</span>,<span class="string">"M1"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>));        <span class="comment">//["J1","L1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>));          <span class="comment">//["J1","L1","L2","M1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">4</span>,-<span class="number">1</span>));      <span class="comment">//["J1","L1","L2"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">2</span>));         <span class="comment">//["Lily","M1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,-<span class="number">2</span>));       <span class="comment">//["J1","L1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);                   <span class="comment">//["T1","J1","L1","L2","M1"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10：splice">10：splice()</h3><p>功能：向数组中添加，或从数组删除，或替换数组中的元素，然后返回被删除/替换的元素。</p><p>参数：<code>splice(start,num,data1,data2,...);</code> 所有参数全部可选。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"a"</span>,<span class="string">"b"</span>));<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//["Tom", "Jack", "a", "b", "Lucy", "Lily", "May"]---原数组改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="11：toString">11：toString()</h3><p>功能：将数组转换成字符串，类似于没有参数的<code>join()</code>。该方法会在数据发生隐式类型转换时被自动调用，如果手动调用，就是直接转为字符串。不会改变原数组</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.toString()); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="12：valueOf">12：valueOf()</h3><p>功能：返回数组的原始值（一般情况下其实就是数组自身），一般由js在后台调用，并不显式的出现在代码中</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf()); <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="comment">//为了证明返回的是数组自身</span></span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf() == str);<span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="13：IndexOf">13：IndexOf()</h3><p>功能：根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引</p><p>参数：<code>indexOf(value, start)</code>;value为要查询的数据；start为可选，表示开始查询的位置，当start为负数时，从数组的尾部向前数；如果查询不到value的存在，则方法返回-1</p><p>注意：如果找到该数据，立即返回该数据的索引，不再往后继续查找</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>));        <span class="comment">//2</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">3</span>));      <span class="comment">//3</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">4</span>));      <span class="comment">//-1</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">1</span>));     <span class="comment">//-1</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">3</span>));     <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14：lastIndexOf">14：lastIndexOf()</h3><p>功能：根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引</p><p>参数：<code>indexOf(value, start)</code>;value为要查询的数据；start为可选，表示开始查询的位置，当start为负数时，从数组的尾部向前数；如果查询不到value的存在，则方法返回-1</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>));        <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">3</span>));      <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">4</span>));      <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">1</span>));     <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">3</span>));     <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="15：forEach">15：forEach()</h3><p>功能：ES5新增的方法，用来遍历数组，没有返回值，</p><p>参数：<code>forEach(callback)</code>;callback默认有三个参数，分别为value(遍历到的数组的数据)，index(对应的索引)，self(数组自身)。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">     <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self));</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 打印结果为：</span></span><br><span class="line"><span class="comment">// Tom--0--true</span></span><br><span class="line"><span class="comment">// Jack--1--true</span></span><br><span class="line"><span class="comment">// Lucy--2--true</span></span><br><span class="line"><span class="comment">// Lily--3--true</span></span><br><span class="line"><span class="comment">// May--4--true</span></span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//undefined---forEach没有返回值</span></span><br><span class="line"><span class="comment">//该方法为遍历方法，不会修改原数组</span></span><br></pre></td></tr></tbody></table></figure><h3 id="16：map">16：map()</h3><p>功能：</p><ol><li>同<code>forEach</code>功能；</li><li>map的回调函数会将执行结果返回，最后map将所有回调函数的返回值组成新数组返回。</li></ol><p>参数：<code>map(callback)</code>;callback默认有三个参数，分别为value，index，self。跟上面的forEach()的参数一样</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：每次回调函数的返回值被map组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi:"</span>+value;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);     <span class="comment">//["hi:Tom", "hi:Jack", "hi:Lucy", "hi:Lily", "hi:May"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);   <span class="comment">//["Tom", "Jack", "Lucy", "Lily", "May"]---原数组未改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="17：filter">17：filter()</h3><p>功能：1.同<code>forEach</code>功能；2.<code>filter</code>的回调函数需要返回布尔值，当为true时，将本次数组的数据返回给filter，最后filter将所有回调函数的返回值组成新数组返回（此功能可理解为“过滤”）。</p><p>参数：<code>filter(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：当回调函数的返回值为true时，本次的数组值返回给filter，被filter组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);         <span class="comment">//["Jack", "Lucy", "Lily"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);       <span class="comment">//["Tom", "Jack", "Lucy", "Lily", "May"]---原数组未改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="18：every">18：every()</h3><p>功能：判断数组中每一项是否都满足条件，只有所有项都满足条件，才会返回true。</p><p>参数：<code>every()</code>接收一个回调函数作为参数，这个回调函数需要有返回值，<code>every(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><p>功能1：当回调函数的返回值为true时，类似于<code>forEach</code>的功能，遍历所有；如果为false，那么停止执行，后面的数据不再遍历，停在第一个返回false的位置。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">//因为回调函数中没有return true，默认返回undefined，等同于返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &lt; <span class="number">4</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">//因为当遍历到Jack时，回调函数到return返回false，此时Jack已经遍历，但是后面数据就不再被遍历了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br><span class="line">    <span class="comment">//因为每个回调函数的返回值都是true，那么会遍历数组所有数据，等同于forEach功能</span></span><br></pre></td></tr></tbody></table></figure><p>功能2：当每个回调函数的返回值都为true时，every的返回值为true，只要有一个回调函数的返回值为false，every的返回值都为false</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">2</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="19：some">19：some()</h3><p>功能：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p><p>参数：<code>some()</code>接收一个回调函数作为参数，这个回调函数需要有返回值，<code>some(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><p>功能1：因为要判断数组中的每一项，只要有一个回调函数返回true，some都会返回true，所以与every正好相反，当遇到一个回调函数的返回值为true时，可以确定结果，那么停止执行，后面都数据不再遍历，停在第一个返回true的位置；当回调函数的返回值为false时，需要继续向后执行，到最后才能确定结果，所以会遍历所有数据，实现类似于<code>forEach</code>的功能，遍历所有。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br></pre></td></tr></tbody></table></figure><p>功能2：与every相反，只要有一个回调函数的返回值都为true，some的返回值为true，所有回调函数的返回值为false，some的返回值才为false</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">4</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="20：reduce">20：reduce()</h3><p>功能：从数组的第一项开始，逐个遍历到最后，迭代数组的所有项，然后构建一个最终返回的值。</p><p>参数：<code>reduce()</code>接收一个或两个参数：第一个是回调函数，表示在数组的每一项上调用的函数；第二个参数（可选的）作为归并的初始值，被回调函数第一次执行时的第一个参数接收。 <code>reduce(callback,initial)</code>;callback默认有四个参数，分别为<code>prev，now，index，self</code>。  callback返回的任何值都会作为下一次执行的第一个参数。  如果initial参数被省略，那么第一次迭代发生在数组的第二项上，因此callback的第一个参数是数组的第一项，第二个参数就是数组的第二项。</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//demo1:不省略initial参数，回调函数没有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    }, <span class="number">2019</span>)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// 2019--10--0--true</span></span><br><span class="line">    <span class="comment">// undefined--20--1--true</span></span><br><span class="line">    <span class="comment">// undefined--30--2--true</span></span><br><span class="line">    <span class="comment">// undefined--40--3--true</span></span><br><span class="line">    <span class="comment">// undefined--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数没有return，所以从第二次开始，prev拿到的是undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:省略initial参数，回调函数没有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：第一次，回调函数的第一个参数是数组的第一项。第二个参数就是数组的第二项</span></span><br><span class="line">    <span class="comment">// 10--20--1--true</span></span><br><span class="line">    <span class="comment">// undefined--30--2--true</span></span><br><span class="line">    <span class="comment">// undefined--40--3--true</span></span><br><span class="line">    <span class="comment">// undefined--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数没有return，所以从第二次开始，prev拿到的是undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:不省略initial参数，回调函数有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }, <span class="number">2019</span>)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// 2019--10--0--true</span></span><br><span class="line">    <span class="comment">// hello--20--1--true</span></span><br><span class="line">    <span class="comment">// hello--30--2--true</span></span><br><span class="line">    <span class="comment">// hello--40--3--true</span></span><br><span class="line">    <span class="comment">// hello--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数有return，所以从第二次开始，prev拿到的是回调函数return的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo4:省略initial参数，回调函数有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：第一次，回调函数的第一个参数是数组的第一项。第二个参数就是数组的第二项</span></span><br><span class="line">    <span class="comment">// 10--20--1--true</span></span><br><span class="line">    <span class="comment">// hello--30--2--true</span></span><br><span class="line">    <span class="comment">// hello--40--3--true</span></span><br><span class="line">    <span class="comment">// hello--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数有return，所以从第二次开始，prev拿到的是回调函数return的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo5：使用reduce计算数组中所有数据的和</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> prev + now;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(sum);      <span class="comment">//150</span></span><br><span class="line">    <span class="comment">// 回调函数的最后一次return的结果被返回到reduce方法的身上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo6：使用reduce计算数组中所有数据的和</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> prev + now;</span><br><span class="line">    }, <span class="number">8</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(sum);      <span class="comment">//158</span></span><br><span class="line">    <span class="comment">// 回调函数的最后一次return的结果被返回到reduce方法的身上</span></span><br><span class="line">    <span class="comment">// 因为reduce有第二个参数initial，在第一次执行时被计算，所以最终结果被加上8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="21：reduceRight">21：reduceRight()</h3><p>功能：（与reduce类似）从数组的最后一项开始，向前逐个遍历到第一位，迭代数组的所有项，然后构建一个最终返回的值。</p><p>参数：<code>同reduce。 demo：同reduce</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Javascript常用的21个数组方法&quot;&gt;Javascript常用的21个数组方法&lt;/h2&gt;
&lt;p&gt;这七个数组方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unshift();	  push()；  shift();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pop();	 s</summary>
      
    
    
    
    
    <category term="Javascript" scheme="http://blog.sky123.top/tags/Javascript/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="数组" scheme="http://blog.sky123.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记07-Promise和axios</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Promise%E5%92%8Caxios/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Promise%E5%92%8Caxios/</id>
    <published>2020-05-04T23:45:01.000Z</published>
    <updated>2021-05-24T05:07:11.370Z</updated>
    
    <content type="html"><![CDATA[<h1>Promise</h1><h2 id="什么是Promise">什么是Promise?</h2><p>ES6中一个非常重要和好用的特性就是Promise。但是初次接触Promise会一脸懵逼，这TM是什么东西？</p><p>看看官方或者一些文章对它的介绍和用法，也是一头雾水。</p><p><code>Promise到底是做什么的呢？Promise是异步编程的一种解决方案。</code></p><p>那什么时候我们会来处理异步事件呢？一种很常见的场景应该就是网络请求了。</p><p><code>我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。</code></p><p><code>所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。</code></p><p>如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。但是，当网络请求非常复杂时，就会出现回调地狱。</p><h3 id="网络请求的回调地狱">网络请求的回调地狱</h3><p>我们来考虑下面的场景(有夸张的成分)：<br>我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2<br>我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3<br>我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4<br>发送网络请求url4，获取最终的数据data4</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180021363.png" alt="image-20201001180021363"></p><p>上面的代码有什么问题吗？</p><p>正常情况下，不会有什么问题，可以正常运行并且获取我们想要的结果。<br><code>但是，这样额代码难看而且不容易维护。我们更加期望的是一种更加优雅的方式来进行这种异步操作。</code></p><p>如何做呢？就是使用Promise。Promise可以以一种非常优雅的方式来解决这个问题。</p><h2 id="Promise的使用">Promise的使用</h2><h3 id="定时器的异步事件">定时器的异步事件</h3><p>我们先来看看Promise最基本的语法。这里，我们用一个定时器来模拟异步事件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180144293.png" alt="image-20201001180144293"></p><p>假设下面的data是从网络上1秒后请求的数据console.log就是我们的处理方式。</p><p>这是我们过去的处理方式，我们将它换成Promise代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180150141.png" alt="image-20201001180150141"></p><p>这个例子会让我们感觉脱裤放屁，多此一举</p><p>首先，下面的Promise代码明显比上面的代码看起来还要复杂。<br>其次，下面的Promise代码中包含的resolve、reject、then、catch都是些什么东西？</p><p>我们先不管第一个复杂度的问题，因为这样的一个屁大点的程序根本看不出来Promise真正的作用。</p><h3 id="定时器异步事件解析">定时器异步事件解析</h3><p>我们先来认认真真的读一读这个程序到底做了什么？new Promise很明显是创建一个Promise对象</p><p>小括号中((resolve, reject) =&gt; {})也很明显就是一个函数，而且我们这里用的是之前刚刚学习过的箭头函数。<br>但是resolve, reject它们是什么呢？</p><p>我们先知道一个事实：<code>在创建Promise时，传入的这个箭头函数是固定的（一般我们都会这样写）</code></p><p>resolve和reject它们两个也是函数，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。<br>成功还是失败？</p><p>如果是成功的，那么通常我们会调用resolve(messsage)，这个时候，我们后续的then会被回调。<br>如果是失败的，那么通常我们会调用reject(error)，这个时候，我们后续的catch会被回调。</p><p>OK，这就是Promise最基本的使用了。</p><h3 id="Promise三种状态">Promise三种状态</h3><p>首先, 当我们开发中有异步操作时, 就可以给异步操作包装一个Promise<br>异步操作之后会有三种状态我们一起来看一下这三种状态:</p><p>pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p><p>fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</p><p>reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180314041.png" alt="image-20201001180314041"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180320624.png" alt="image-20201001180320624"></p><h2 id="Promise链式调用">Promise链式调用</h2><p>我们在看Promise的流程图时，发现无论是then还是catch都可以返回一个Promise对象。<br>所以，我们的代码其实是可以进行链式调用的：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180432443.png" alt="image-20201001180432443"></p><p>这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了<br>Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数<br>Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数</p><h3 id="链式调用简写">链式调用简写</h3><p>简化版代码：<br>如果我们希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据<br>注意下面的代码中，我讲return Promise.resovle(data)改成了return data<br>结果依然是一样的</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180530409.png" alt="image-20201001180530409"></p><h1>网络模块封装</h1><ul><li>常见的网络请求模块，以及优缺点对比。</li><li>JSONP的原理和封装<ul><li>JSONP原理回顾</li><li>JSONP请求封装</li></ul></li><li>axios的内容详解<ul><li>认识axios网络模块</li><li>发送基本请求</li><li>axios创建实例</li><li>axios拦截器的使用</li></ul></li></ul><h2 id="选择什么网络模块">选择什么网络模块?</h2><p>Vue中发送网络请求有非常多的方式, 那么, 在开发中, 如何选择呢?</p><p>选择一: 传统的Ajax是基于XMLHttpRequest(XHR)。为什么不用它呢?</p><p>非常好解释, 配置和调用方式等非常混乱。编码起来看起来就非常蛋疼。</p><p>所以真实开发中很少直接使用, 而是使用jQuery-Ajax</p><p>选择二: 在前面的学习中, 我们经常会使用jQuery-Ajax。相对于传统的Ajax非常好用.</p><p>为什么不选择它呢?首先, 我们先明确一点: 在Vue的整个开发中都是不需要使用jQuery了.</p><p>那么, 就意味着为了方便我们进行一个网络请求, 特意引用一个jQuery, 你觉得合理吗?<br>jQuery的代码1w+行.<br>Vue的代码才1w+行.</p><p>完全没有必要为了用网络请求就引用这个重量级的框架.</p><p>选择三: 官方在Vue1.x的时候, 推出了Vue-resource。Vue-resource的体积相对于jQuery小很多。另外Vue-resource是官方推出的.为什么不选择它呢?</p><p>在Vue2.0退出后, Vue作者就在GitHub的Issues中说明了去掉vue-resource, 并且以后也不会再更新.</p><p>那么意味着以后vue-reource不再支持新的版本时, 也不会再继续更新和维护.</p><p>对以后的项目开发和维护都存在很大的隐患.</p><p><code>选择四: 在说明不再继续更新和维护vue-resource的同时, 作者还推荐了一个框架: axios为什么用它呢?</code></p><p><code>axios有非常多的优点, 并且用起来也非常方便.</code></p><h2 id="jsonp">jsonp</h2><p>在前端开发中, 我们一种常见的网络请求方式就是JSONP。使用JSONP最主要的原因往往是为了解决跨域访问的问题.</p><p>JSONP的原理是什么呢?</p><p>JSONP的核心在于通过<code>&lt;script&gt;</code>标签的src来帮助我们请求数据.</p><p>原因是我们的项目部署在<code>domain1.com</code>服务器上时, 是不能直接访问<code>domain2.com</code>服务器上的资料的.</p><p>这个时候, 我们利用<code>&lt;script&gt;</code>标签的src帮助我们去服务器请求到数据, 将数据当做一个javascript的函数来执行, 并且执行</p><p>的过程中传入我们需要的json.<br>所以, 封装jsonp的核心就在于我们监听window上的jsonp进行回调时的名称.<br>JSONP如何封装呢?<br>我们一起自己来封装一个处理JSONP的代码吧.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181211558.png" alt="image-20201001181211558"></p><h3 id="JSONP封装">JSONP封装</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181303298.png" alt="image-20201001181303298"></p><h2 id="为什么选择axios">为什么选择axios?</h2><p>作者推荐和功能特点</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181347060.png" alt="image-20201001181347060"></p><p>功能特点:</p><p>在浏览器中发送 XMLHttpRequests 请求</p><p>在 node.js 中发送 http请求</p><p>支持 Promise API</p><p>拦截请求和响应</p><p>转换请求和响应数据</p><p><code>补充: axios名称的由来? 个人理解。没有具体的翻译。axios: ajax i/o system.</code></p><h3 id="axiox请求方式">axiox请求方式</h3><p>支持多种请求方式:</p><p>axios(config)</p><p>axios.request(config)</p><p>axios.get(url[, config])</p><p>axios.delete(url[, config])</p><p>axios.head(url[, config])</p><p>axios.post(url[, data[, config]])</p><p>axios.put(url[, data[, config]])</p><p>axios.patch(url[, data[, config]])</p><h4 id="发送get请求演示">发送get请求演示</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181523520.png" alt="image-20201001181523520"></p><h4 id="发送并发请求">发送并发请求</h4><p>有时候, 我们可能需求同时发送两个请求。使用axios.all, 可以放入多个请求的数组.</p><p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181609571.png" alt="image-20201001181609571"></p><p>在上面的示例中, 我们的BaseURL是固定的。事实上, 在开发中可能很多参数都是固定的。这个时候我们可以进行一些抽取, 也可以利用axiox的全局配置</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = ‘<span class="number">123.207</span><span class="number">.32</span><span class="number">.32</span>:<span class="number">8000</span>’</span><br><span class="line">axios.defaults.headers.post[‘Content-Type’] = ‘application/x-www-form-urlencoded’;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181716339.png" alt="image-20201001181716339"></p><h3 id="常见的配置选项">常见的配置选项</h3><p>请求地址：url: ‘/user’请求类型：method: ‘get’,</p><p>请根路径：baseURL: ‘<a class="link" href="http://www.mt.com/api">http://www.mt.com/api<i class="fas fa-external-link-alt"></i></a>’请求前的数据处理：transformRequest:[function(data){}],</p><p>请求后的数据处理：transformResponse: [function(data){}],</p><p>自定义的请求头：headers:{‘x-Requested-With’:‘XMLHttpRequest’},</p><p>URL查询对象：params:{ id: 12 }查询对象序列化函数：paramsSerializer: function(params){ }</p><p>request body：data: { key: ‘aa’},</p><p>超时设置s：timeout: 1000,</p><p>跨域是否带Token：withCredentials: false,</p><p>自定义请求处理：adapter: function(resolve, reject, config){},</p><p>身份验证信息：auth: { uname: ‘’, pwd: ‘12’},</p><p>响应的数据格式 json / blob /document /arraybuffer / text / stream：responseType: ‘json’,</p><h3 id="axios的实例">axios的实例</h3><p>为什么要创建axios的实例呢?当我们从axios模块中导入对象时, 使用的实例是默认的实例.</p><p>当给该实例设置一些默认配置时, 这些配置就被固定下来了。但是后续开发中, 某些配置可能会不太一样.</p><p>比如某些请求需要使用特定的baseURL或者timeout或者content-Type等。这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182018472.png" alt="image-20201001182018472"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182031415.png" alt="image-20201001182031415"></p><h3 id="拦截器">拦截器</h3><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。如何使用拦截器呢？</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182111819.png" alt="image-20201001182111819"></p><p>请求拦截可以做到的事情：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182137248.png" alt="image-20201001182137248"></p><p>请求拦截中错误拦截较少，通常都是配置相关的拦截。可能的错误比如请求超时，可以将页面跳转到一个错误页面中。</p><p>响应拦截中完成的事情：</p><p>响应的成功拦截中，主要是对数据进行过滤。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182210645.png" alt="image-20201001182210645"></p><p>响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182214712.png" alt="image-20201001182214712"></p><h2 id="项目开发中的网络模块使用">项目开发中的网络模块使用</h2><p>目录结构</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182916556.png" alt="image-20201001182916556"></p><p>在 request.js 中封装网络请求模块</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="comment">//import Cookie from 'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = {</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    msg: <span class="string">"请求异常"</span>,</span><br><span class="line">    data: {}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, data, type</span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">//自动给请求加上token和collegeId，因为mock原因暂时注释掉</span></span><br><span class="line">        <span class="comment">// try {</span></span><br><span class="line">        <span class="comment">//     // 获取登录数据</span></span><br><span class="line">        <span class="comment">//     if (Cookie.get('token') !== undefined) {</span></span><br><span class="line">        <span class="comment">//         const token = JSON.parse(Cookie.get('token'))</span></span><br><span class="line">        <span class="comment">//         console.log('token信息',token)</span></span><br><span class="line">        <span class="comment">//         if (data !== undefined &amp;&amp; data !== null ) {</span></span><br><span class="line">        <span class="comment">//             data.token = token.token</span></span><br><span class="line">        <span class="comment">//             data.collegeId = token.collegeId</span></span><br><span class="line">        <span class="comment">//         } else {</span></span><br><span class="line">        <span class="comment">//             data = {</span></span><br><span class="line">        <span class="comment">//                 token: token.token,</span></span><br><span class="line">        <span class="comment">//                 collegeId: token.collegeId</span></span><br><span class="line">        <span class="comment">//             }</span></span><br><span class="line">        <span class="comment">//         }</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// } catch (e) {</span></span><br><span class="line">        <span class="comment">//     //</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// 判断请求类型</span></span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'get'</span>) {</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> axios.get(url, {<span class="attr">params</span>: data})).data</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'post'</span>) {</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> axios.post(url, QS.stringify(data), {<span class="attr">headers</span>: {<span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>}})).data</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (e) {</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>api文件夹中调用 request.js 封装的 request函数</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 登录、注册、忘记密码模块</span></span><br><span class="line"><span class="keyword">import</span> { request } <span class="keyword">from</span> <span class="string">'../util/request.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>{ <span class="comment">// 登录接口</span></span><br><span class="line">    <span class="keyword">return</span> request( <span class="string">'/api/login/collegeAdmin'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">data</span>) </span>{ <span class="comment">// 注册接口</span></span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/register'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">systemMessage</span>(<span class="params">data</span>) </span>{ <span class="comment">// 获取院管理员信息</span></span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'/api/account/msg'</span>, data, <span class="string">'get'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changePassword</span>(<span class="params">data</span>) </span>{ <span class="comment">// 获取院管理员信息</span></span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'/api/account/password/change'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在action中的调用</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">changePasswd</span>(<span class="params">{ commit },data</span>)</span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">           changePassword(data).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">               <span class="keyword">if</span> (res.code === <span class="number">1</span>){</span><br><span class="line">                   resolve(res.msg)</span><br><span class="line">                   commit(<span class="string">'NULL'</span>)</span><br><span class="line">               } <span class="keyword">else</span> {</span><br><span class="line">                   reject(res.msg)</span><br><span class="line">               }</span><br><span class="line">           }).catch(<span class="function"><span class="params">error</span>=&gt;</span>{</span><br><span class="line">               reject(error)</span><br><span class="line">           })</span><br><span class="line">       })</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Promise&lt;/h1&gt;
&lt;h2 id=&quot;什么是Promise&quot;&gt;什么是Promise?&lt;/h2&gt;
&lt;p&gt;ES6中一个非常重要和好用的特性就是Promise。但是初次接触Promise会一脸懵逼，这TM是什么东西？&lt;/p&gt;
&lt;p&gt;看看官方或者一些文章对它的介绍和用法，也是</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记06-vuex</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Vuex/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Vuex/</id>
    <published>2020-05-04T22:45:01.000Z</published>
    <updated>2021-05-24T05:08:39.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vuex是做什么的">Vuex是做什么的?</h2><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。<br>它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h3 id="状态管理到底是什么？">状态管理到底是什么？</h3><p>状态管理模式、集中式存储管理这些名词听起来就非常高大上，让人捉摸不透。其实，你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。<br><code>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。</code>那么，多个组件是不是就可以共享这个对象中的所有变量属性了呢？等等，如果是这样的话，为什么官方还要专门出一个插件Vuex呢？难道我们不能自己封装一个对象来管理吗？<br><code>当然可以，只是我们要先想想VueJS带给我们最大的便利是什么呢？没错，就是响应式。</code><br>如果你自己封装实现一个对象能不能保证它里面所有的属性做到响应式呢？当然也可以，只是自己封装可能稍微麻烦一些。不用怀疑，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它就可以了。</p><h3 id="管理什么状态呢">管理什么状态呢?</h3><p>但是，有什么状态时需要我们在多个组件间共享的呢？如果你做过大型开放，你一定遇到过多个状态，在多个界面间的共</p><p>享问题。比如用户的登录状态、用户名称、头像、地理位置信息等等。比如商品的收藏、购物车中的物品等等。</p><p>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的（待会儿我们就可以看到代码了，莫着急）。</p><p>OK，从理论上理解了状态管理之后，让我们从实际的代码再来看看状态管理。</p><p><code>毕竟，Talk is cheap, Show me the code.(来自Linus)我们先来看看但界面的状态管理吧.</code></p><h3 id="单界面的状态管理">单界面的状态管理</h3><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情。什么意思呢？我们来看下面的图片。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101301530.png" alt="image-20201001101301530"></p><p>这图片中的三种东西，怎么理解呢？<br>State：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）<br>View：视图层，可以针对State的变化，显示不同的信息。（这个好理解吧？）<br>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</p><p>写点代码，加深理解：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101328897.png" alt="image-20201001101328897"></p><p>看下右边的代码效果, 肯定会实现吧?</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101338978.png" alt="image-20201001101338978"></p><p>在这个案例中，我们有木有状态需要管理呢？没错，就是个数counter。<br><code>counter需要某种方式被记录下来，也就是我们的State。</code></p><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），<code>需要去更新状态，也就是我们的Actions</code></p><p>这不就是上面的流程图了吗？</p><h3 id="多界面状态管理">多界面状态管理</h3><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</p><p><code>多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）</code></p><p>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的<br>状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。<br>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</p><p>没错，<code>Vuex就是为我们提供这个大管家的工具。</code></p><p><code>全局单例模式（大管家）</code><br>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。<br>之后，你们每个 view，按照我规定好的规定，进行访问和修改等操作。<br>这就是Vuex背后的基本思想。</p><h3 id="Vuex状态管理图例">Vuex状态管理图例</h3><p>一起在来看一副官方给出的图片</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101635053.png" alt="image-20201001101635053"></p><h2 id="Vuex的基本使用">Vuex的基本使用</h2><p>我们还是实现一下之前简单的案例</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101751123.png" alt="image-20201001101751123"></p><p>首先，我们需要在某个地方存放我们的Vuex代码：<br>这里，我们先创建一个文件夹store，并且在其中创建一个index.js文件<br>在index.js文件中写入如下代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101815560.png" alt="image-20201001101815560"></p><p>其次，我们让所有的Vue组件都可以使用这个store对象。来到main.js文件，导入store对象，并且放在new Vue中</p><p>这样，<code>在其他Vue组件中，我们就可以通过this.$store的方式，获取到这个store对象了</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101925409.png" alt="image-20201001101925409"></p><p>好的，这就是使用Vuex最简单的方式了。我们来对使用步骤，做一个简单的小节：</p><ol><li><p>提取出一个公共的store对象，用于保存在多个组件中共享的状态</p></li><li><p>将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到</p></li><li><p>在其他组件中使用store对象中保存的状态即可。通过this.$store.state.属性的方式来访问状态</p><p>通过this.$store.commit(‘mutation中方法’)来修改状态</p><p>注意事项：<code>我们通过提交mutation的方式，而非直接改变store.state.count。</code><br>这是因为Vuex可以更明确的追踪状态的变化，<code>所以不要直接改变store.state.count的值。</code></p></li></ol><h2 id="Vuex的核心概念">Vuex的核心概念</h2><p>Vuex有几个比较核心的概念:<br>State<br>Getters<br>Mutation<br>Action<br>Module<br>我们对它进行一一介绍.</p><h3 id="State单一状态树">State单一状态树</h3><p>Vuex提出使用单一状态树, 什么是单一状态树呢？英文名称是Single Source of Truth，也可以翻译成单一数据源。</p><p>但是，它是什么呢？我们来看一个生活中的例子。OK，我用一个生活中的例子做一个简单的类比。</p><p>我们知道，在国内我们有很多的信息需要被记录，比如上学时的个人档案，工作后的社保记录，公积金记录，结婚后的婚姻信息，以及其他相关的户口、医疗、文凭、房产记录等等（还有很多信息）。</p><p>这些信息被分散在很多地方进行管理，有一天你需要办某个业务时(比如入户某个城市)，你会发现你需要到各个对应的工作地点去打印、盖章各种资料信息，最后到一个地方提交证明你的信息无误。</p><p>这种保存信息的方案，不仅仅低效，而且不方便管理，以及日后的维护也是一个庞大的工作(需要大量的各个部门的人力来维护，当然国家目前已经在完善我们的这个系统了)。<br>这个和我们在应用开发中比较类似：<br><code>如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难。所以Vuex也使用了单一状态树来管理应用层级的全部状态。</code><br>单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</p><h3 id="Getters基本使用">Getters基本使用</h3><p>有时候，我们需要从store中获取一些state变异后的状态，比如下面的Store中：<br>获取学生年龄大于20的个数。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102316623.png" alt="image-20201001102316623"></p><p>我们可以在Store中定义getters</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102324808.png" alt="image-20201001102324808"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102330021.png" alt="image-20201001102330021"></p><p>如果我们已经有了一个获取所有年龄大于20岁学生列表的getters, 那么代码可以这样来写</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102350974.png" alt="image-20201001102350974"></p><p>getters默认是不能传递参数的, 如果希望传递参数, 那么只能让getters本身返回另一个函数.<br>比如上面的案例中,我们希望根据ID获取用户的信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102358424.png" alt="image-20201001102358424"></p><h3 id="Mutation状态更新">Mutation状态更新</h3><p><code>Vuex的store状态的更新唯一方式：提交Mutation</code></p><p>Mutation主要包括两部分：</p><p>字符串的事件类型（type）。一个回调函数（handler）,该回调函数的第一个参数就是state。<br>mutation的定义方式：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102908754.png" alt="image-20201001102908754"></p><p>通过mutation更新</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102912834.png" alt="image-20201001102912834"></p><h4 id="Mutation传递参数">Mutation传递参数</h4><p>在通过mutation更新数据的时候, 有可能我们希望携带一些额外的参数。参数被称为是mutation的载荷(Payload)<br>Mutation中的代码:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103024606.png" alt="image-20201001103024606"></p><p>但是如果参数不是一个呢?比如我们有很多参数需要传递.<br>这个时候, 我们通常会以对象的形式传递, 也就是payload是一个对象。这个时候可以再从对象中取出相关的信息.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103043242.png" alt="image-20201001103043242"></p><h4 id="Mutation提交风格">Mutation提交风格</h4><p>上面的通过commit进行提交是一种普通的方式<br>Vue还提供了另外一种风格, 它是一个包含type属性的对象</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103154798.png" alt="image-20201001103154798"></p><p>Mutation中的处理方式是将整个commit的对象作为payload使用, 所以代码没有改变, 依然如下:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103202938.png" alt="image-20201001103202938"></p><h4 id="Mutation响应规则">Mutation响应规则</h4><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新。这就要求我们必须遵守一些Vuex对应的规则:</p><p>提前在store中初始化好所需的属性。当给state中的对象添加新属性时, 使用下面的方式:</p><ol><li>使用Vue.set(obj, ‘newProp’, 123)</li><li>用新对象给旧对象重新赋值</li></ol><p>我们来看一个例子:当我们点击更新信息时, 界面并没有发生对应改变.</p><p>如何才能让它改变呢?查看下面代码的方式一和方式二。都可以让state中的属性是响应式的.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103428715.png" alt="image-20201001103428715"></p><h4 id="Mutation常量类型-–-概念">Mutation常量类型 – 概念</h4><p>我们来考虑下面的问题：在mutation中, 我们定义了很多事件类型(也就是其中的方法名称)。</p><p>当我们的项目增大时, Vuex管理的状态越来越多, 需要更新状态的情况越来越多, 那么意味着Mutation中的方法越来越多.</p><p>方法过多, 使用者需要花费大量的经历去记住这些方法, 甚至是多个文件间来回切换, 查看方法名称, 甚至如果不是复制的时候, 可能还会出现写错的情况.<br>如何避免上述的问题呢?</p><p><code>在各种Flux实现中, 一种很常见的方案就是使用常量替代Mutation事件的类型.</code></p><p>我们可以将这些常量放在一个单独的文件中, 方便管理以及让整个app所有的事件类型一目了然.<br>具体怎么做呢?<br>我们可以创建一个文件: mutation-types.js, 并且在其中定义我们的常量.<br>定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103801680.png" alt="image-20201001103801680"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103819962.png" alt="image-20201001103819962"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103825664.png" alt="image-20201001103825664"></p><h4 id="Mutation同步函数">Mutation同步函数</h4><p>通常情况下, Vuex要求我们Mutation中的方法必须是同步方法。主要的原因是当我们使用devtools时, 可以devtools可以帮助我们捕捉mutation的快照。但是如果是异步操作, 那么devtools将不能很好的追踪这个操作什么时候会被完成.<br>比如我们之前的代码, 当执行更新时, devtools中会有如下信息: 图1</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103926907.png" alt="image-20201001103926907"></p><p>但是, 如果Vuex中的代码, 我们使用了异步函数: 图2</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103931794.png" alt="image-20201001103931794"></p><p>你会发现state中的info数据一直没有被改变, 因为他无法追踪到。<code>因此，通常情况下, 不要再mutation中进行异步的操作</code></p><h3 id="Action的基本定义">Action的基本定义</h3><p>我们强调, 不要再Mutation中进行异步操作。但是某些情况, 我们确实希望在Vuex中进行一些异步操作, 比如网络请求, 必然是异步的. 这个时候怎么处理呢?</p><p><code>Action类似于Mutation, 但是是用来代替Mutation进行异步操作的.</code></p><p>Action的基本使用代码如下:<br>context是什么?</p><p><code>context是和store对象具有相同方法和属性的对象.</code></p><p>也就是说, 我们可以通过context去进行commit相关的操作, 也可以获取context.state等.</p><p>但是注意, 这里它们并不是同一个对象, 为什么呢? 我们后面学习Modules的时候,。</p><p>我们定义了actions, 然后又在actions中去进行commit, 这不是脱裤放屁吗?</p><p><code>事实上并不是这样, 如果在Vuex中有异步操作, 那么我们就可以在actions中完成了.</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104150464.png" alt="image-20201001104150464"></p><h4 id="Action的分发">Action的分发</h4><p>在Vue组件中, 如果我们调用action中的方法, 那么就需要使用dispatch</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104235614.png" alt="image-20201001104235614"></p><p>同样的, 也是支持传递payload</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104241037.png" alt="image-20201001104241037"></p><h4 id="Action返回的Promise">Action返回的Promise</h4><p>前面我们学习ES6语法的时候说过, Promise经常用于异步操作。在Action中, 我们可以将异步操作放在一个Promise中, 并且在成功或者失败后, 调用对应的resolve或reject.<br>OK, 我们来看下面的代码:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104354476.png" alt="image-20201001104354476"></p><h3 id="认识Module">认识Module</h3><p>Module是模块的意思, 为什么在Vuex中我们要使用模块呢?<code>Vue使用单一状态树,那么也意味着很多状态都会交给Vuex来管理。当应用变得非常复杂时,store对象就有可能变得相当臃肿。</code>为了解决这个问题, Vuex允许我们将store分割成模块(Module), 而每个模块拥有自己的state、mutation、action、getters等</p><p>我们按照什么样的方式来组织模块呢?</p><p>我们来看左边的代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104611130.png" alt="image-20201001104611130"></p><h4 id="Module局部状态">Module局部状态</h4><p>上面的代码中, 我们已经有了整体的组织结构, 下面我们来看看具体的局部模块中的代码如何书写.</p><p>我们在moduleA中添加state、mutations、getters</p><p>mutation和getters接收的第一个参数是局部状态对象</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104707803.png" alt="image-20201001104707803"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104728296.png" alt="image-20201001104728296"></p><p>注意：虽然, 我们的doubleCount和increment都是定义在对象内部的。但是在调用的时候, 依然是通过this.$store来直接调用的.</p><h4 id="Actions的写法">Actions的写法</h4><p>actions的写法呢? 接收一个context参数对象<br>局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110647431.png" alt="image-20201001110647431"></p><p>如果getters中也需要使用全局的状态, 可以接受更多的参数</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110654980.png" alt="image-20201001110654980"></p><p>项目结构</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110737846.png" alt="image-20201001110737846"></p><h4 id="常用的模块化开发结构">常用的模块化开发结构</h4><p>目录结构：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001105136797.png" alt="image-20201001105136797"></p><p>在 index.js中做如下定义：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// store的index.js文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.context(<span class="string">'./modules'</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.keys().reduce(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// set './app.js' =&gt; 'app'</span></span><br><span class="line">    <span class="keyword">const</span> moduleName = modulePath.replace(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">'$1'</span>)</span><br><span class="line">    <span class="keyword">const</span> value = modulesFiles(modulePath)</span><br><span class="line">    modules[moduleName] = value.default</span><br><span class="line">    <span class="keyword">return</span> modules</span><br><span class="line">}, {})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    modules</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在每个store文件中可以这样定义：</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> ({</span><br><span class="line">  .......</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">    ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = { <span class="comment">// mutations改变state中的数据</span></span><br><span class="line">  ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = { <span class="comment">// 发送请求</span></span><br><span class="line">  ........</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    namespaced: <span class="literal">true</span>,<span class="comment">//注意要开启这个</span></span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这样在组件中使用的时候可以这样：</p><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  .......</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import { mapState } from 'vuex' //</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: "login",</span><br><span class="line">  methods: {</span><br><span class="line">  },</span><br><span class="line">  computed: </span><br><span class="line">    ...mapState({ // 这个是提取store中access.js的state的数据</span><br><span class="line">      'loginState': 'login'</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">   ....</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vuex是做什么的&quot;&gt;Vuex是做什么的?&lt;/h2&gt;
&lt;p&gt;官方解释：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。&lt;br&gt;
它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&lt;br&gt;
Vuex 也集</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
  </entry>
  
</feed>
