<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.sky123.top/atom.xml" rel="self"/>
  
  <link href="http://blog.sky123.top/"/>
  <updated>2021-03-10T02:18:46.989Z</updated>
  <id>http://blog.sky123.top/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PowerDesigner安装教程（含下载+汉化+破解）</title>
    <link href="http://blog.sky123.top/2021/03/10/%E8%BD%AF%E4%BB%B6/powerDesigner/"/>
    <id>http://blog.sky123.top/2021/03/10/%E8%BD%AF%E4%BB%B6/powerDesigner/</id>
    <published>2021-03-10T02:18:11.000Z</published>
    <updated>2021-03-10T02:18:46.989Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自：<a class="link" href="https://www.fujieace.com/software/powerdesigner.html">https://www.fujieace.com/software/powerdesigner.html<i class="fas fa-external-link-alt"></i></a></p><p>软件版本：Sybase PowerDesigner 16.5</p><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>下载下面三个文件：</p><p>1、安装文件 链接: <a class="link" href="https://pan.baidu.com/s/1fxmBlcee4qEqxM4djSzvWA">https://pan.baidu.com/s/1fxmBlcee4qEqxM4djSzvWA<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><p>2、破解文件 链接: <a class="link" href="https://pan.baidu.com/s/1jadOumXVh6iC6XeXqwPGQw">https://pan.baidu.com/s/1jadOumXVh6iC6XeXqwPGQw<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><p>3、汉化文件 链接: <a class="link" href="https://pan.baidu.com/s/19yeyWfAPMJ_WeJy8SDVu5Q">https://pan.baidu.com/s/19yeyWfAPMJ_WeJy8SDVu5Q<i class="fas fa-external-link-alt"></i></a> 密码: 1234</p><h2 id="PowerDesigner安装图文教程："><a href="#PowerDesigner安装图文教程：" class="headerlink" title="PowerDesigner安装图文教程："></a>PowerDesigner安装图文教程：</h2><p>1、解压PowerDesigner安装文件，并双击PowerDesigner.exe；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/1-2.png"></p><p>2、欢迎来到PowerDesigner安装界面，点击 Next</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/3-3.png"></p><p>3、一定要选择Trial，再点击Next，不要选择其它，这一步如果选择错，后面破解是不行的。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/3-3.png"></p><p>4、选择Hong Kong，点击I AGREE，再点击Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/4-1.png"></p><p>5、选择一个安装目录，默认是安装在C盘。再点击Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/5-1.png"></p><p>6、点击General和Notaion，再点击Next；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/7.png"></p><p>走到这一 步，如果你电脑上已经安装了“Eclipse”软件，请不要打勾此插件选项。否则：就会出现，让你选择“Eclipse”软件的安装路径。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/159.png"></p><p>7、直接点击Next；进入正在安装界面</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/160.png"></p><p>9、点击Finish（安装完成）</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/9-1.png"></p><h2 id="PowerDesigner破解步骤："><a href="#PowerDesigner破解步骤：" class="headerlink" title="PowerDesigner破解步骤："></a>PowerDesigner破解步骤：</h2><p>1、将PowerDesigner破解文件解压，然后，你能看到一个“pdflm16.dll”文件；</p><p>2、将“pdflm16.dll”复制并覆盖到你软件安装的目录中，一定要是此软件的安装根目录；例如：我这里就直接复制到 E:\powerdesigner 即可！</p><h2 id="PowerDesigner汉化步骤："><a href="#PowerDesigner汉化步骤：" class="headerlink" title="PowerDesigner汉化步骤："></a>PowerDesigner汉化步骤：</h2><p>1、将PowerDesigner汉化文件解压，然后你能看到很多文件；</p><p>2、Ctrl+A（全选）所有文件，复制并覆盖到你软件安装的目录中；</p><p>3、如果点击PdShell16.exe不能正常启动，请点击pdlegacyshell16.exe启动；</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/856.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章转自：&lt;a class=&quot;link&quot; href=&quot;https://www.fujieace.com/software/powerdesigner.html&quot;&gt;https://www.fujieace.com/software/powerdesigner.html&lt;i c</summary>
      
    
    
    
    
    <category term="软件" scheme="http://blog.sky123.top/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="powerDesigner" scheme="http://blog.sky123.top/tags/powerDesigner/"/>
    
  </entry>
  
  <entry>
    <title>栅格布局基本概念</title>
    <link href="http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/04/css/%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-03-06T05:00:30.948Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/mountain-547363_1280.jpg"></p><hr><h2 id="栅格化布局"><a href="#栅格化布局" class="headerlink" title="栅格化布局"></a>栅格化布局</h2><p>网格布局<code>（Grid）</code>是最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 <code>CSS 框架</code>达到的效果，现在浏览器内置了。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123208640.png" alt="image-20210306123208640"></p><p>Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。</p><p>Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>容器和项目<br>    采用网格布局的区域，称为<code>"容器"（container）</code>。容器内部采用网格定位的子元素，称为<code>"项目"（item）</code>。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123226964.png" alt="image-20210306123226964"></p><p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。</p><p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<code>&lt;p&gt;</code>元素就不是项目。Grid 布局只对项目生效。</p><p>行和列<br>       容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。水平的深色区域就是”行”，垂直的深色区域就是”列”</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123236954.png" alt="image-20210306123236954"></p><h3 id="容器中的属性"><a href="#容器中的属性" class="headerlink" title="容器中的属性"></a>容器中的属性</h3><p><code>display：grid</code>  指定一个容器采用网格布局，默认情况下，容器元素都是块元素。inline-grid  设置为行内元素网格布局</p><p><code>grid-template-columns</code> 属性定义每一列的列宽。<br><code>grid-template-rows</code> 属性定义每一行的行高</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306123247282.png" alt="image-20210306123247282"></p><p>注意，设为网格布局以后，<code>容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。</code></p><p>科普视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=629123551&amp;bvid=BV1Gt4y1z7NQ&amp;cid=293320928&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/mountain-547363_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;栅格化布局&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>media媒体查询</title>
    <link href="http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"/>
    <id>http://blog.sky123.top/2020/09/04/css/css%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-09-04T06:53:47.000Z</published>
    <updated>2021-03-06T03:53:18.031Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/mountains-615428_1280.jpg"></p><hr><h2 id="Media-Query响应式布局—媒体查询"><a href="#Media-Query响应式布局—媒体查询" class="headerlink" title="Media Query响应式布局—媒体查询"></a>Media Query响应式布局—媒体查询</h2><p>​    响应式布局是在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端——而不是为每个终端做一个特定的版本。这个概念是为解决移动互联网浏览而诞生的。<br>​    响应式布局可以为不同终端的用户提供更加舒适的界面和更好的用户体验，而且随着目前大屏幕移动设备的普及，越来越多的网站采用这个技术。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306113916951.png" alt="image-20210306113916951"></p><h3 id="响应式设计一定是最佳选择吗？"><a href="#响应式设计一定是最佳选择吗？" class="headerlink" title="响应式设计一定是最佳选择吗？"></a>响应式设计一定是最佳选择吗？</h3><p>​    如果预算充足且形势需要，做一个真正的“手机版”网站是首选。因为响应式设计没有专门设计一个手机版网站的功能多，比如获取当前用户的<code>GPS定位</code>，只是用响应式设计会很难实现。但如果只是根据视口大小为用户提供匹配的视觉效果还是优先选择响应式设计。</p><p>优点：</p><ol><li>面对不同分辨率设备灵活性强</li><li>能够快捷解决多设备显示适应问题</li></ol><p>缺点：</p><ol><li>兼容各种设备工作量大，效率略慢</li><li>代码累赘，会出现隐藏无用的元素，加载时间加长</li><li>其实这是一种折中性质的设计解决方案，多方面因素影响而达不到最佳效果</li><li>一定程度上改变了网站原有的布局结构，会出现用户混淆的情况</li></ol><h3 id="CSS中的Media-Query（媒介查询）是什么？"><a href="#CSS中的Media-Query（媒介查询）是什么？" class="headerlink" title="CSS中的Media Query（媒介查询）是什么？"></a>CSS中的Media Query（媒介查询）是什么？</h3><p>​    作为<code>CSS3</code>规范的一部分，媒体查询可以针对不同的屏幕尺寸设置不同的样式，它为每种类型的用户提供了最佳的体验，网站在任何尺寸设置下都能有最佳的显示效果。通过不同的媒体类型和条件定义样式表规则。<br>​<br>​    媒体查询让<code>CSS</code>可以更精确作用于不同的媒体类型和同一媒体的不同条件。媒体查询的大部分媒体特性都接受min和max用于表达“大于或等于”和“小与或等于”。如：<code>width会有min-width和max-width</code><br>​<br>​    <code>Media Queries</code>功能是非常强大的，他可以让你定制不同的分辨率和设备，并在不改变内容的情况下，让你制作的web页面在不同的分辨率和设备下都能显示正常，并且不会因此而丢失样式</p><h4 id="媒体查询实例"><a href="#媒体查询实例" class="headerlink" title="媒体查询实例"></a>媒体查询实例</h4><p>​    通过此实例观察媒体查询的功能后，再来分析语法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">body</span>{<span class="attribute">background-color</span>:grey; }   //正常情况是灰色</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) {//宽度大于 <span class="number">992px</span> 的时候被应用 pc端</span><br><span class="line">  <span class="selector-class">.class</span> {<span class="attribute">background</span>: <span class="number">#666</span>;}  }  </span><br><span class="line">           </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) { //宽度小于<span class="number">768px</span>的时候被应用  移动端</span><br><span class="line">  <span class="selector-class">.class</span> { <span class="attribute">background</span>: <span class="number">#ccc</span>; }  }</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768</span>x) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">992px</span>) {  //宽度在 <span class="number">768px</span> 和 <span class="number">992px</span> 之间的时候被应用</span><br><span class="line">  <span class="selector-class">.class</span> {  <span class="attribute">background</span>: <span class="number">#333</span>;  }   }</span><br></pre></td></tr></tbody></table></figure><h4 id="使用Media-Query的基本语法"><a href="#使用Media-Query的基本语法" class="headerlink" title="使用Media Query的基本语法"></a>使用Media Query的基本语法</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) {</span><br><span class="line">       CSS-<span class="selector-tag">Code</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>​    以上通过<code>@media</code>定义媒体查询，<code>mediatype</code>代表了设备类型，目前只有<code>screen</code>最常用，<code>and|not|only</code>为条件，<code>media feature</code>为媒体特点，通常是写设备的宽度。</p><p>​    <code>@media screen and (max-width:960px)</code> 的意思为：当前设备为screen（电脑、平板、手机）时，并且最大宽度为960时，显示的样式。</p><p>媒体类型有：</p><ul><li>all   所有设备</li><li>print    用于打印机和打印预览</li><li>screen    用于电脑屏幕，平板电脑，智能手机等</li><li>speech    应用于屏幕阅读器等发声设备</li></ul><h3 id="用媒体查询改造我们的设计"><a href="#用媒体查询改造我们的设计" class="headerlink" title="用媒体查询改造我们的设计"></a>用媒体查询改造我们的设计</h3><p>​    我们都知道，样式表里面，后面的样式会覆盖前面的样式。因此，我们可以在设置好网站基本样式后，使用媒体查询来进一步重写相应的部分。例如，在PC端将导航显示成简单的链接，然后再针对小视口，使用媒体查询重写这一部分。理论上讲最好是从小屏幕设备开始设计，然后渐进增强。但实际上我们使用媒体查询要解决的问题，都是已经存在PC端站点了，<code>更多的是要将现有的桌面版网页改造成响应式的</code>。</p><p>加载媒体查询的最佳方法：</p><p>​    使用<code>多个独立的CSS文件会增加HTTP请求的数量</code>，使页面加载变慢。所以我们的媒体查询样式的文件尽量放在一个里面，以注释加以区分。</p><p>阻止移动浏览器自动调整页面大小</p><p>​    <code>ios和android浏览器都基于webkit内核</code>，这两种浏览器和许多其它浏览器都支持用<code>viewport，meta元素覆盖默认的画布缩放设置</code>。只需要在HTML的<code>&lt;head&gt;</code>标签中插入一个<code>&lt;meta&gt;</code>标签，<code>meta</code>标签中可以设置具体的宽度或缩放比。下面为示例</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span>  <span class="attr">content</span>=<span class="string">"initial-scale=1.0,width=device-width"</span> /&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p><code>name=”viewport”</code>  说明此meta标签定义视口的属性<br><code>​initial-scale=2.0</code>   意思是将页面放大两倍<br><code>​width=device-width</code>   告诉浏览器页面的宽度等于设备宽度</p><p>允许用户将页面最大放大至设备宽度3倍，最小压缩至设备宽度的一半</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">device-width,</span> <span class="attr">maximum-scale</span>=<span class="string">3,</span> <span class="attr">minimum-scale</span>=<span class="string">0.5”</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>禁止用户缩放，可以在混合<code>APP</code>时，为了使<code>html</code>页面更逼真，使页面无法缩放</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”initial-scale</span>=<span class="string">1.0,</span> <span class="attr">user-scalable</span>=<span class="string">no”</span> /&gt;</span>   //user-scalable=no是禁止缩放</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/mountains-615428_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Media-Q</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.sky123.top/2020/09/03/css/flex%E5%B8%83%E5%B1%80/</id>
    <published>2020-09-03T06:53:47.000Z</published>
    <updated>2021-03-06T03:42:56.986Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/beach-1236581_1280.jpg"></p><hr><h2 id="伸缩盒模型flexbox"><a href="#伸缩盒模型flexbox" class="headerlink" title="伸缩盒模型flexbox"></a>伸缩盒模型flexbox</h2><p>伸缩盒模型也叫弹性盒模型，或<code>flexBox</code>。它决定一个盒子在其它盒子中的分布，以及如何处理可用的空间。使用该模型，可以轻松的创建“自适应”浏览器窗口的流动布局。</p><blockquote><p><code>flexbox</code>是一个很新的东西，在<code>w3c</code>希望可以使用<code>flexbox</code>实现一些更复杂的布局和应用。传统盒模型基于HTML文档流排列，使用弹性盒模型可以规定特定的顺序。要开启弹性盒模型，只需要设置display的属性值 flex，因为它是<code>CSS3</code>中为display新添加的值类型。</p></blockquote><p>目的：在浏览器窗口变化时，盒子相应改变大小。<br><code>设置了弹性盒模型后，float，clear和vertical-align在flex中不起作用。</code></p><h3 id="旧的伸缩盒"><a href="#旧的伸缩盒" class="headerlink" title="旧的伸缩盒"></a>旧的伸缩盒</h3><p>​       伸缩盒从被提出到如今一直在修改，所以这里涉及到了新老写法。伸缩盒最老版本<br>​    <code>display:box;</code>  将对象作为弹性伸缩盒显示（火狐和<code>webkit</code>内核都支持<code>display:-webkit-box;</code>或<code>display:-moz-box;</code>）。子元素   <code>box-flex:;</code><br>伸缩盒过渡版本：<code>display:flexbox;</code>  将对象作为弹性伸缩盒显示<br>伸缩盒最新版本：<code>display:flex;</code>  将对象作为弹性伸缩盒显示</p><h3 id="flexbox的基础知识"><a href="#flexbox的基础知识" class="headerlink" title="flexbox的基础知识"></a>flexbox的基础知识</h3><p>​    由于 <code>flexbox</code>是一个整体的模块，它们之中一些属性是在父容器上设置，而一些是在子容器上设置。一个<code>flexbox</code>的基本结构：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">         <span class="selector-class">.box</span>{ <span class="attribute">display</span>: flex;}    //最外层的为父容器，定义此容器为弹性布局</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}       <span class="attribute">flex-grow</span>占<span class="number">1</span>比例</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">2</span>; <span class="attribute">background</span>:orange}     占<span class="number">2</span>比例</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">3</span>; <span class="attribute">background</span>:red}        占<span class="number">3</span>比例</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>1.首先规定哪个是父容器，父容器中包含多个“项目”（每个子div），项目是可以在父容器中弹性布局的。<br>2.其次还可以规定父容器中要怎么来显示它里面的项目，如是否换行、项目排列方向等</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112154902.png" alt="image-20210306112154902"></p><h3 id="父容器常用属性"><a href="#父容器常用属性" class="headerlink" title="父容器常用属性"></a>父容器常用属性</h3><p><code>display: flex;</code>   定义一个flex容器。新弹性盒  设置父元素是一个弹性盒，子元素会自动水平排列</p><p><code>justify-content: flex-end;</code>   设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112215032.png" alt="image-20210306112215032"></p><p> <code>align-items</code> 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112226193.png" alt="image-20210306112226193"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">   .container{</span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> <span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">border</span>: <span class="number">1px</span> solid blueviolet;</span></span><br><span class="line">     }   </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112238867.png" alt="image-20210306112238867"></p><p><code>flex-wrap</code>  让弹性盒元素在必要的时候拆行</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306112251352.png" alt="image-20210306112251352"></p><h3 id="子元素常用属性"><a href="#子元素常用属性" class="headerlink" title="子元素常用属性"></a>子元素常用属性</h3><p>伸缩盒中的每一个元素称为一个项目。<br><code>flex-grow: number;</code>   一个数字，规定项目将相对于其他灵活的项目进行扩展的量。默认值是 0。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:pink}                </span><br><span class="line"><span class="selector-class">.item2</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:orange}             </span><br><span class="line"><span class="selector-class">.item3</span>{ <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">background</span>:red}    </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/beach-1236581_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;伸缩盒模型flexb</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>display属性和盒子模型</title>
    <link href="http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.sky123.top/2020/09/02/css/display%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-09-02T06:53:47.000Z</published>
    <updated>2021-03-05T13:31:35.813Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/mountains-190055_1280.jpg"></p><hr><h2 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h2><p>​    根据CSS规范的规定，每一个网页元素都有一个display属性，用于确定该元素的类型，每一个元素都有默认的display属性值，比如div元素，它的默认display属性值为“block”，称为块元素，而span元素的默认display属性值为“inline”，称为“行内”元素。</p><p>​       块元素与行元素是可以转换的，也就是说display的属性值可以由我们来改变 。</p><h3 id="display常见属性值"><a href="#display常见属性值" class="headerlink" title="display常见属性值"></a>display常见属性值</h3><ol><li>none：隐藏对象</li><li>inline：指定对象为内联元素</li><li>block：指定对象为块元素</li><li>inline-block：指定对象为内联块元素</li><li>table-cell：指定对象作为表格单元格</li><li>flex：弹性盒</li></ol><h3 id="visibility-hidden和display-none和opacity-0的区别："><a href="#visibility-hidden和display-none和opacity-0的区别：" class="headerlink" title="visibility:hidden和display:none和opacity:0的区别："></a>visibility:hidden和display:none和opacity:0的区别：</h3><ol><li><p><code>visibility:hidden</code>和<code>opacity:0</code>会将元素隐藏，但是物理位置实际存在。</p></li><li><p><code>display:none</code> 隐藏元素，不保留物理位置。</p></li></ol><p>​    网页中大部分对象<code>默认是占用文档流</code>，也有一些对象是不占文档流的，比如表单中隐藏域。当然我们也可以让占用文档流的元素转换成不占文档流，这就要用到CSS中属性position、float、display来控制。默认情况下，所有元素都处在文档流中。</p><p>四种情况将<code>使得元素离开文档流：浮动float、绝对定位absolute、固定定位fixed、元素不显示display:none</code>，这种情况不占文档流的空间，而普通元素的位置基于文档流。</p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="W3C盒模型"><a href="#W3C盒模型" class="headerlink" title="W3C盒模型"></a>W3C盒模型</h3><p>盒模型由内容(content)、填充(padding)、边框(border)、边界(margin)组成</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211024837.png" alt="image-20210305211024837"></p><h3 id="margin（外边距）"><a href="#margin（外边距）" class="headerlink" title="margin（外边距）"></a>margin（外边距）</h3><p>围绕在元素边框周围的空白区域，会在元素外创建额外的空白区域，外边距是透明的。<br>语法：<code>margin:value;</code><br><code>margin-top/right/bottom/left: value;</code><br>value可取值为<code>像素，%，auto，负值</code></p><p>外边距简写</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">margin</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211118212.png" alt="image-20210305211118212" style="zoom:80%;"><p>margin设置元素外边距的宽度，它有这么几个特点：</p><ol><li>块级元素的垂直相邻外边距会合并</li><li>行内元素实际上不占上下外边距。行内元素的的左右外边距不合并</li><li>浮动元素的外边距也不会合并</li><li>允许指定负的外边距值，不过使用时要小心</li></ol><h3 id="border（边框）"><a href="#border（边框）" class="headerlink" title="border（边框）"></a>border（边框）</h3><p>border属性设置一个元素的边框，它有三个要素：<code>宽、样式、颜色</code>，统称“边框三要素”。三要素书写的时候一般如下顺序：</p><p>​    <code>border：宽度 样式 颜色        border: 1px solid red;</code></p><p>​    不过不按此顺序来写依然能正常显示。<code>div{ border: red solid 2px; }</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211414164.png" alt="image-20210305211414164"></p><p><code>border-style</code>设置边框的样式，有五种常用样式可选：</p><ul><li>点状dotted</li><li>实线solid</li><li>双线double   （ 需要最起码设置为3像素，不然显示不下）</li><li>虚线dashed</li><li>无边框none</li></ul><p>border的三要素可以统一写在”border”属性中，也可以单独设置。</p><p>​    统一的写法：<code>border: 1px solid  red;</code><br>​    单独设置的写法：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-width</span>: ; </span><br><span class="line"><span class="attribute">border-style</span>: ;</span><br><span class="line"><span class="attribute">border-color</span>: ;</span><br></pre></td></tr></tbody></table></figure><h3 id="padding（内边距）"><a href="#padding（内边距）" class="headerlink" title="padding（内边距）"></a>padding（内边距）</h3><p>内容区域和边框之间的空间。会扩大元素边框所占用的区域<br>语法：<code>padding:value;</code><br>单边设置<br><code>padding-top/right/bottom/left:value;</code>value可取值为像素，百分比，但不能为负数</p><p> 内边距的简写</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:<span class="built_in">value</span>(四个方向相同) ;</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上下) <span class="built_in">value</span>(左右);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(左右) <span class="built_in">value</span>(下);</span><br><span class="line"><span class="attribute">padding</span>: <span class="built_in">value</span>(上) <span class="built_in">value</span>(右) <span class="built_in">value</span>(下) <span class="built_in">value</span>(左);</span><br></pre></td></tr></tbody></table></figure><h3 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h3><p>​    盒子模型分两种，一种是符合W3C规范的标准例子模型，另一种是IE的盒子模型，IE的盒子模型也被叫怪异盒子。<br>​    可以看到 IE 盒子模型也包括 margin、border、padding、content，不过，和标准 盒子模型不同的是：IE 盒子模型的宽，包含了 border 和 pading。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305211844651.png" alt="image-20210305211844651"></p><h3 id="Box-sizing"><a href="#Box-sizing" class="headerlink" title="Box-sizing"></a>Box-sizing</h3><p>​    <code>box-sizing</code> 属性允许你以“W3C的盒模型”或“IE盒模型”来定义元素，以适应区域。换句话说，当前元素使用哪种盒模型，<code>可以由box-sizing属性来指定</code><br>​    它有两个值<br>​    <code>content-box（标准）</code><br>​    padding和border不被包含在width和height内，<code>元素的实际大小为宽高+border+padding</code>，此为标准模式下的盒模型。</p><p>​    <code>border-box（怪异）</code><br>​    padding和border被包含在定义的width和height中，<code>元素实际的大小为你定义了多宽就是多宽</code>。此属性为怪异模式下的盒模型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/mountains-190055_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;display</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Position定位和z-index</title>
    <link href="http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/"/>
    <id>http://blog.sky123.top/2020/09/01/css/position%E5%92%8Cz-index/</id>
    <published>2020-09-01T06:53:47.000Z</published>
    <updated>2021-03-05T13:23:58.375Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/lake-1581879_1280.jpg"></p><hr><h2 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h2><p>position属性指定一个元素（静态的，相对的，绝对或固定）的定位方法的类型。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305201823730.png" alt="image-20210305201823730"></p><h3 id="realtive"><a href="#realtive" class="headerlink" title="realtive"></a>realtive</h3><p>以<code>自身为参照物</code>移动到指定的位置，并且<code>被定位的元素会占据原有的位置</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203011083.png" alt="image-20210305203011083" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line">/* left: 200px;</span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>; */</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203041348.png" alt="image-20210305203041348" style="zoom:50%;"><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h3><p>以其他元素作为参照物，移动指定距离，且不会占据原有的位置，关于 <code>absolute</code> 定位参考点的选择：</p><ol><li>如果元素的外层元素是非 <code>static</code> 定位（有除默认属性之外的定位属性），那么外层元素就成为了该元素的定位参考点。</li><li>如果元素的外层元素没有设置任何 <code>position</code> 的值，那么该元素将寻找离自己最近的设定过非默认 <code>position</code> 属性的外层元素作为参照物。</li><li>如果元素的外层元素没有找到设定为非默认 <code>positon</code> 属性的外层元素，那么此时定位参考元素变为 <code>body</code> ，或者说页面</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203556950.png" alt="image-20210305203556950" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305203705689.png" alt="image-20210305203705689" style="zoom:50%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d22{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d3{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d22"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305204434371.png" alt="image-20210305204434371" style="zoom:50%;"><h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="css"><span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;2</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205431227.png" alt="image-20210305205431227"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305205442554.png" alt="image-20210305205442554"></p><h2 id="z-index堆叠顺序"><a href="#z-index堆叠顺序" class="headerlink" title="z-index堆叠顺序"></a>z-index堆叠顺序</h2><p>一旦修改了元素的定位方式，则元素可能会发生堆叠。可以<code>使用z-index属性来控制定位元素的出现顺序</code>。z-index仅能在定位的元素（使用了 <code>position</code> 非默认属性的元素）上生效<br>z-index属性：<br>值为数值，数值越大表示堆叠顺序越高，即离用户越近，可以设置为负值，表示离用户更远 ，一般不设置负值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210239608.png" alt="image-20210305210239608" style="zoom:50%;"><p>可以发现后面的<code>div</code>会覆盖前面的，如果想让前面的覆盖后面的，可以设置 <code>z-index</code>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">.d1{</span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line">}</span><br><span class="line">.d2{</span><br><span class="line"><span class="css"><span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css"><span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210305210411571.png" alt="image-20210305210411571" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/lake-1581879_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;position定位&quot;</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css3动画常用属性和阴影圆角</title>
    <link href="http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.sky123.top/2020/08/30/css/css3%E5%8A%A8%E7%94%BB/</id>
    <published>2020-08-30T06:53:47.000Z</published>
    <updated>2021-03-06T03:16:19.175Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/bled-1899264_1280.jpg"></p><hr><h2 id="CSS3的含义"><a href="#CSS3的含义" class="headerlink" title="CSS3的含义"></a>CSS3的含义</h2><p>​    <code>CSS3</code>是<code>CSS</code>（层叠样式表）技术的升级版本。<code>CSS3</code>完全向后兼容，不必改变现有的设计，浏览器将永远支持<code>CSS2</code>。<code>W3C</code>的<code>CSS3</code>规范仍在开发。但是，许多新的<code>CSS3</code>属性已在现代浏览器使用。</p><h2 id="浏览器内核以及其前缀"><a href="#浏览器内核以及其前缀" class="headerlink" title="浏览器内核以及其前缀"></a>浏览器内核以及其前缀</h2><p>​    <code>CSS</code>标准中各个属性都要经历从草案到推荐的过程，<code>css3</code>中的属性进展都不一样，浏览器厂商在标准尚未明确情况下提前支持会有风险，浏览器厂商对新属性的支持情况也不同，所以会加厂商前缀加以区分。如果某个属性已经从草案变为了或接近推荐方案，并且厂商已经完全实现了推荐属性，那就不用加厂商前缀。如<code>border-radius</code>已经很成熟，不用加前缀。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103253008.png" alt="image-20210306103253008"></p><p>​    <code>根据不同的浏览器内核，css前缀会有不同</code>。最基本的浏览器内核有如下四种，其它的内核都是基于此四种进行再研发的。</p><ol><li><p><code>Gecko内核</code>      前缀为<code>-moz-</code>   火狐浏览器</p></li><li><p><code>Webkit内核</code>    前缀为<code>-webkit-</code>   也叫谷歌内核，chrome浏览器最先开发使用，safari浏览器也使用 该内核。国内很多浏览器也使用了<code>webkit内核</code>，如360极速、世界之窗、猎豹等。</p></li><li><p><code>Trident内核</code>    前缀为<code>-ms-</code>  也称IE内核</p></li><li><p><code>Presto内核</code>      前缀<code>-o-</code>   目前只有opera采用</p></li></ol><h3 id="圆角border-radius"><a href="#圆角border-radius" class="headerlink" title="圆角border-radius"></a>圆角border-radius</h3><p>语法</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>：value；四个角</span><br><span class="line"><span class="attribute">border-radius</span>：value value；左上右下、右上左下</span><br><span class="line"><span class="attribute">border-radius</span>：value value value value；</span><br><span class="line">代表设置对象左上角、右上角、右下角、左下角</span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103337192.png" alt="image-20210306103337192" style="zoom:50%;"><h3 id="盒阴影box-shadow"><a href="#盒阴影box-shadow" class="headerlink" title="盒阴影box-shadow"></a>盒阴影box-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103327261.png" alt="image-20210306103327261"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .shadow{</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">3px</span> darkred;</span></span><br><span class="line">        }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103724901.png" alt="image-20210306103724901"></p><h3 id="文字阴影text-shadow"><a href="#文字阴影text-shadow" class="headerlink" title="文字阴影text-shadow"></a>文字阴影text-shadow</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103735569.png" alt="image-20210306103735569"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .text1{</span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: palegreen;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-shadow</span>: <span class="number">10px</span> -<span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span> ;</span></span><br><span class="line">       }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text1"</span>&gt;</span>学习猿地<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103747132.png" alt="image-20210306103747132"></p><h2 id="CSS3-渐变"><a href="#CSS3-渐变" class="headerlink" title="CSS3 渐变"></a>CSS3 渐变</h2><p><a class="link" href="https://www.runoob.com/css3/css3-gradients.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>​    <code>CSS3 渐变（gradients）</code>可以让你在两个或多个指定的颜色之间显示平稳的过渡。以前，你必须使用图像来实现这些效果。现在，使用 <code>CSS3 渐变（gradients）</code>，通过代码来实现渐变可以减少请求和节约带宽。</p><p><code>CSS3</code> 定义了两种类型的渐变（gradients）:</p><ul><li>线性渐变（Linear Gradients）: 向下/向上/向左/向右/对角方向<br><code>background: linear-gradient(direction, color-stop1, color-stop2, ...);</code></li><li>径向渐变（Radial Gradients）: 由它们的中心定义<br><code>background: radial-gradient(center, shape， size, start-color, ..., last-color);</code><br>默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），它可以是值 <code>circle</code> 或 <code>ellipse</code>。其中，circle 表示圆形，ellipse 表示椭圆形</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306103803293.png" alt="image-20210306103803293"></p><h2 id="CSS3-转换Transform（2D转换）"><a href="#CSS3-转换Transform（2D转换）" class="headerlink" title="CSS3 转换Transform（2D转换）"></a>CSS3 转换Transform（2D转换）</h2><p><a class="link" href="https://www.cnblogs.com/aspnetjia/p/5139020.html">transform详解<i class="fas fa-external-link-alt"></i></a></p><p>​    <code>CSS3</code>中的转换允许我们对元素进行旋转、缩放、移动或倾斜。它为分<code>2D转换 或 3D 转换。</code>在css2时代，如果要做一些图片转换角度，都依赖于<code>图片、Flash或JavaScript才能完成</code>。但是现在借助<code>CSS3</code>就可以轻松倾斜、缩放、移动以及翻转元素。通过<code>CSS</code>变形，可以让元素生成静态视觉效果，但也可以很容易结合<code>CSS3的transition和动画的keyframe</code>产生一些动画效果。</p><h3 id="转换Transform-2D的属性"><a href="#转换Transform-2D的属性" class="headerlink" title="转换Transform 2D的属性"></a>转换Transform 2D的属性</h3><p>​    通常的属性包含了属性名和属性值，而CSS3的transform属性是用函数来定义的。Transform 2D函数包括了<code>translate()、scale()、rotate()和skew()。</code></p><p>书写格式:<br>    <code>transform:函数名(x轴值，y轴值);</code></p><p>转换的效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104641628.png" alt="image-20210306104641628"></p><ol><li><p><code>translate()</code></p><pre><code>translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。接受CSS的标准度量单位（px），translate(x,y)：转换，沿着X和Y轴移动元素。</code></pre></li><li><p><code>rotate()</code></p><pre><code>通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。它以deg为单位，代表了旋转的角度。</code></pre></li><li><p><code>scale()</code></p><pre><code>通过值把宽和高转换为原始尺寸的n倍，接受两个参数，前面的为宽，后面的为高。可取值：默认值为1，缩小：0-1 之间的数，放大：大于1的数</code></pre></li><li><p><code>skew()</code></p><pre><code>根据水平轴和垂直轴翻转，接受两个或一个值，两个值时前面为水平，后面为垂直的角度 ，一个值只是水平轴的角度。此函数是指元素的倾斜角度。</code></pre></li></ol><h3 id="转换Transform-3D的属性"><a href="#转换Transform-3D的属性" class="headerlink" title="转换Transform 3D的属性"></a>转换Transform 3D的属性</h3><p>Transform 3D常用函数有：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306104709948.png" alt="image-20210306104709948"></p><h2 id="CSS3-过渡Transition"><a href="#CSS3-过渡Transition" class="headerlink" title="CSS3 过渡Transition"></a>CSS3 过渡Transition</h2><p><a class="link" href="https://www.cnblogs.com/afighter/p/5731293.html">transition演示<i class="fas fa-external-link-alt"></i></a></p><h3 id="什么是过渡"><a href="#什么是过渡" class="headerlink" title="什么是过渡"></a>什么是过渡</h3><p>使用<code>css</code>的属性值在一段时间内平滑的过渡，比如，鼠标悬停后，背景色在<code>1s</code>内，由白色平滑的过渡到红色<br>指定四个要素：</p><ul><li><p>过渡属性，如background、color等</p></li><li><p>过渡所需时间</p></li><li><p>过渡函数，即过渡的速度、方式等</p></li><li><p>过渡延迟时间，表示开始执行的时间</p></li></ul><p>触发过渡：通过用户的行为触发，如点击、悬浮等</p><h3 id="过渡属性"><a href="#过渡属性" class="headerlink" title="过渡属性"></a>过渡属性</h3><p><code>transition-property: none|all|property;</code><br>多个属性用逗号隔开，可设置过渡的属性，颜色属性。取值为数值的属性：转换属性，渐变属性，阴影属性</p><h3 id="过渡时间"><a href="#过渡时间" class="headerlink" title="过渡时间"></a>过渡时间</h3><p><code>transition-duration: s|ms;</code><br>默认值为0，意味着不会有效果，所以必须设置transition-duration属性</p><h3 id="过渡函数"><a href="#过渡函数" class="headerlink" title="过渡函数"></a>过渡函数</h3><p><code>transition-timing-function: ;</code><br>取值：<br>ease：默认值，规定慢速开始，然后变快，然后慢速结束的过渡效果<br>linear：匀速<br>ease-in：规定以慢速开始，加速效果<br>ease-out：规定以慢速结束，减速效果<br>ease-in-out：规定以慢速开始和结束，先加速后减速效果</p><h3 id="过渡延迟"><a href="#过渡延迟" class="headerlink" title="过渡延迟"></a>过渡延迟</h3><p><code>transition-delay: s|ms;</code><br>改变元素属性值后多长时间开始执行过渡效果</p><h3 id="简写属性transition"><a href="#简写属性transition" class="headerlink" title="简写属性transition"></a>简写属性transition</h3><p>transition属性是一个简写属性，用于设置四个过渡属性<br><code>语法：transition:property duration timing-function delay;</code></p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>{</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#1fb57b</span>;</span><br><span class="line">     <span class="attribute">transition</span>: background <span class="number">4s</span> linear <span class="number">1s</span>;</span><br><span class="line"> }</span><br><span class="line"> <span class="selector-id">#box</span><span class="selector-pseudo">:hover</span>{</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="CSS3-animation动画"><a href="#CSS3-animation动画" class="headerlink" title="CSS3 animation动画"></a>CSS3 animation动画</h2><p><a class="link" href="https://www.runoob.com/css3/css3-animations.html">菜鸟教程<i class="fas fa-external-link-alt"></i></a></p><p>过渡属性只能模拟动画效果，animation属性可以制作类似Flash动画，通过关键帧控制动画的每一步，使元素从一种样式逐渐变化为另一种样式，实现复杂的动画效果。</p><h3 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h3><p>作用：用于声明动画，指定关键帧<br>帧：用于分解动画动作，每个帧代表某个时间点。定义每个帧上的动作</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210306105920430.png" alt="image-20210306105920430"></p><h3 id="keyframes的语法"><a href="#keyframes的语法" class="headerlink" title="@keyframes的语法"></a>@keyframes的语法</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> name  {</span><br><span class="line">    from|0%{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line">    percent{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line">    to|100%{</span><br><span class="line">        css样式</span><br><span class="line">    }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h3><p><code>animation</code>属性用于控制动画，调用由<code>@keyframes</code>定义的动画，设置动画属性，如时间、次数等。animation属性是一个简写属性。<br>语法为：<code>animation:name  duration timing-function delay iteration-count direction;</code></p><h3 id="动画子属性"><a href="#动画子属性" class="headerlink" title="动画子属性"></a>动画子属性</h3><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation-name</span>: ;调用动画，规定需要和keyframes的名字一致</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-duration</span>: s|ms;动画完成一个周期所需要的时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-timing-function</span>: ;规定动画的速度变化类型</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-delay</span>:s|ms ;播放之前的延迟时间</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-iteration-count</span>: 数值|infinite;播放次数 infinite表示无限次播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-direction</span>: normal|alternate;动画播放方向,<span class="attribute">normal</span>为默认值，表示正常播放,alternate表示轮流播放，即动画会在奇数次正常播放，而在偶数次向后播放</span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-fill-mode</span>: forwards;动画停在最后一帧，默认值为<span class="attribute">none</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">animation-play-state</span>:paused|running; 属性规定动画正在运行还是暂停，默认值为running</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/bled-1899264_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3的含义&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="css" scheme="http://blog.sky123.top/tags/css/"/>
    
    <category term="html" scheme="http://blog.sky123.top/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Swagger入门</title>
    <link href="http://blog.sky123.top/2020/08/08/springboot/Swagger/"/>
    <id>http://blog.sky123.top/2020/08/08/springboot/Swagger/</id>
    <published>2020-08-08T02:01:25.000Z</published>
    <updated>2021-03-01T11:36:11.867Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/tree-838667_1280.jpg"></p><hr><h1 id="Swagger入门"><a href="#Swagger入门" class="headerlink" title="Swagger入门"></a>Swagger入门</h1><p>学习目标：</p><ul><li>了解Swagger的作用和概念</li><li>了解前后端分离的概念</li><li>在Springboot中集成Swagger</li></ul><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><p>前后端分离：vue+springboot</p><ul><li>后端：控制层+服务层+数据访问层</li><li>前端：前端控制层+视图层</li></ul><p>前后端的好处：相对独立，松耦合，可以部署在不同的服务器。之间通过API接口通信</p><p>问题：</p><ul><li>前后端在集成协调的时候，无法做到”及时沟通，尽早解决”（由于两端都是独立开发），最终会导致问题集中爆发。</li></ul><p>解决方案：</p><ul><li>指定计划的提纲（schema），实时更新最新的API，降低集成的风险</li><li>早些年：使用word文档，不是很方便，对文档编写有一定的要求</li><li>前后端分离：<ul><li>测试接口工具：postman（不推荐再使用了）</li><li>后端提供接口，需要实时更新最新的改动</li></ul></li></ul><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>号称世界上最流行的 API框架，可以实现 API 与 API文档实时更新，支持多种语言（java，php……），直接运行可以在线测试接口。</p><p><a class="link" href="https://swagger.io/">swagger官网<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228101919079.png" alt="image-20210228101919079"></p><h3 id="SpringFox-3-0-0-发布"><a href="#SpringFox-3-0-0-发布" class="headerlink" title="SpringFox 3.0.0 发布"></a>SpringFox 3.0.0 发布</h3><p>此版本的亮点：</p><blockquote><p>Spring5，Webflux支持（仅支持请求映射，尚不支持功能端点）。<br>Spring Integration支持。<br>SpringBoot支持springfox Boot starter依赖性（零配置、自动配置支持）。<br>支持OpenApi 3.0.3。<br>零依赖。几乎只需要spring-plugin，swagger-core ，现有的swagger2注释将继续工作并丰富openapi3.0规范。</p></blockquote><p>兼容性说明：</p><blockquote><p>需要Java 8<br>需要Spring5.x（未在早期版本中测试）<br>需要SpringBoot 2.2+（未在早期版本中测试）</p></blockquote><h3 id="swagger3-0-与2-xx配置差异"><a href="#swagger3-0-与2-xx配置差异" class="headerlink" title="swagger3.0 与2.xx配置差异"></a>swagger3.0 与2.xx配置差异</h3><ol><li>应用主类（即Controller层）添加注解<code>@EnableOpenApi (swagger2是@EnableSwagger2)</code>。swagger配置类<code>SwaggerProperties.class</code>，与swagger2.xx 版本有差异。自定义一个配置类 <code>SwaggerConfiguration.class</code></li><li>访问地址：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a> (swagger2.xx版本访问的地址为<a class="link" href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html<i class="fas fa-external-link-alt"></i></a>)</li></ol><h2 id="Springboot集成Swagger"><a href="#Springboot集成Swagger" class="headerlink" title="Springboot集成Swagger"></a>Springboot集成Swagger</h2><p>新建springboot   web 项目</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102748582.png" alt="image-20210228102748582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102207420.png" alt="image-20210228102207420"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228102317842.png" alt="image-20210228102317842"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228103855243.png" alt="image-20210228103855243"></p><p>导入相关依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>编写测试代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置Swagger</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228104926484.png" alt="image-20210228104926484"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试访问：<a class="link" href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html<i class="fas fa-external-link-alt"></i></a> </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210228110125566.png" alt="image-20210228110125566"></p><h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><h3 id="修改Swagger信息"><a href="#修改Swagger信息" class="headerlink" title="修改Swagger信息"></a>修改Swagger信息</h3><p>配置的关键是配置一个关键类 <code>Docket</code></p><p>点击 <code>ctrl</code> 进入查看 <code>Docket</code>，在点击进入 <code>ApiInfo.</code> 可以看到默认的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172604042.png" alt="image-20210301172604042"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172619931.png" alt="image-20210301172619931"></p><p>因此配置代码为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从配置文件中注入值</span></span><br><span class="line">    <span class="meta">@Value("${swagger.application-name}")</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Value("${swagger.enable}")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean swaggerEnabled;</span><br><span class="line">    <span class="meta">@Value("${swagger.application-description}")</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="meta">@Value("${swagger.name}")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value("${swagger.url}")</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value("${swagger.email}")</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Value("${swagger.version}")</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="meta">@Value("${swagger.try-host}")</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">         * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(title)</span><br><span class="line">                .description(description)</span><br><span class="line">                <span class="comment">// 作者信息</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(name, url, email))</span><br><span class="line">                .version(version)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里是从 <code>application.yml</code> 配置文件中读取事先定义的值：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: 这是Swagger应用的名字</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"># ===== 自定义swagger配置 ===== #</span><br><span class="line">swagger:</span><br><span class="line">  enable: <span class="keyword">true</span></span><br><span class="line">  application-name: ${spring.application.name}</span><br><span class="line">  application-version: <span class="number">1.0</span></span><br><span class="line">  application-description: springfox swagger <span class="number">3.0</span>整合Demo（这里配置项目的描述）</span><br><span class="line">  <span class="keyword">try</span>-host: http:<span class="comment">//localhost:${server.port}</span></span><br><span class="line">  name: 项目负责人</span><br><span class="line">  email: <span class="number">142342423</span><span class="meta">@qq</span>.com</span><br><span class="line">  url: http:<span class="comment">//www.baidu.com</span></span><br><span class="line">  version: <span class="number">2.3</span><span class="number">.4</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>查看  <code>ApiInfoBuilder</code> 可以查看更多的配置信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301180154288.png" alt="image-20210301180154288"></p><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301172838848.png" alt="image-20210301172838848"></p><h3 id="配置扫描路径"><a href="#配置扫描路径" class="headerlink" title="配置扫描路径"></a>配置扫描路径</h3><p><code>any()：</code>扫描全部</p><p><code>none()：</code>都不扫描</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181141539.png" alt="image-20210301181141539"></p><h4 id="包扫描"><a href="#包扫描" class="headerlink" title="包扫描"></a>包扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.swaggerdemo.controller"</span>))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="类注解扫描"><a href="#类注解扫描" class="headerlink" title="类注解扫描"></a>类注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="方法注解扫描"><a href="#方法注解扫描" class="headerlink" title="方法注解扫描"></a>方法注解扫描</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">                .host(host)</span><br><span class="line">                <span class="comment">// 是否开启</span></span><br><span class="line">                .enable(swaggerEnabled).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))</span><br><span class="line">                .build();</span><br></pre></td></tr></tbody></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>没有了 <code>error</code>  的默认接口，只显示自己写的接口：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301181946804.png" alt="image-20210301181946804"></p><h3 id="配置过滤路径"><a href="#配置过滤路径" class="headerlink" title="配置过滤路径"></a>配置过滤路径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">               .host(host)</span><br><span class="line">               <span class="comment">// 是否开启</span></span><br><span class="line">               .enable(swaggerEnabled).select()</span><br><span class="line">               .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">               .build();</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301182510169.png" alt="image-20210301182510169"></p><h3 id="配置Swagger的API分组"><a href="#配置Swagger的API分组" class="headerlink" title="配置Swagger的API分组"></a>配置Swagger的API分组</h3><p>关键：Docket有个分组方法，但是只能配置一个分组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.groupName(<span class="string">"A"</span>)</span><br></pre></td></tr></tbody></table></figure><p>因此要配置多个分组，只需要注入多个 Docket 实例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"B"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).groupName(<span class="string">"C"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DocumentationType.OAS_30  "openApi", "3.0"</span></span><br><span class="line"><span class="comment">     * .host(host)  默认主机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).apiInfo(apiInfo())</span><br><span class="line">            .host(host)</span><br><span class="line">            .groupName(<span class="string">"A"</span>)</span><br><span class="line">            <span class="comment">// 是否开启</span></span><br><span class="line">            .enable(swaggerEnabled).select()</span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">"/hello/**"</span>))</span><br><span class="line">            .build();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301190020294.png" alt="image-20210301190020294"></p><h3 id="配置接口注释"><a href="#配置接口注释" class="headerlink" title="配置接口注释"></a>配置接口注释</h3><p><code>@Api：</code>用在controller类，描述API接口<br><code>@ApiOperation：</code>描述接口方法<br><code>@ApiModel：</code>描述对象<br><code>@ApiModelProperty：</code>描述对象属性<br><code>@ApiImplicitParams：</code>描述接口参数<br><code>@ApiResponses：</code>描述接口响应</p><p>新建实体类 <code>User</code> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel("关于实体类的描述")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@ApiModelProperty("关于实体类属性的描述")</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty("关于实体类属性的描述")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"><span class="comment">//    public User(String username,String password){</span></span><br><span class="line"><span class="comment">//        this.username = username;</span></span><br><span class="line"><span class="comment">//        this.password = password;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    public User(){</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建接口 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/hello")</span></span><br><span class="line">    <span class="meta">@ApiOperation("描述接口方法")</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams({</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name="name",value="姓名",dataTypeClass = String.class,required = true)</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="meta">@ApiResponses({</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 200, message = "请求成功"),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 400, message = "请求参数没填好"),</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193506582.png" alt="image-20210301193506582"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193519108.png" alt="image-20210301193519108"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301193532477.png" alt="image-20210301193532477"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/tree-838667_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Swagger入门&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="Swagger" scheme="http://blog.sky123.top/tags/Swagger/"/>
    
    <category term="Java" scheme="http://blog.sky123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot多环境切换</title>
    <link href="http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/"/>
    <id>http://blog.sky123.top/2020/08/01/springboot/Springboot%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2021-03-01T11:36:36.476Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/dunes-5568253_1280.jpg"></p><hr><h1 id="SpringBoot多环境切换"><a href="#SpringBoot多环境切换" class="headerlink" title="SpringBoot多环境切换"></a>SpringBoot多环境切换</h1><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li><p>不同环境配置可以配置不同的参数,不用来回改参数</p></li><li><p>便于部署，提高效率，减少出错</p></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>在默认文件中 <code>application.yml</code>  中 配置切换属性：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></tbody></table></figure><p>新建 <code>application-dev.yml</code> 文件：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">这是开发环境</span></span><br></pre></td></tr></tbody></table></figure><p>启动后看到：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20210301185125610.png" alt="image-20210301185125610"></p><p>说明环境切换成功。</p><p>同理可以新建多个配置文件，<code>yml 配置方式</code>会自动识别。只需在默认的 <code>application.yml</code> 切换即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/dunes-5568253_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;SpringBoot</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="SpringBoot" scheme="http://blog.sky123.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Javascript常用字符串功能方法</title>
    <link href="http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/07/02/javascript/Javascript%E5%B8%B8%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-02T06:04:46.000Z</published>
    <updated>2021-02-27T06:14:16.496Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sunrise-5863751_1280.png"></p><hr><h2 id="Javascript常用字符串功能方法"><a href="#Javascript常用字符串功能方法" class="headerlink" title="Javascript常用字符串功能方法"></a>Javascript常用字符串功能方法</h2><h3 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h3><p>字符串转换是最基础的要求和工作，你可以将任何类型的数据都转换为字符串，你可以用下面三种方法的任何一种：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=num.toString();    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>你同样可以这么做：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="built_in">String</span>(num);    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><p>或者，在简单点儿：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> mystr=<span class="string">""</span> + num;    <span class="comment">//"24"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>将字符串进行拆分返回一个新的数组，JavaScript就给我们提供了一个非常方便的函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>);    <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo","woaiziji"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>);        <span class="comment">//["q","i","n","g","c","h","e","n","g","h","u","w","o","g","u","o","x","i","a","n","s","h","e","n","g",",","w","o","a","i","s","h","e","n","g","h","u","o",",","w","o","a","i","z","i","j","i"];</span></span><br></pre></td></tr></tbody></table></figure><p><code>split()</code>的第二个参数，表示返回的字符串数组的最大长度</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1=mystr.split(<span class="string">","</span>,<span class="number">2</span>); <span class="comment">//["qingchenghuwoguoxiansheng","woaishenghuo"];</span></span><br><span class="line"><span class="keyword">var</span> arr2=mystr.split(<span class="string">""</span>,<span class="number">8</span>); <span class="comment">//["q","i","n","g","c","h","e","n"];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>仅仅查找到字符串并不会是题目的停止，一般题目还经常会要求你去进行替换操作，那就继续看以下代码:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"wozaijinxingzifuchuantihuancaozuo,zifuchuantihuano"</span>;</span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="string">"zifuchuan"</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo,zifuchuantihuano</span></span><br><span class="line"><span class="keyword">var</span> replaceStr=mystr.replace(<span class="regexp">/zifuchuan/g</span>,<span class="string">" "</span>);    <span class="comment">//wozaijinxing tihuancaozuo, tihuano</span></span><br></pre></td></tr></tbody></table></figure><p>默认只进行第一次匹配操作的替换，想要全局替换，需要置上正则全局标识g</p><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><p>获取字符串的长度经常会用到，方法很简单：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"qingchenghuwoguoxiansheng,woaishenghuo,woaiziji"</span>;</span><br><span class="line"><span class="keyword">var</span> arrLength=mystr.length;    <span class="comment">//47</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查询子字符串"><a href="#查询子字符串" class="headerlink" title="查询子字符串"></a>查询子字符串</h3><p>判断字符串内是否包含子串，不少开发者会使用for循环来判断，而忘记了JavaScript提供子串函数：</p><ul><li><code>indexOf()</code>，该Of() 方法对大小写敏感。返回字符串中一个子串第一处出现的索引（从左到右搜索）。如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.indexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.indexOf(<span class="string">"l"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.indexOf(<span class="string">"l"</span>,<span class="number">3</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>lastIndexOf()</code>，该方法对大小写敏感。返回字符串中一个子串最后一处出现的索引（从右到左搜索），如果没有匹配项，返回 -1 。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.lastIndexOf(<span class="string">"llo"</span>);    <span class="comment">//2</span></span><br><span class="line"><span class="keyword">var</span> index1=mystr.lastIndexOf(<span class="string">"l"</span>);    <span class="comment">//9</span></span><br><span class="line"><span class="keyword">var</span> index2=mystr.lastIndexOf(<span class="string">"l"</span>,<span class="number">4</span>);    <span class="comment">//3</span></span><br></pre></td></tr></tbody></table></figure><h3 id="返回指定位置的字符或其字符编码值"><a href="#返回指定位置的字符或其字符编码值" class="headerlink" title="返回指定位置的字符或其字符编码值"></a>返回指定位置的字符或其字符编码值</h3><p>查找给定位置的字符，可以使用如下函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> index=mystr.charAt(<span class="number">7</span>);    <span class="comment">//o</span></span><br></pre></td></tr></tbody></table></figure><p>同样，它的一个兄弟函数就是查找对应位置的字符编码值，如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> charCode=mystr. charCodeAt(<span class="number">7</span>);    <span class="comment">//111</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h3><p>可以直接通过字符串进行匹配，也可以通过正则进行匹配，可能需要你对正则表达式有一定的了解，先来看看match()函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=mystr.match(<span class="string">"guo"</span>);    <span class="comment">//guo</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=mystr.match(<span class="string">"Guo"</span>);    <span class="comment">//nullvar regexp1=/\d+/g;</span></span><br><span class="line"><span class="keyword">var</span> regexp2=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> regexp3=<span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr2=mystr.match(regexp1);    <span class="comment">//["6","33"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp2);    <span class="comment">//["guo"]</span></span><br><span class="line"><span class="keyword">var</span> matchStr3=mystr.match(regexp3);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr3.index    <span class="comment">//11</span></span><br><span class="line">matchStr3.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>注意：1.此处使用字符串直接进行匹配，被匹配的字符串内包含要匹配的字符串时，返回所要匹配的字符串。</p><p>　　　2.如果使用正则匹配字符串时，如果正则表达式没有 g (全局标识)标志，返回与正则匹配相同的结果。而且返回的数组拥有一个额外的  input 属性，该属性包含原始字符串。另外，还拥有一个 <code>index</code> 属性，该属性表示匹配结果在被字符串中的索引（以0开始）。如果正则表达式包含 g 标志，则该方法返回匹配字符串的数组。</p><p>再来看看使用<code>exec()</code>函数： </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1=<span class="regexp">/guo/g</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr=regexp1.exec(mystr);  <span class="comment">//["guo"]var regexp2=/guo/;</span></span><br><span class="line"><span class="keyword">var</span> matchStr1=regexp2.exec(mystr);    <span class="comment">//["guo",index:11,input:"hi,mynameisguoxiansheng6,33iswho?"]</span></span><br><span class="line">matchStr1.index    <span class="comment">//11</span></span><br><span class="line">matchStr1.input    <span class="comment">//hi,mynameisguoxiansheng6,33iswho?</span></span><br></pre></td></tr></tbody></table></figure><p>简单吧，仅仅是把正则和字符串换了个位置，即<code>exec()</code>函数是在正则上调用，传递字符串的参数。对于上面两个方法，匹配的结果都是返回第一个匹配成功的字符串，如果匹配失败则返回<code>null</code>。</p><p>再来看一个类似的函数<code>search()</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr = <span class="string">"hi,mynameisguoxiansheng6,33iswho?"</span>;</span><br><span class="line"><span class="keyword">var</span> regexp1 = <span class="regexp">/guo/</span>;</span><br><span class="line"><span class="keyword">var</span> matchStr = mystr.search(regexp1);    <span class="comment">//11</span></span><br></pre></td></tr></tbody></table></figure><p>进行正则匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回 -1</p><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>可以将两个或多个字符串进行加法操作，同时可以使用<code>JavaScript</code>提供的<code>concat函数</code>：</p><p>先看加法操作进行字符串连接：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">"world!"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1+<span class="string">" "</span>+mystr2;    <span class="comment">//Hello world!</span></span><br></pre></td></tr></tbody></table></figure><p>是不是很简单呀，那继续看看<code>concat函数</code>吧：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr1=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr2=<span class="string">" world,"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr3=<span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">var</span> mystr4=<span class="string">"guoxiansheng"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr=mystr1.concat(mystr2+mystr3+<span class="string">" "</span>+mystr4);    <span class="comment">//Hello world,Hello guoxiansheng</span></span><br></pre></td></tr></tbody></table></figure><p><code>concat()函数</code>可以有多个参数，传递多个字符串，拼接多个字符串。</p><h3 id="字符串切割和提取"><a href="#字符串切割和提取" class="headerlink" title="字符串切割和提取"></a>字符串切割和提取</h3><p>有三种可以从字符串中抽取和切割的方法：</p><p>第一种，<code>slice()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.slice(-<span class="number">3</span>);    <span class="comment">//ld!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.slice(-<span class="number">3</span>,-<span class="number">1</span>);    <span class="comment">//ld</span></span><br><span class="line"><span class="keyword">var</span> sliceStr3=mystr.slice(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr4=mystr.slice(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第二种：<code>substring()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substring(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substring(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo w</span></span><br></pre></td></tr></tbody></table></figure><p>第三种：<code>substr()函数</code>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> sliceStr1=mystr.substr(<span class="number">3</span>);    <span class="comment">//lo world!</span></span><br><span class="line"><span class="keyword">var</span> sliceStr2=mystr.substr(<span class="number">3</span>,<span class="number">7</span>);    <span class="comment">//lo wo</span></span><br></pre></td></tr></tbody></table></figure><p>注：1.<code>slice()</code> 可以为负数，如果起始位置为负数，则从字符串最后一位向前找对应位数并且向后取结束位置，如果为正整数则从前往后取起始位置到结束位置。<br>　　2.<code>substring()</code>只能非负整数，截取起始结束位置同slice()函数一致。</p><p>　　3.<code>substr()</code>与第一、第二种函数不同，从起始位置开始截取，结束位置为第二个参数截取的字符串最大长度。</p><p>以上三种函数未填第二参数时，自动截取起始位置到字符串末尾。</p><h3 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="keyword">var</span> lowCaseStr=mystr.toLowerCase();    <span class="comment">//hello world!</span></span><br><span class="line"><span class="keyword">var</span> upCaseStr=mystr. toUpperCase();    <span class="comment">//HELLO WORLD!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去空格"><a href="#字符串去空格" class="headerlink" title="字符串去空格"></a>字符串去空格</h3><p><code>trim方法</code>用来删除字符串前后的空格 </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mystr=<span class="string">"     hello world      "</span>;  </span><br><span class="line"><span class="keyword">var</span> trimStr=mystr.trim();    <span class="comment">//hello world</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"aahhgggsssjjj"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeRepeat</span>(<span class="params">msg</span>)</span>{  </span><br><span class="line">    <span class="keyword">var</span> res=[];  </span><br><span class="line">    <span class="keyword">var</span> arr=msg.split(<span class="string">""</span>);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">        <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">            res.push(arr[i]);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> res.join(<span class="string">""</span>);  </span><br><span class="line">}  </span><br><span class="line">removeRepeat(str);    <span class="comment">//ahgsj </span></span><br></pre></td></tr></tbody></table></figure><h3 id="判断字符串中字符出现的次数"><a href="#判断字符串中字符出现的次数" class="headerlink" title="判断字符串中字符出现的次数"></a>判断字符串中字符出现的次数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">    1.先实现字符串去重  </span></span><br><span class="line"><span class="comment">    2.然后对去重后的数组用for循环操作，分别与原始数组中各个值进行比较，如果相等则count++,循环结束将count保存在sum数组中，然后将count重置为0  </span></span><br><span class="line"><span class="comment">    3.这样一来去重后的数组中的元素在原数组中出现的次数与sum数组中的元素是一一对应的  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"aacccbbeeeddd"</span>;  </span><br><span class="line"><span class="keyword">var</span> sum=[];  </span><br><span class="line"><span class="keyword">var</span> res=[];  </span><br><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;  </span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">""</span>);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++){  </span><br><span class="line">    <span class="keyword">if</span>(res.indexOf(arr[i])==-<span class="number">1</span>){  </span><br><span class="line">        res.push(arr[i]);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length;j++){  </span><br><span class="line">        <span class="keyword">if</span>(arr[j]==res[i]){  </span><br><span class="line">            count++;  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">    sum.push(count);  </span><br><span class="line">    count=<span class="number">0</span>;  </span><br><span class="line">}  </span><br><span class="line"><span class="built_in">console</span>.log(res);    <span class="comment">//["a", "c", "b", "e", "d"]  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;res.length;i++){  </span><br><span class="line">    <span class="keyword">var</span> str=(sum[i]%<span class="number">2</span>==<span class="number">0</span>)?<span class="string">"偶数"</span>:<span class="string">"奇数"</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+sum[i]+<span class="string">"次"</span>);  </span><br><span class="line">    <span class="built_in">console</span>.log(res[i]+<span class="string">"出现了"</span>+str+<span class="string">"次"</span>);  </span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/sunrise-5863751_1280.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Javascri</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="http://blog.sky123.top/tags/Javascript/"/>
    
    <category term="字符串" scheme="http://blog.sky123.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Javascript常用的21个数组方法</title>
    <link href="http://blog.sky123.top/2020/07/01/javascript/Javascript%E5%B8%B8%E7%94%A8%E7%9A%8421%E4%B8%AA%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/07/01/javascript/Javascript%E5%B8%B8%E7%94%A8%E7%9A%8421%E4%B8%AA%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-01T05:38:27.000Z</published>
    <updated>2021-02-27T06:14:38.965Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/dinosaur-5995333_1280.png"></p><hr><h2 id="Javascript常用的21个数组方法"><a href="#Javascript常用的21个数组方法" class="headerlink" title="Javascript常用的21个数组方法"></a>Javascript常用的21个数组方法</h2><p>这七个数组方法</p><p><code>unshift();      push()；  shift();</code></p><p><code>pop();     sort();    reverse();    splice();</code>使用后数组是会被改变的。</p><table><thead><tr><th align="center">方法名</th><th align="center">对应版本</th><th align="center">功能</th><th align="center">原数组是否改变</th></tr></thead><tbody><tr><td align="center">concat()</td><td align="center">ES5-</td><td align="center">合并数组，并返回合并之后的数据</td><td align="center">n</td></tr><tr><td align="center">join()</td><td align="center">ES5-</td><td align="center">使用分隔符，将数组转为字符串并返回</td><td align="center">n</td></tr><tr><td align="center">pop()</td><td align="center">ES5-</td><td align="center">删除最后一位，并返回删除的数据</td><td align="center">y</td></tr><tr><td align="center">shift()</td><td align="center">ES5-</td><td align="center">删除第一位，并返回删除的数据</td><td align="center">y</td></tr><tr><td align="center">unshift()</td><td align="center">ES5-</td><td align="center">在第一位新增一或多个数据，返回长度</td><td align="center">y</td></tr><tr><td align="center">push()</td><td align="center">ES5-</td><td align="center">在最后一位新增一或多个数据，返回长度</td><td align="center">y</td></tr><tr><td align="center">reverse()</td><td align="center">ES5-</td><td align="center">反转数组，返回结果</td><td align="center">y</td></tr><tr><td align="center">slice()</td><td align="center">ES5-</td><td align="center">截取指定位置的数组，并返回</td><td align="center">n</td></tr><tr><td align="center">sort()</td><td align="center">ES5-</td><td align="center">排序（字符规则），返回结果</td><td align="center">y</td></tr><tr><td align="center">splice()</td><td align="center">ES5-</td><td align="center">删除指定位置，并替换，返回删除的数据</td><td align="center">y</td></tr><tr><td align="center">toString()</td><td align="center">ES5-</td><td align="center">直接转为字符串，并返回</td><td align="center">n</td></tr><tr><td align="center">valueOf()</td><td align="center">ES5-</td><td align="center">返回数组对象的原始值</td><td align="center">n</td></tr><tr><td align="center">indexOf()</td><td align="center">ES5</td><td align="center">查询并返回数据的索引</td><td align="center">n</td></tr><tr><td align="center">lastIndexOf()</td><td align="center">ES5</td><td align="center">反向查询并返回数据的索引</td><td align="center">n</td></tr><tr><td align="center">forEach()</td><td align="center">ES5</td><td align="center">参数为回调函数，会遍历数组所有的项，回调函数接受三个参数，分别为value，index，self；forEach没有返回值</td><td align="center">n</td></tr><tr><td align="center">map()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回数据，组成新数组由map返回</td><td align="center">n</td></tr><tr><td align="center">filter()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回布尔值，为true的数据组成新数组由filter返回</td><td align="center">n</td></tr><tr><td align="center">every()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回布尔值，全部为true，由every返回true</td><td align="center">n</td></tr><tr><td align="center">some()</td><td align="center">ES5</td><td align="center">同forEach，同时回调函数返回布尔值，只要由一个为true，由some返回true</td><td align="center">n</td></tr><tr><td align="center">reduce()</td><td align="center">ES5</td><td align="center">归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduce返回</td><td align="center">n</td></tr><tr><td align="center">reduceRight()</td><td align="center">ES5</td><td align="center">反向归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduceRight返回</td><td align="center">n</td></tr></tbody></table><h3 id="1：concat"><a href="#1：concat" class="headerlink" title="1：concat()"></a>1：concat()</h3><p>功能：合并数组，可以合并一个或多个数组，会返回合并数组之后的数据，不会改变原来的数组；</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];<span class="keyword">var</span> str2 = [<span class="string">"world"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.concat(str2));　　　　　　　　<span class="comment">//[12, 2, "hello", "world"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　<span class="comment">//[12,2,"hello"];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2：join"><a href="#2：join" class="headerlink" title="2：join()"></a>2：join()</h3><p>功能：将数组转为字符串并返回转化的字符串数据，不会改变原来的数组；</p><p>注意：()中用双引号包括自己想用的分隔符，默认为逗号，这里方便观察，我用了-　　　</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="string">"world"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.join(<span class="string">"-"</span>));　　　　　　　　<span class="comment">//12-2-hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　<span class="comment">//[12, 2, "hello"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3：pop"><a href="#3：pop" class="headerlink" title="3：pop()"></a>3：pop()</h3><p>功能：删除数组的最后一位，并且返回删除的数据，会改变原来的数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.pop()　　　　　　　　<span class="comment">//hello</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　<span class="comment">//[12, 2]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4：shift"><a href="#4：shift" class="headerlink" title="4：shift()"></a>4：shift()</h3><p>功能：删除数组的第一位数据，并且返回新数组的长度，会改变原来的数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.shift());　　　　　　<span class="comment">//12</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　<span class="comment">//[2,"hello"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5：unshift"><a href="#5：unshift" class="headerlink" title="5：unshift()"></a>5：unshift()</h3><p>功能：在数组的首位新增一个或多数据，并且返回新数组的长度，会改变原来的数组</p><p>注意：<code>unshift()</code>方法返回的数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据，</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">"test"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.unshift(<span class="string">"你好"</span>));　　　　　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.unshift(<span class="string">"hello"</span>,<span class="string">"world"</span>));　　　　　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//["你好", 12, 2, "hello"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//["hello", "world", 43, 2, "test"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6：push"><a href="#6：push" class="headerlink" title="6：push()"></a>6：push()</h3><p>功能：在数组的最后一位新增一个或多个数据，并且返回新数组的长度，会改变原来的数组</p><p>注意：push()方法返回的是数据是新数组的长度，它增加的数据可以是一个也可以是多个，可以理解为增加一连串的数据</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">43</span>,<span class="number">2</span>,<span class="string">"test"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.push(<span class="string">"你好"</span>));　　　　　　　　　　<span class="comment">//4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.push(<span class="string">"hello"</span>,<span class="string">"world"</span>));　　　　<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　　　　　　<span class="comment">//[12, 2, "hello","你好"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);　　　　　　　　　　　　　　　　　<span class="comment">//[43, 2, "test","hello", "world"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7：reverse"><a href="#7：reverse" class="headerlink" title="7：reverse()"></a>7：reverse()</h3><p>功能：将数组的数据进行反转，并且返回反转后的数组，会改变原数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="string">"hello"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.reverse());　　　　　　<span class="comment">//["hello", 2, 12]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);　　　　　　　　　　　　<span class="comment">//["hello", 2, 12]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8：sort"><a href="#8：sort" class="headerlink" title="8：sort()"></a>8：sort()</h3><p>功能：对数组内的数据进行排序(默认为升序)，并且返回排过序的新数组，会改变原来的数组</p><p>注意：</p><ol><li>这里的排序是针对字符的排序，先使用数组的<code>toString()</code>方法转为字符串，再逐位比较，3是大于12的，因为首位3&gt;1，不要与<code>Number型</code>的数据排序混淆</li><li>str2数组中增加了三个字符，可以看到，比较的时候，<code>zoom</code>是最大的，因为首位的英文字母通过ASCII码可以转为相应的数值，再根据数值比较</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = [<span class="number">12</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> str2 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="string">"hello"</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str1.sort());<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str1);<span class="comment">//[12, 2, 2, 43, 5, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.sort());<span class="comment">//[2, 2, 43, 5, 5, 92, "abc", "hello", "zoom"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//[2, 2, 43, 5, 5, 92, "abc", "hello", "zoom"]</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>排序问题</li></ol><p>参数：<code>sort(callback)</code> 如果需要按照数值排序，需要传参。sort(callback)，callback为回调函数，该函数应该具有两个参数，比较这两个参数，然后返回一个用于说明这两个值的相对顺序的数字（a-b）。其返回值如下：</p><ul><li>若 a 小于 b，返回一个小于 0 的值。</li><li>若 a 等于 b，则返回 0。</li><li>若 a 大于 b，则返回一个大于 0 的值。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = [<span class="number">92</span>,<span class="number">2</span>,<span class="number">43</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">5</span>];     </span><br><span class="line"><span class="built_in">console</span>.log(str3.sort(fn));　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="built_in">console</span>.log(str3);　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//[2, 2, 5, 5, 43, 92]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,b</span>)</span>{</span><br><span class="line">　　　　<span class="keyword">return</span> a-b;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h3 id="9：slice"><a href="#9：slice" class="headerlink" title="9：slice()"></a>9：slice()</h3><p>功能：截取指定位置的数组，并且返回截取的数组，不会改变原数组</p><p>参数：<code>slice(startIndex, endIndex)</code></p><p>注意：可从已有的数组中返回选定的元素。该方法接收两个参数<code>slice(start,end)</code>，strat为必选，表示从第几位开始；end为可选，表示到第几位结束(不包含end位)，省略表示到最后一位；start和end都可以为负数，负数时表示从最后一位开始算起，如-1表示最后一位。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"T1"</span>,<span class="string">"J1"</span>,<span class="string">"L1"</span>,<span class="string">"L2"</span>,<span class="string">"M1"</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,<span class="number">3</span>));        <span class="comment">//["J1","L1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>));          <span class="comment">//["J1","L1","L2","M1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">4</span>,-<span class="number">1</span>));      <span class="comment">//["J1","L1","L2"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(-<span class="number">2</span>));         <span class="comment">//["Lily","M1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>,-<span class="number">2</span>));       <span class="comment">//["J1","L1"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);                   <span class="comment">//["T1","J1","L1","L2","M1"]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10：splice"><a href="#10：splice" class="headerlink" title="10：splice()"></a>10：splice()</h3><p>功能：向数组中添加，或从数组删除，或替换数组中的元素，然后返回被删除/替换的元素。</p><p>参数：<code>splice(start,num,data1,data2,...);</code> 所有参数全部可选。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"a"</span>,<span class="string">"b"</span>));<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//["Tom", "Jack", "a", "b", "Lucy", "Lily", "May"]---原数组改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="11：toString"><a href="#11：toString" class="headerlink" title="11：toString()"></a>11：toString()</h3><p>功能：将数组转换成字符串，类似于没有参数的<code>join()</code>。该方法会在数据发生隐式类型转换时被自动调用，如果手动调用，就是直接转为字符串。不会改变原数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.toString()); <span class="comment">//1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="12：valueOf"><a href="#12：valueOf" class="headerlink" title="12：valueOf()"></a>12：valueOf()</h3><p>功能：返回数组的原始值（一般情况下其实就是数组自身），一般由js在后台调用，并不显式的出现在代码中</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf()); <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="comment">//为了证明返回的是数组自身</span></span><br><span class="line"><span class="built_in">console</span>.log(str.valueOf() == str);<span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="13：IndexOf"><a href="#13：IndexOf" class="headerlink" title="13：IndexOf()"></a>13：IndexOf()</h3><p>功能：根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引</p><p>参数：<code>indexOf(value, start)</code>;value为要查询的数据；start为可选，表示开始查询的位置，当start为负数时，从数组的尾部向前数；如果查询不到value的存在，则方法返回-1</p><p>注意：如果找到该数据，立即返回该数据的索引，不再往后继续查找</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>];</span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>));        <span class="comment">//2</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">3</span>));      <span class="comment">//3</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">4</span>));      <span class="comment">//-1</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">1</span>));     <span class="comment">//-1</span></span><br><span class="line"> <span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">3</span>));     <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="14：lastIndexOf"><a href="#14：lastIndexOf" class="headerlink" title="14：lastIndexOf()"></a>14：lastIndexOf()</h3><p>功能：根据指定的数据，从左向右，查询在数组中出现的位置，如果不存在指定的数据，返回-1，找到了指定的数据返回该数据的索引</p><p>参数：<code>indexOf(value, start)</code>;value为要查询的数据；start为可选，表示开始查询的位置，当start为负数时，从数组的尾部向前数；如果查询不到value的存在，则方法返回-1</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = [<span class="string">"h"</span>,<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>,<span class="string">"o"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>));        <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">3</span>));      <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,<span class="number">4</span>));      <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">1</span>));     <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"l"</span>,-<span class="number">3</span>));     <span class="comment">//2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="15：forEach"><a href="#15：forEach" class="headerlink" title="15：forEach()"></a>15：forEach()</h3><p>功能：ES5新增的方法，用来遍历数组，没有返回值，</p><p>参数：<code>forEach(callback)</code>;callback默认有三个参数，分别为value(遍历到的数组的数据)，index(对应的索引)，self(数组自身)。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line"><span class="keyword">var</span> a = arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">     <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self));</span><br><span class="line">})</span><br><span class="line"><span class="comment">// 打印结果为：</span></span><br><span class="line"><span class="comment">// Tom--0--true</span></span><br><span class="line"><span class="comment">// Jack--1--true</span></span><br><span class="line"><span class="comment">// Lucy--2--true</span></span><br><span class="line"><span class="comment">// Lily--3--true</span></span><br><span class="line"><span class="comment">// May--4--true</span></span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//undefined---forEach没有返回值</span></span><br><span class="line"><span class="comment">//该方法为遍历方法，不会修改原数组</span></span><br></pre></td></tr></tbody></table></figure><h3 id="16：map"><a href="#16：map" class="headerlink" title="16：map()"></a>16：map()</h3><p>功能：</p><ol><li>同<code>forEach</code>功能；</li><li>map的回调函数会将执行结果返回，最后map将所有回调函数的返回值组成新数组返回。</li></ol><p>参数：<code>map(callback)</code>;callback默认有三个参数，分别为value，index，self。跟上面的forEach()的参数一样</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：每次回调函数的返回值被map组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi:"</span>+value;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);     <span class="comment">//["hi:Tom", "hi:Jack", "hi:Lucy", "hi:Lily", "hi:May"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);   <span class="comment">//["Tom", "Jack", "Lucy", "Lily", "May"]---原数组未改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="17：filter"><a href="#17：filter" class="headerlink" title="17：filter()"></a>17：filter()</h3><p>功能：1.同<code>forEach</code>功能；2.<code>filter</code>的回调函数需要返回布尔值，当为true时，将本次数组的数据返回给filter，最后filter将所有回调函数的返回值组成新数组返回（此功能可理解为“过滤”）。</p><p>参数：<code>filter(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//功能1：同forEach</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr === self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// Jack--1--true</span></span><br><span class="line">    <span class="comment">// Lucy--2--true</span></span><br><span class="line">    <span class="comment">// Lily--3--true</span></span><br><span class="line">    <span class="comment">// May--4--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//功能2：当回调函数的返回值为true时，本次的数组值返回给filter，被filter组成新数组返回</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);         <span class="comment">//["Jack", "Lucy", "Lily"]</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr);       <span class="comment">//["Tom", "Jack", "Lucy", "Lily", "May"]---原数组未改变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="18：every"><a href="#18：every" class="headerlink" title="18：every()"></a>18：every()</h3><p>功能：判断数组中每一项是否都满足条件，只有所有项都满足条件，才会返回true。</p><p>参数：<code>every()</code>接收一个回调函数作为参数，这个回调函数需要有返回值，<code>every(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><p>功能1：当回调函数的返回值为true时，类似于<code>forEach</code>的功能，遍历所有；如果为false，那么停止执行，后面的数据不再遍历，停在第一个返回false的位置。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">//因为回调函数中没有return true，默认返回undefined，等同于返回false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &lt; <span class="number">4</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">//因为当遍历到Jack时，回调函数到return返回false，此时Jack已经遍历，但是后面数据就不再被遍历了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br><span class="line">    <span class="comment">//因为每个回调函数的返回值都是true，那么会遍历数组所有数据，等同于forEach功能</span></span><br></pre></td></tr></tbody></table></figure><p>功能2：当每个回调函数的返回值都为true时，every的返回值为true，只要有一个回调函数的返回值为false，every的返回值都为false</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">2</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);           <span class="comment">//true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="19：some"><a href="#19：some" class="headerlink" title="19：some()"></a>19：some()</h3><p>功能：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p><p>参数：<code>some()</code>接收一个回调函数作为参数，这个回调函数需要有返回值，<code>some(callback)</code>;callback默认有三个参数，分别为value，index，self。</p><p>功能1：因为要判断数组中的每一项，只要有一个回调函数返回true，some都会返回true，所以与every正好相反，当遇到一个回调函数的返回值为true时，可以确定结果，那么停止执行，后面都数据不再遍历，停在第一个返回true的位置；当回调函数的返回值为false时，需要继续向后执行，到最后才能确定结果，所以会遍历所有数据，实现类似于<code>forEach</code>的功能，遍历所有。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// Tom--0--true</span></span><br><span class="line">    <span class="comment">// abc--1--true</span></span><br><span class="line">    <span class="comment">// Jack--2--true</span></span><br><span class="line">    <span class="comment">// Lucy--3--true</span></span><br><span class="line">    <span class="comment">// Lily--4--true</span></span><br><span class="line">    <span class="comment">// May--5--true</span></span><br></pre></td></tr></tbody></table></figure><p>功能2：与every相反，只要有一个回调函数的返回值都为true，some的返回值为true，所有回调函数的返回值为false，some的返回值才为false</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">3</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"Tom"</span>,<span class="string">"abc"</span>,<span class="string">"Jack"</span>,<span class="string">"Lucy"</span>,<span class="string">"Lily"</span>,<span class="string">"May"</span>];</span><br><span class="line">    <span class="keyword">var</span> a = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> value.length &gt; <span class="number">4</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(a);             <span class="comment">//false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="20：reduce"><a href="#20：reduce" class="headerlink" title="20：reduce()"></a>20：reduce()</h3><p>功能：从数组的第一项开始，逐个遍历到最后，迭代数组的所有项，然后构建一个最终返回的值。</p><p>参数：<code>reduce()</code>接收一个或两个参数：第一个是回调函数，表示在数组的每一项上调用的函数；第二个参数（可选的）作为归并的初始值，被回调函数第一次执行时的第一个参数接收。 <code>reduce(callback,initial)</code>;callback默认有四个参数，分别为<code>prev，now，index，self</code>。  callback返回的任何值都会作为下一次执行的第一个参数。  如果initial参数被省略，那么第一次迭代发生在数组的第二项上，因此callback的第一个参数是数组的第一项，第二个参数就是数组的第二项。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1:不省略initial参数，回调函数没有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    }, <span class="number">2019</span>)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// 2019--10--0--true</span></span><br><span class="line">    <span class="comment">// undefined--20--1--true</span></span><br><span class="line">    <span class="comment">// undefined--30--2--true</span></span><br><span class="line">    <span class="comment">// undefined--40--3--true</span></span><br><span class="line">    <span class="comment">// undefined--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数没有return，所以从第二次开始，prev拿到的是undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo2:省略initial参数，回调函数没有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self))</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：第一次，回调函数的第一个参数是数组的第一项。第二个参数就是数组的第二项</span></span><br><span class="line">    <span class="comment">// 10--20--1--true</span></span><br><span class="line">    <span class="comment">// undefined--30--2--true</span></span><br><span class="line">    <span class="comment">// undefined--40--3--true</span></span><br><span class="line">    <span class="comment">// undefined--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数没有return，所以从第二次开始，prev拿到的是undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo3:不省略initial参数，回调函数有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }, <span class="number">2019</span>)</span><br><span class="line">    <span class="comment">// 打印结果为：</span></span><br><span class="line">    <span class="comment">// 2019--10--0--true</span></span><br><span class="line">    <span class="comment">// hello--20--1--true</span></span><br><span class="line">    <span class="comment">// hello--30--2--true</span></span><br><span class="line">    <span class="comment">// hello--40--3--true</span></span><br><span class="line">    <span class="comment">// hello--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数有return，所以从第二次开始，prev拿到的是回调函数return的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo4:省略initial参数，回调函数有返回值</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(prev + <span class="string">"--"</span> + now + <span class="string">"--"</span> + index + <span class="string">"--"</span> + (arr == self));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 打印结果为：第一次，回调函数的第一个参数是数组的第一项。第二个参数就是数组的第二项</span></span><br><span class="line">    <span class="comment">// 10--20--1--true</span></span><br><span class="line">    <span class="comment">// hello--30--2--true</span></span><br><span class="line">    <span class="comment">// hello--40--3--true</span></span><br><span class="line">    <span class="comment">// hello--50--4--true</span></span><br><span class="line">    <span class="comment">// 此时回调函数有return，所以从第二次开始，prev拿到的是回调函数return的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo5：使用reduce计算数组中所有数据的和</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> prev + now;</span><br><span class="line">    })</span><br><span class="line">    <span class="built_in">console</span>.log(sum);      <span class="comment">//150</span></span><br><span class="line">    <span class="comment">// 回调函数的最后一次return的结果被返回到reduce方法的身上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//demo6：使用reduce计算数组中所有数据的和</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,now,index,self</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> prev + now;</span><br><span class="line">    }, <span class="number">8</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(sum);      <span class="comment">//158</span></span><br><span class="line">    <span class="comment">// 回调函数的最后一次return的结果被返回到reduce方法的身上</span></span><br><span class="line">    <span class="comment">// 因为reduce有第二个参数initial，在第一次执行时被计算，所以最终结果被加上8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="21：reduceRight"><a href="#21：reduceRight" class="headerlink" title="21：reduceRight()"></a>21：reduceRight()</h3><p>功能：（与reduce类似）从数组的最后一项开始，向前逐个遍历到第一位，迭代数组的所有项，然后构建一个最终返回的值。</p><p>参数：<code>同reduce。 demo：同reduce</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://img.sky123.top/img/dinosaur-5995333_1280.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Javascr</summary>
      
    
    
    
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="http://blog.sky123.top/tags/Javascript/"/>
    
    <category term="数组" scheme="http://blog.sky123.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记07-Promise和axios</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Promise%E5%92%8Caxios/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Promise%E5%92%8Caxios/</id>
    <published>2020-05-04T23:45:01.000Z</published>
    <updated>2021-03-03T15:16:12.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记07-Promise和axios"><a href="#vue学习笔记07-Promise和axios" class="headerlink" title="vue学习笔记07-Promise和axios"></a>vue学习笔记07-Promise和axios</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/forest-166733_1280.jpg"></p><hr><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise?"></a>什么是Promise?</h2><p>ES6中一个非常重要和好用的特性就是Promise。但是初次接触Promise会一脸懵逼，这TM是什么东西？</p><p>看看官方或者一些文章对它的介绍和用法，也是一头雾水。</p><p><code>Promise到底是做什么的呢？Promise是异步编程的一种解决方案。</code></p><p>那什么时候我们会来处理异步事件呢？一种很常见的场景应该就是网络请求了。</p><p><code>我们封装一个网络请求的函数，因为不能立即拿到结果，所以不能像简单的3+4=7一样将结果返回。</code></p><p><code>所以往往我们会传入另外一个函数，在数据请求成功时，将数据通过传入的函数回调出去。</code></p><p>如果只是一个简单的网络请求，那么这种方案不会给我们带来很大的麻烦。但是，当网络请求非常复杂时，就会出现回调地狱。</p><h3 id="网络请求的回调地狱"><a href="#网络请求的回调地狱" class="headerlink" title="网络请求的回调地狱"></a>网络请求的回调地狱</h3><p>我们来考虑下面的场景(有夸张的成分)：<br>我们需要通过一个url1从服务器加载一个数据data1，data1中包含了下一个请求的url2<br>我们需要通过data1取出url2，从服务器加载数据data2，data2中包含了下一个请求的url3<br>我们需要通过data2取出url3，从服务器加载数据data3，data3中包含了下一个请求的url4<br>发送网络请求url4，获取最终的数据data4</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180021363.png" alt="image-20201001180021363"></p><p>上面的代码有什么问题吗？</p><p>正常情况下，不会有什么问题，可以正常运行并且获取我们想要的结果。<br><code>但是，这样额代码难看而且不容易维护。我们更加期望的是一种更加优雅的方式来进行这种异步操作。</code></p><p>如何做呢？就是使用Promise。Promise可以以一种非常优雅的方式来解决这个问题。</p><h2 id="Promise的使用"><a href="#Promise的使用" class="headerlink" title="Promise的使用"></a>Promise的使用</h2><h3 id="定时器的异步事件"><a href="#定时器的异步事件" class="headerlink" title="定时器的异步事件"></a>定时器的异步事件</h3><p>我们先来看看Promise最基本的语法。这里，我们用一个定时器来模拟异步事件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180144293.png" alt="image-20201001180144293"></p><p>假设下面的data是从网络上1秒后请求的数据console.log就是我们的处理方式。</p><p>这是我们过去的处理方式，我们将它换成Promise代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180150141.png" alt="image-20201001180150141"></p><p>这个例子会让我们感觉脱裤放屁，多此一举</p><p>首先，下面的Promise代码明显比上面的代码看起来还要复杂。<br>其次，下面的Promise代码中包含的resolve、reject、then、catch都是些什么东西？</p><p>我们先不管第一个复杂度的问题，因为这样的一个屁大点的程序根本看不出来Promise真正的作用。</p><h3 id="定时器异步事件解析"><a href="#定时器异步事件解析" class="headerlink" title="定时器异步事件解析"></a>定时器异步事件解析</h3><p>我们先来认认真真的读一读这个程序到底做了什么？new Promise很明显是创建一个Promise对象</p><p>小括号中((resolve, reject) =&gt; {})也很明显就是一个函数，而且我们这里用的是之前刚刚学习过的箭头函数。<br>但是resolve, reject它们是什么呢？</p><p>我们先知道一个事实：<code>在创建Promise时，传入的这个箭头函数是固定的（一般我们都会这样写）</code></p><p>resolve和reject它们两个也是函数，通常情况下，我们会根据请求数据的成功和失败来决定调用哪一个。<br>成功还是失败？</p><p>如果是成功的，那么通常我们会调用resolve(messsage)，这个时候，我们后续的then会被回调。<br>如果是失败的，那么通常我们会调用reject(error)，这个时候，我们后续的catch会被回调。 </p><p>OK，这就是Promise最基本的使用了。</p><h3 id="Promise三种状态"><a href="#Promise三种状态" class="headerlink" title="Promise三种状态"></a>Promise三种状态</h3><p>首先, 当我们开发中有异步操作时, 就可以给异步操作包装一个Promise<br>异步操作之后会有三种状态我们一起来看一下这三种状态:</p><p>pending：等待状态，比如正在进行网络请求，或者定时器没有到时间。</p><p>fulfill：满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调.then()</p><p>reject：拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调.catch()</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180314041.png" alt="image-20201001180314041"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180320624.png" alt="image-20201001180320624"></p><h2 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h2><p>我们在看Promise的流程图时，发现无论是then还是catch都可以返回一个Promise对象。<br>所以，我们的代码其实是可以进行链式调用的：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180432443.png" alt="image-20201001180432443"></p><p>这里我们直接通过Promise包装了一下新的数据，将Promise对象返回了<br>Promise.resovle()：将数据包装成Promise对象，并且在内部回调resolve()函数<br>Promise.reject()：将数据包装成Promise对象，并且在内部回调reject()函数</p><h3 id="链式调用简写"><a href="#链式调用简写" class="headerlink" title="链式调用简写"></a>链式调用简写</h3><p>简化版代码：<br>如果我们希望数据直接包装成Promise.resolve，那么在then中可以直接返回数据<br>注意下面的代码中，我讲return Promise.resovle(data)改成了return data<br>结果依然是一样的</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001180530409.png" alt="image-20201001180530409"></p><h1 id="网络模块封装"><a href="#网络模块封装" class="headerlink" title="网络模块封装"></a>网络模块封装</h1><ul><li>常见的网络请求模块，以及优缺点对比。</li><li>JSONP的原理和封装<ul><li>JSONP原理回顾</li><li>JSONP请求封装</li></ul></li><li>axios的内容详解<ul><li>认识axios网络模块</li><li>发送基本请求</li><li>axios创建实例</li><li>axios拦截器的使用</li></ul></li></ul><h2 id="选择什么网络模块"><a href="#选择什么网络模块" class="headerlink" title="选择什么网络模块?"></a>选择什么网络模块?</h2><p>Vue中发送网络请求有非常多的方式, 那么, 在开发中, 如何选择呢?</p><p>选择一: 传统的Ajax是基于XMLHttpRequest(XHR)。为什么不用它呢?</p><p>非常好解释, 配置和调用方式等非常混乱。编码起来看起来就非常蛋疼。</p><p>所以真实开发中很少直接使用, 而是使用jQuery-Ajax</p><p>选择二: 在前面的学习中, 我们经常会使用jQuery-Ajax。相对于传统的Ajax非常好用.</p><p>为什么不选择它呢?首先, 我们先明确一点: 在Vue的整个开发中都是不需要使用jQuery了.</p><p>那么, 就意味着为了方便我们进行一个网络请求, 特意引用一个jQuery, 你觉得合理吗?<br>jQuery的代码1w+行.<br>Vue的代码才1w+行.</p><p>完全没有必要为了用网络请求就引用这个重量级的框架.</p><p>选择三: 官方在Vue1.x的时候, 推出了Vue-resource。Vue-resource的体积相对于jQuery小很多。另外Vue-resource是官方推出的.为什么不选择它呢?</p><p>在Vue2.0退出后, Vue作者就在GitHub的Issues中说明了去掉vue-resource, 并且以后也不会再更新.</p><p>那么意味着以后vue-reource不再支持新的版本时, 也不会再继续更新和维护.</p><p>对以后的项目开发和维护都存在很大的隐患.</p><p><code>选择四: 在说明不再继续更新和维护vue-resource的同时, 作者还推荐了一个框架: axios为什么用它呢?</code></p><p><code>axios有非常多的优点, 并且用起来也非常方便.</code></p><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>在前端开发中, 我们一种常见的网络请求方式就是JSONP。使用JSONP最主要的原因往往是为了解决跨域访问的问题.</p><p>JSONP的原理是什么呢?</p><p>JSONP的核心在于通过<code>&lt;script&gt;</code>标签的src来帮助我们请求数据.</p><p>原因是我们的项目部署在<code>domain1.com</code>服务器上时, 是不能直接访问<code>domain2.com</code>服务器上的资料的.</p><p>这个时候, 我们利用<code>&lt;script&gt;</code>标签的src帮助我们去服务器请求到数据, 将数据当做一个javascript的函数来执行, 并且执行</p><p>的过程中传入我们需要的json.<br>所以, 封装jsonp的核心就在于我们监听window上的jsonp进行回调时的名称.<br>JSONP如何封装呢?<br>我们一起自己来封装一个处理JSONP的代码吧.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181211558.png" alt="image-20201001181211558"></p><h3 id="JSONP封装"><a href="#JSONP封装" class="headerlink" title="JSONP封装"></a>JSONP封装</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181303298.png" alt="image-20201001181303298"></p><h2 id="为什么选择axios"><a href="#为什么选择axios" class="headerlink" title="为什么选择axios?"></a>为什么选择axios?</h2><p>作者推荐和功能特点</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181347060.png" alt="image-20201001181347060"></p><p>功能特点:</p><p>在浏览器中发送 XMLHttpRequests 请求</p><p>在 node.js 中发送 http请求</p><p>支持 Promise API</p><p>拦截请求和响应</p><p>转换请求和响应数据</p><p><code>补充: axios名称的由来? 个人理解。没有具体的翻译。axios: ajax i/o system.</code></p><h3 id="axiox请求方式"><a href="#axiox请求方式" class="headerlink" title="axiox请求方式"></a>axiox请求方式</h3><p>支持多种请求方式:</p><p>axios(config)</p><p>axios.request(config)</p><p>axios.get(url[, config])</p><p>axios.delete(url[, config])</p><p>axios.head(url[, config])</p><p>axios.post(url[, data[, config]])</p><p>axios.put(url[, data[, config]])</p><p>axios.patch(url[, data[, config]])</p><h4 id="发送get请求演示"><a href="#发送get请求演示" class="headerlink" title="发送get请求演示"></a>发送get请求演示</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181523520.png" alt="image-20201001181523520"></p><h4 id="发送并发请求"><a href="#发送并发请求" class="headerlink" title="发送并发请求"></a>发送并发请求</h4><p>有时候, 我们可能需求同时发送两个请求。使用axios.all, 可以放入多个请求的数组.</p><p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181609571.png" alt="image-20201001181609571"></p><p>在上面的示例中, 我们的BaseURL是固定的。事实上, 在开发中可能很多参数都是固定的。这个时候我们可以进行一些抽取, 也可以利用axiox的全局配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = ‘<span class="number">123.207</span><span class="number">.32</span><span class="number">.32</span>:<span class="number">8000</span>’</span><br><span class="line">axios.defaults.headers.post[‘Content-Type’] = ‘application/x-www-form-urlencoded’;</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001181716339.png" alt="image-20201001181716339"></p><h3 id="常见的配置选项"><a href="#常见的配置选项" class="headerlink" title="常见的配置选项"></a>常见的配置选项</h3><p>请求地址：url: ‘/user’    请求类型：method: ‘get’,</p><p>请根路径：baseURL: ‘<a class="link" href="http://www.mt.com/api'">http://www.mt.com/api'<i class="fas fa-external-link-alt"></i></a>    请求前的数据处理：transformRequest:[function(data){}],</p><p>请求后的数据处理：transformResponse: [function(data){}],</p><p>自定义的请求头：headers:{‘x-Requested-With’:’XMLHttpRequest’},</p><p>URL查询对象：params:{ id: 12 }    查询对象序列化函数：paramsSerializer: function(params){ }</p><p>request body：data: { key: ‘aa’},</p><p>超时设置s：timeout: 1000,</p><p>跨域是否带Token：withCredentials: false,</p><p>自定义请求处理：adapter: function(resolve, reject, config){},</p><p>身份验证信息：auth: { uname: ‘’, pwd: ‘12’},</p><p>响应的数据格式 json / blob /document /arraybuffer / text / stream：responseType: ‘json’,</p><h3 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h3><p>为什么要创建axios的实例呢?当我们从axios模块中导入对象时, 使用的实例是默认的实例.</p><p>当给该实例设置一些默认配置时, 这些配置就被固定下来了。但是后续开发中, 某些配置可能会不太一样.</p><p>比如某些请求需要使用特定的baseURL或者timeout或者content-Type等。这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182018472.png" alt="image-20201001182018472"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182031415.png" alt="image-20201001182031415"></p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。如何使用拦截器呢？</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182111819.png" alt="image-20201001182111819"></p><p>请求拦截可以做到的事情：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182137248.png" alt="image-20201001182137248"></p><p>请求拦截中错误拦截较少，通常都是配置相关的拦截。可能的错误比如请求超时，可以将页面跳转到一个错误页面中。</p><p>响应拦截中完成的事情：</p><p>响应的成功拦截中，主要是对数据进行过滤。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182210645.png" alt="image-20201001182210645"></p><p>响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182214712.png" alt="image-20201001182214712"></p><h2 id="项目开发中的网络模块使用"><a href="#项目开发中的网络模块使用" class="headerlink" title="项目开发中的网络模块使用"></a>项目开发中的网络模块使用</h2><p>目录结构</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001182916556.png" alt="image-20201001182916556"></p><p>在 request.js 中封装网络请求模块</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="comment">//import Cookie from 'js-cookie'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = {</span><br><span class="line">    code: <span class="number">0</span>,</span><br><span class="line">    msg: <span class="string">"请求异常"</span>,</span><br><span class="line">    data: {}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, data, type</span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">//自动给请求加上token和collegeId，因为mock原因暂时注释掉</span></span><br><span class="line">        <span class="comment">// try {</span></span><br><span class="line">        <span class="comment">//     // 获取登录数据</span></span><br><span class="line">        <span class="comment">//     if (Cookie.get('token') !== undefined) {</span></span><br><span class="line">        <span class="comment">//         const token = JSON.parse(Cookie.get('token'))</span></span><br><span class="line">        <span class="comment">//         console.log('token信息',token)</span></span><br><span class="line">        <span class="comment">//         if (data !== undefined &amp;&amp; data !== null ) {</span></span><br><span class="line">        <span class="comment">//             data.token = token.token</span></span><br><span class="line">        <span class="comment">//             data.collegeId = token.collegeId</span></span><br><span class="line">        <span class="comment">//         } else {</span></span><br><span class="line">        <span class="comment">//             data = {</span></span><br><span class="line">        <span class="comment">//                 token: token.token,</span></span><br><span class="line">        <span class="comment">//                 collegeId: token.collegeId</span></span><br><span class="line">        <span class="comment">//             }</span></span><br><span class="line">        <span class="comment">//         }</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// } catch (e) {</span></span><br><span class="line">        <span class="comment">//     //</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// 判断请求类型</span></span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'get'</span>) {</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> axios.get(url, {<span class="attr">params</span>: data})).data</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'post'</span>) {</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">await</span> axios.post(url, QS.stringify(data), {<span class="attr">headers</span>: {<span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>}})).data</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">catch</span> (e) {</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>api文件夹中调用 request.js 封装的 request函数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录、注册、忘记密码模块</span></span><br><span class="line"><span class="keyword">import</span> { request } <span class="keyword">from</span> <span class="string">'../util/request.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>{ <span class="comment">// 登录接口</span></span><br><span class="line">    <span class="keyword">return</span> request( <span class="string">'/api/login/collegeAdmin'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">data</span>) </span>{ <span class="comment">// 注册接口</span></span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/register'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">systemMessage</span>(<span class="params">data</span>) </span>{ <span class="comment">// 获取院管理员信息</span></span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'/api/account/msg'</span>, data, <span class="string">'get'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changePassword</span>(<span class="params">data</span>) </span>{ <span class="comment">// 获取院管理员信息</span></span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">'/api/account/password/change'</span>, data, <span class="string">'post'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在action中的调用</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">changePasswd</span>(<span class="params">{ commit },data</span>)</span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">           changePassword(data).then(<span class="function"><span class="params">res</span> =&gt;</span> {</span><br><span class="line">               <span class="keyword">if</span> (res.code === <span class="number">1</span>){</span><br><span class="line">                   resolve(res.msg)</span><br><span class="line">                   commit(<span class="string">'NULL'</span>)</span><br><span class="line">               } <span class="keyword">else</span> {</span><br><span class="line">                   reject(res.msg)</span><br><span class="line">               }</span><br><span class="line">           }).catch(<span class="function"><span class="params">error</span>=&gt;</span>{</span><br><span class="line">               reject(error)</span><br><span class="line">           })</span><br><span class="line">       })</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记07-Promise和axios&quot;&gt;&lt;a href=&quot;#vue学习笔记07-Promise和axios&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记07-Promise和axios&quot;&gt;&lt;/a&gt;vue学习笔记07-Promise</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记06-vuex</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Vuex/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Vuex/</id>
    <published>2020-05-04T22:45:01.000Z</published>
    <updated>2021-02-26T15:08:47.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记06-vuex"><a href="#vue学习笔记06-vuex" class="headerlink" title="vue学习笔记06-vuex"></a>vue学习笔记06-vuex</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/tree-736875_1280.jpg"></p><hr><h2 id="Vuex是做什么的"><a href="#Vuex是做什么的" class="headerlink" title="Vuex是做什么的?"></a>Vuex是做什么的?</h2><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。<br>它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h3 id="状态管理到底是什么？"><a href="#状态管理到底是什么？" class="headerlink" title="状态管理到底是什么？"></a>状态管理到底是什么？</h3><p>状态管理模式、集中式存储管理这些名词听起来就非常高大上，让人捉摸不透。其实，你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。<br><code>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用。</code>那么，多个组件是不是就可以共享这个对象中的所有变量属性了呢？等等，如果是这样的话，为什么官方还要专门出一个插件Vuex呢？难道我们不能自己封装一个对象来管理吗？<br><code>当然可以，只是我们要先想想VueJS带给我们最大的便利是什么呢？没错，就是响应式。</code><br>如果你自己封装实现一个对象能不能保证它里面所有的属性做到响应式呢？当然也可以，只是自己封装可能稍微麻烦一些。不用怀疑，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它就可以了。</p><h3 id="管理什么状态呢"><a href="#管理什么状态呢" class="headerlink" title="管理什么状态呢?"></a>管理什么状态呢?</h3><p>但是，有什么状态时需要我们在多个组件间共享的呢？如果你做过大型开放，你一定遇到过多个状态，在多个界面间的共</p><p>享问题。比如用户的登录状态、用户名称、头像、地理位置信息等等。比如商品的收藏、购物车中的物品等等。</p><p>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的（待会儿我们就可以看到代码了，莫着急）。</p><p>OK，从理论上理解了状态管理之后，让我们从实际的代码再来看看状态管理。</p><p><code>毕竟，Talk is cheap, Show me the code.(来自Linus)我们先来看看但界面的状态管理吧.</code></p><h3 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h3><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情。什么意思呢？我们来看下面的图片。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101301530.png" alt="image-20201001101301530"></p><p>这图片中的三种东西，怎么理解呢？<br>State：不用多说，就是我们的状态。（你姑且可以当做就是data中的属性）<br>View：视图层，可以针对State的变化，显示不同的信息。（这个好理解吧？）<br>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的改变。</p><p>写点代码，加深理解：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101328897.png" alt="image-20201001101328897"></p><p>看下右边的代码效果, 肯定会实现吧?</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101338978.png" alt="image-20201001101338978"></p><p>在这个案例中，我们有木有状态需要管理呢？没错，就是个数counter。<br><code>counter需要某种方式被记录下来，也就是我们的State。</code></p><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），<code>需要去更新状态，也就是我们的Actions</code></p><p>这不就是上面的流程图了吗？</p><h3 id="多界面状态管理"><a href="#多界面状态管理" class="headerlink" title="多界面状态管理"></a>多界面状态管理</h3><p>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？</p><p><code>多个试图都依赖同一个状态（一个状态改了，多个界面需要进行更新）不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）</code></p><p>也就是说对于某些状态(状态1/状态2/状态3)来说只属于我们某一个试图，但是也有一些状态(状态a/状态b/状态c)属于多个试图共同想要维护的<br>状态1/状态2/状态3你放在自己的房间中，你自己管理自己用，没问题。<br>但是状态a/状态b/状态c我们希望交给一个大管家来统一帮助我们管理！！！</p><p>没错，<code>Vuex就是为我们提供这个大管家的工具。</code></p><p><code>全局单例模式（大管家）</code><br>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。<br>之后，你们每个 view，按照我规定好的规定，进行访问和修改等操作。<br>这就是Vuex背后的基本思想。</p><h3 id="Vuex状态管理图例"><a href="#Vuex状态管理图例" class="headerlink" title="Vuex状态管理图例"></a>Vuex状态管理图例</h3><p>一起在来看一副官方给出的图片</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101635053.png" alt="image-20201001101635053"></p><h2 id="Vuex的基本使用"><a href="#Vuex的基本使用" class="headerlink" title="Vuex的基本使用"></a>Vuex的基本使用</h2><p>我们还是实现一下之前简单的案例</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101751123.png" alt="image-20201001101751123"></p><p>首先，我们需要在某个地方存放我们的Vuex代码：<br>这里，我们先创建一个文件夹store，并且在其中创建一个index.js文件<br>在index.js文件中写入如下代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101815560.png" alt="image-20201001101815560"></p><p>其次，我们让所有的Vue组件都可以使用这个store对象。来到main.js文件，导入store对象，并且放在new Vue中</p><p>这样，<code>在其他Vue组件中，我们就可以通过this.$store的方式，获取到这个store对象了</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001101925409.png" alt="image-20201001101925409"></p><p>好的，这就是使用Vuex最简单的方式了。我们来对使用步骤，做一个简单的小节：</p><ol><li><p>提取出一个公共的store对象，用于保存在多个组件中共享的状态</p></li><li><p>将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到</p></li><li><p>在其他组件中使用store对象中保存的状态即可。通过this.$store.state.属性的方式来访问状态</p><p>通过this.$store.commit(‘mutation中方法’)来修改状态</p><p>注意事项：<code>我们通过提交mutation的方式，而非直接改变store.state.count。</code><br>这是因为Vuex可以更明确的追踪状态的变化，<code>所以不要直接改变store.state.count的值。</code></p></li></ol><h2 id="Vuex的核心概念"><a href="#Vuex的核心概念" class="headerlink" title="Vuex的核心概念"></a>Vuex的核心概念</h2><p>Vuex有几个比较核心的概念:<br>State<br>Getters<br>Mutation<br>Action<br>Module<br>我们对它进行一一介绍.</p><h3 id="State单一状态树"><a href="#State单一状态树" class="headerlink" title="State单一状态树"></a>State单一状态树</h3><p>Vuex提出使用单一状态树, 什么是单一状态树呢？英文名称是Single Source of Truth，也可以翻译成单一数据源。</p><p>但是，它是什么呢？我们来看一个生活中的例子。OK，我用一个生活中的例子做一个简单的类比。</p><p>我们知道，在国内我们有很多的信息需要被记录，比如上学时的个人档案，工作后的社保记录，公积金记录，结婚后的婚姻信息，以及其他相关的户口、医疗、文凭、房产记录等等（还有很多信息）。</p><p>这些信息被分散在很多地方进行管理，有一天你需要办某个业务时(比如入户某个城市)，你会发现你需要到各个对应的工作地点去打印、盖章各种资料信息，最后到一个地方提交证明你的信息无误。</p><p>这种保存信息的方案，不仅仅低效，而且不方便管理，以及日后的维护也是一个庞大的工作(需要大量的各个部门的人力来维护，当然国家目前已经在完善我们的这个系统了)。<br>这个和我们在应用开发中比较类似：<br><code>如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难。所以Vuex也使用了单一状态树来管理应用层级的全部状态。</code><br>单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</p><h3 id="Getters基本使用"><a href="#Getters基本使用" class="headerlink" title="Getters基本使用"></a>Getters基本使用</h3><p>有时候，我们需要从store中获取一些state变异后的状态，比如下面的Store中：<br>获取学生年龄大于20的个数。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102316623.png" alt="image-20201001102316623"></p><p>我们可以在Store中定义getters</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102324808.png" alt="image-20201001102324808"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102330021.png" alt="image-20201001102330021"></p><p>如果我们已经有了一个获取所有年龄大于20岁学生列表的getters, 那么代码可以这样来写</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102350974.png" alt="image-20201001102350974"></p><p>getters默认是不能传递参数的, 如果希望传递参数, 那么只能让getters本身返回另一个函数.<br>比如上面的案例中,我们希望根据ID获取用户的信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102358424.png" alt="image-20201001102358424"></p><h3 id="Mutation状态更新"><a href="#Mutation状态更新" class="headerlink" title="Mutation状态更新"></a>Mutation状态更新</h3><p><code>Vuex的store状态的更新唯一方式：提交Mutation</code></p><p>Mutation主要包括两部分：</p><p>字符串的事件类型（type）。一个回调函数（handler）,该回调函数的第一个参数就是state。<br>mutation的定义方式：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102908754.png" alt="image-20201001102908754"></p><p>通过mutation更新</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001102912834.png" alt="image-20201001102912834"></p><h4 id="Mutation传递参数"><a href="#Mutation传递参数" class="headerlink" title="Mutation传递参数"></a>Mutation传递参数</h4><p>在通过mutation更新数据的时候, 有可能我们希望携带一些额外的参数。参数被称为是mutation的载荷(Payload)<br>Mutation中的代码:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103024606.png" alt="image-20201001103024606"></p><p>但是如果参数不是一个呢?比如我们有很多参数需要传递.<br>这个时候, 我们通常会以对象的形式传递, 也就是payload是一个对象。这个时候可以再从对象中取出相关的信息.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103043242.png" alt="image-20201001103043242"></p><h4 id="Mutation提交风格"><a href="#Mutation提交风格" class="headerlink" title="Mutation提交风格"></a>Mutation提交风格</h4><p>上面的通过commit进行提交是一种普通的方式<br>Vue还提供了另外一种风格, 它是一个包含type属性的对象</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103154798.png" alt="image-20201001103154798"></p><p>Mutation中的处理方式是将整个commit的对象作为payload使用, 所以代码没有改变, 依然如下:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103202938.png" alt="image-20201001103202938"></p><h4 id="Mutation响应规则"><a href="#Mutation响应规则" class="headerlink" title="Mutation响应规则"></a>Mutation响应规则</h4><p>Vuex的store中的state是响应式的, 当state中的数据发生改变时, Vue组件会自动更新。这就要求我们必须遵守一些Vuex对应的规则:</p><p>提前在store中初始化好所需的属性。当给state中的对象添加新属性时, 使用下面的方式:</p><ol><li>使用Vue.set(obj, ‘newProp’, 123)</li><li> 用新对象给旧对象重新赋值</li></ol><p>我们来看一个例子:当我们点击更新信息时, 界面并没有发生对应改变.</p><p>如何才能让它改变呢?查看下面代码的方式一和方式二。都可以让state中的属性是响应式的.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103428715.png" alt="image-20201001103428715"></p><h4 id="Mutation常量类型-–-概念"><a href="#Mutation常量类型-–-概念" class="headerlink" title="Mutation常量类型 – 概念"></a>Mutation常量类型 – 概念</h4><p>我们来考虑下面的问题：在mutation中, 我们定义了很多事件类型(也就是其中的方法名称)。</p><p>当我们的项目增大时, Vuex管理的状态越来越多, 需要更新状态的情况越来越多, 那么意味着Mutation中的方法越来越多.</p><p>方法过多, 使用者需要花费大量的经历去记住这些方法, 甚至是多个文件间来回切换, 查看方法名称, 甚至如果不是复制的时候, 可能还会出现写错的情况.<br>如何避免上述的问题呢?</p><p><code>在各种Flux实现中, 一种很常见的方案就是使用常量替代Mutation事件的类型.</code></p><p>我们可以将这些常量放在一个单独的文件中, 方便管理以及让整个app所有的事件类型一目了然.<br>具体怎么做呢?<br>我们可以创建一个文件: mutation-types.js, 并且在其中定义我们的常量.<br>定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103801680.png" alt="image-20201001103801680"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103819962.png" alt="image-20201001103819962"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103825664.png" alt="image-20201001103825664"></p><h4 id="Mutation同步函数"><a href="#Mutation同步函数" class="headerlink" title="Mutation同步函数"></a>Mutation同步函数</h4><p>通常情况下, Vuex要求我们Mutation中的方法必须是同步方法。主要的原因是当我们使用devtools时, 可以devtools可以帮助我们捕捉mutation的快照。但是如果是异步操作, 那么devtools将不能很好的追踪这个操作什么时候会被完成.<br>比如我们之前的代码, 当执行更新时, devtools中会有如下信息: 图1</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103926907.png" alt="image-20201001103926907"></p><p>但是, 如果Vuex中的代码, 我们使用了异步函数: 图2</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001103931794.png" alt="image-20201001103931794"></p><p>你会发现state中的info数据一直没有被改变, 因为他无法追踪到。<code>因此，通常情况下, 不要再mutation中进行异步的操作</code></p><h3 id="Action的基本定义"><a href="#Action的基本定义" class="headerlink" title="Action的基本定义"></a>Action的基本定义</h3><p>我们强调, 不要再Mutation中进行异步操作。但是某些情况, 我们确实希望在Vuex中进行一些异步操作, 比如网络请求, 必然是异步的. 这个时候怎么处理呢?</p><p><code>Action类似于Mutation, 但是是用来代替Mutation进行异步操作的.</code></p><p>Action的基本使用代码如下:<br>context是什么?</p><p><code>context是和store对象具有相同方法和属性的对象.</code></p><p>也就是说, 我们可以通过context去进行commit相关的操作, 也可以获取context.state等.</p><p>但是注意, 这里它们并不是同一个对象, 为什么呢? 我们后面学习Modules的时候,。</p><p>我们定义了actions, 然后又在actions中去进行commit, 这不是脱裤放屁吗?</p><p><code>事实上并不是这样, 如果在Vuex中有异步操作, 那么我们就可以在actions中完成了.</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104150464.png" alt="image-20201001104150464"></p><h4 id="Action的分发"><a href="#Action的分发" class="headerlink" title="Action的分发"></a>Action的分发</h4><p>在Vue组件中, 如果我们调用action中的方法, 那么就需要使用dispatch</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104235614.png" alt="image-20201001104235614"></p><p>同样的, 也是支持传递payload</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104241037.png" alt="image-20201001104241037"></p><h4 id="Action返回的Promise"><a href="#Action返回的Promise" class="headerlink" title="Action返回的Promise"></a>Action返回的Promise</h4><p>前面我们学习ES6语法的时候说过, Promise经常用于异步操作。在Action中, 我们可以将异步操作放在一个Promise中, 并且在成功或者失败后, 调用对应的resolve或reject.<br>OK, 我们来看下面的代码:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104354476.png" alt="image-20201001104354476"></p><h3 id="认识Module"><a href="#认识Module" class="headerlink" title="认识Module"></a>认识Module</h3><p>Module是模块的意思, 为什么在Vuex中我们要使用模块呢?<code>Vue使用单一状态树,那么也意味着很多状态都会交给Vuex来管理。当应用变得非常复杂时,store对象就有可能变得相当臃肿。</code>为了解决这个问题, Vuex允许我们将store分割成模块(Module), 而每个模块拥有自己的state、mutation、action、getters等</p><p>我们按照什么样的方式来组织模块呢? </p><p>我们来看左边的代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104611130.png" alt="image-20201001104611130"></p><h4 id="Module局部状态"><a href="#Module局部状态" class="headerlink" title="Module局部状态"></a>Module局部状态</h4><p>上面的代码中, 我们已经有了整体的组织结构, 下面我们来看看具体的局部模块中的代码如何书写.</p><p>我们在moduleA中添加state、mutations、getters</p><p>mutation和getters接收的第一个参数是局部状态对象</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104707803.png" alt="image-20201001104707803"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001104728296.png" alt="image-20201001104728296"></p><p>注意：虽然, 我们的doubleCount和increment都是定义在对象内部的。但是在调用的时候, 依然是通过this.$store来直接调用的.</p><h4 id="Actions的写法"><a href="#Actions的写法" class="headerlink" title="Actions的写法"></a>Actions的写法</h4><p>actions的写法呢? 接收一个context参数对象<br>局部状态通过 context.state 暴露出来，根节点状态则为 context.rootState</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110647431.png" alt="image-20201001110647431"></p><p>如果getters中也需要使用全局的状态, 可以接受更多的参数</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110654980.png" alt="image-20201001110654980"></p><p>项目结构</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001110737846.png" alt="image-20201001110737846"></p><h4 id="常用的模块化开发结构"><a href="#常用的模块化开发结构" class="headerlink" title="常用的模块化开发结构"></a>常用的模块化开发结构</h4><p>目录结构：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20201001105136797.png" alt="image-20201001105136797"></p><p>在 index.js中做如下定义：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store的index.js文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modulesFiles = <span class="built_in">require</span>.context(<span class="string">'./modules'</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modules = modulesFiles.keys().reduce(<span class="function">(<span class="params">modules, modulePath</span>) =&gt;</span> {</span><br><span class="line">    <span class="comment">// set './app.js' =&gt; 'app'</span></span><br><span class="line">    <span class="keyword">const</span> moduleName = modulePath.replace(<span class="regexp">/^\.\/(.*)\.\w+$/</span>, <span class="string">'$1'</span>)</span><br><span class="line">    <span class="keyword">const</span> value = modulesFiles(modulePath)</span><br><span class="line">    modules[moduleName] = value.default</span><br><span class="line">    <span class="keyword">return</span> modules</span><br><span class="line">}, {})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store({</span><br><span class="line">    modules</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在每个store文件中可以这样定义：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="function">() =&gt;</span> ({</span><br><span class="line">  .......</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = {</span><br><span class="line">    ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = { <span class="comment">// mutations改变state中的数据</span></span><br><span class="line">  ......</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = { <span class="comment">// 发送请求</span></span><br><span class="line">  ........</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">    namespaced: <span class="literal">true</span>,<span class="comment">//注意要开启这个</span></span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    getters</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这样在组件中使用的时候可以这样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  .......</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import { mapState } from 'vuex' //</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: "login",</span><br><span class="line">  methods: {</span><br><span class="line">  },</span><br><span class="line">  computed: </span><br><span class="line">    ...mapState({ // 这个是提取store中access.js的state的数据</span><br><span class="line">      'loginState': 'login'</span><br><span class="line">    })</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">   ....</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记06-vuex&quot;&gt;&lt;a href=&quot;#vue学习笔记06-vuex&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记06-vuex&quot;&gt;&lt;/a&gt;vue学习笔记06-vuex&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; </summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记05-vue-router</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/vue-router/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/vue-router/</id>
    <published>2020-05-04T21:45:01.000Z</published>
    <updated>2021-02-26T15:10:05.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记05-vue-router"><a href="#vue学习笔记05-vue-router" class="headerlink" title="vue学习笔记05-vue-router"></a>vue学习笔记05-vue-router</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/forest-166733_1280.jpg"></p><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="什么是路由？"><a href="#什么是路由？" class="headerlink" title="什么是路由？"></a>什么是路由？</h2><p>说起路由你想起了什么？路由是一个网络工程里面的术语。<br><code>路由（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动. --- 维基百科</code></p><p>在生活中, 我们有没有听说过路由的概念呢? 当然了, 路由器嘛.路由器是做什么的? 你有想过吗?路由器提供了两种机制: <code>路</code></p><p><code>由和转送</code>。<code>路由是决定数据包从来源到目的地的路径。转送将输入端的数据转移到合适的输出端.</code></p><p>路由中有一个非常重要的概念叫路由表。路由表本质上就是一个映射表, 决定了数据包的指向。</p><h2 id="后端路由阶段"><a href="#后端路由阶段" class="headerlink" title="后端路由阶段"></a>后端路由阶段</h2><p>早期的网站开发整个HTML页面是由服务器来渲染的.服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示.</p><p>但是, 一个网站, 这么多页面服务器如何处理呢?一个页面有自己对应的网址, 也就是URL.</p><p>URL会发送到服务器, <code>服务器会通过正则对该URL进行匹配,</code> 并且最后交给一个Controller进行处理.<br>Controller进行各种处理, 最终生成HTML或者数据, 返回给前端.这就完成了一个IO操作.</p><p>上面的这种操作, 就是后端路由。</p><p>当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户顿.<br>这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化.<br><code>后端路由的缺点:</code><br>一种情况是<code>整个页面的模块由后端人员来编写和维护的</code>.<br>另一种情况是前端开发人员如果要开发页面, 需要通过PHP和Java等语言来编写页面代码。而且通常情况下HTML代码和数据以及对应的逻辑会混在一起, 编写和维护都是非常糟糕的事情.</p><h2 id="前后端分离阶段"><a href="#前后端分离阶段" class="headerlink" title="前后端分离阶段"></a>前后端分离阶段</h2><p>随着Ajax的出现, 有了前后端分离的开发模式。后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中。这样做最大的优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上。<code>并且当移动端(iOS/Android)出现后, 后端不需要进行任何处理, 依然使用之前的一套API即可</code>.<br>目前很多的网站依然采用这种模式开发.</p><h2 id="单页面富应用阶段"><a href="#单页面富应用阶段" class="headerlink" title="单页面富应用阶段"></a>单页面富应用阶段</h2><p>其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由。也就是前端来维护一套路由规则.<br>前端路由的核心是什么呢？改变URL，但是页面不进行整体的刷新。如何实现呢？</p><h2 id="前端路由规则"><a href="#前端路由规则" class="headerlink" title="前端路由规则"></a>前端路由规则</h2><h3 id="URL的hash"><a href="#URL的hash" class="headerlink" title="URL的hash"></a>URL的hash</h3><p>URL的hash也就是锚点(#), 本质上是改变window.location的href属性。我们可以通过直接赋值location.hash来改变href, 但是页面不发生刷新。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220342432.png" alt="image-20200923220342432" style="zoom:80%;"><h3 id="HTML5的history模式"><a href="#HTML5的history模式" class="headerlink" title="HTML5的history模式"></a>HTML5的history模式</h3><p>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面.</p><h4 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h4><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220441761.png" alt="image-20200923220441761" style="zoom:80%;"><h4 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h4><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220523487.png" alt="image-20200923220523487" style="zoom:80%;"><h4 id="history-go"><a href="#history-go" class="headerlink" title="history.go()"></a>history.go()</h4><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923220546868.png" alt="image-20200923220546868" style="zoom:80%;"><p><code>补充说明：上面只演示了三个方法。因为 history.back() 等价于 history.go(-1)。history.forward() 则等价于 history.go(1)这三个接口等同于浏览器界面的前进后退。</code></p><h2 id="认识vue-router"><a href="#认识vue-router" class="headerlink" title="认识vue-router"></a>认识vue-router</h2><p>目前前端流行的三大框架, 都有自己的路由实现:</p><ul><li>Angular的ngRouter</li><li>React的ReactRouter</li><li>Vue的vue-router</li></ul><p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，适合用于构建单页面应用。</p><p>我们可以访问其官方网站对其进行学习: <a class="link" href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/<i class="fas fa-external-link-alt"></i></a></p><p>vue-router是基于路由和组件的。路由用于设定访问路径, 将路径和组件映射起来。在vue-router的单页面应用中, 页面的路径的改变就是组件的切换。</p><h3 id="安装和使用vue-router"><a href="#安装和使用vue-router" class="headerlink" title="安装和使用vue-router"></a>安装和使用vue-router</h3><p>因为我们已经学习了webpack, 后续开发中我们主要是通过工程化的方式进行开发的.<br>所以在后续, 我们直接使用npm来安装路由即可.</p><ol><li><p>安装vue-router<br><code>npm install vue-router --save</code></p></li><li><p>在模块化工程中使用它(因为是一个插件, 所以可以通过Vue.use()来安装路由功能)</p><ol><li><p>导入路由对象，并且调用 Vue.use(VueRouter)</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221159303.png" alt="image-20200923221159303"></p></li><li><p>创建路由实例，并且传入路由映射配置</p></li><li><p>在Vue实例中挂载创建的路由实例</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221213842.png" alt="image-20200923221213842"></p></li></ol></li><li><p>使用vue-router的步骤:</p><ol><li><p>创建路由组件</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221233833.png" alt="image-20200923221233833"></p></li><li><p>配置路由映射: 组件和路径映射关系</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221308596.png" alt="image-20200923221308596"></p></li><li><p>使用路由: 通过<router-link>和<router-view></router-view></router-link></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221318561.png" alt="image-20200923221318561"></p></li></ol></li></ol><p><code>&lt;router-link&gt;: 该标签是一个vue-router中已经内置的组件, 它会被渲染成一个&lt;a&gt;标签.</code><br><code>&lt;router-view&gt;: 该标签会根据当前的路径, 动态渲染出不同的组件.</code><br><code>网页的其他内容, 比如顶部的标题/导航, 或者底部的一些版权信息等会和&lt;router-view&gt;处于同一个等级.</code><br><code>在路由切换时, 切换的是&lt;router-view&gt;挂载的组件, 其他内容不会发生改变.</code></p><p>最终效果如下：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221359788.png" alt="image-20200923221359788"></p><h3 id="细节配置"><a href="#细节配置" class="headerlink" title="细节配置"></a>细节配置</h3><h4 id="路由的默认路径"><a href="#路由的默认路径" class="headerlink" title="路由的默认路径"></a>路由的默认路径</h4><p>我们这里还有一个不太好的实现。默认情况下, 进入网站的首页, 我们希望<router-view>渲染首页的内容.</router-view></p><p>但是我们的实现中, 默认没有显示首页组件, 必须让用户点击才可以.如何可以让路径默认跳到到首页, 并且<router-view>渲染首页组件呢?非常简单, 我们只需要配置多配置一个映射就可以了。</router-view></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221540662.png" alt="image-20200923221540662"></p><p>配置解析：<code>我们在routes中又配置了一个映射。path配置的是根路径: /</code><br><code>redirect是重定向, 也就是我们将根路径重定向到/home的路径下, 这样就可以得到我们想要的结果了.</code></p><h4 id="HTML5的History模式"><a href="#HTML5的History模式" class="headerlink" title="HTML5的History模式"></a>HTML5的History模式</h4><p>我们前面说过改变路径的方式有两种:</p><ul><li>URL的hash</li><li>HTML5的history</li></ul><p>默认情况下, 路径的改变使用的URL的hash。如果希望使用HTML5的history模式, 非常简单, 进行如下配置即可:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221701111.png" alt="image-20200923221701111"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221706520.png" alt="image-20200923221706520"></p><h4 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h4><p>在前面的<router-link>中, 我们只是使用了一个属性: to, 用于指定跳转的路径.<br><router-link>还有一些其他属性:</router-link></router-link></p><ul><li>tag: tag可以指定<router-link>之后渲染成什么组件, 比如上面的代码会被渲染成一个</router-link></li><li>元素, 而不是<a></a></li><a><li>replace: replace不会留下history记录, <code>所以指定replace的情况下, 后退键返回不能返回到上一个页面中</code></li><li>active-class: 当<router-link>对应的路由匹配成功时, 会自动给当前元素设置一个router-link-active 的 class, 设置active-class可以修改默认的名称。在进行高亮显示的导航菜单或者底部tabbar时, 会使用到该类。但是通常不会修改类的属性, 会直接使用默认的router-link-active即可. </router-link></li></a></ul><a><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923221930141.png" alt="image-20200923221930141"></p></a><h5 id="修改linkActiveClass"><a></a><a href="#修改linkActiveClass" class="headerlink" title="修改linkActiveClass"></a>修改linkActiveClass</h5><p>该class具体的名称也可以通过router实例的属性进行修改 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222013970.png" alt="image-20200923222013970"></p><h4 id="路由代码跳转"><a href="#路由代码跳转" class="headerlink" title="路由代码跳转"></a>路由代码跳转</h4><p>有时候, 页面的跳转可能需要执行对应的JavaScript代码, 这个时候, 就可以使用第二种跳转方式了<br>比如, 我们将代码修改如下: </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222228304.png" alt="image-20200923222228304"></p><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望是如下的路径：</p><p><code>/user/aaaa或/user/bbbb</code></p><p>除了有前面的/user之外，后面还跟上了用户的ID</p><p>这种path和Component的匹配关系，<code>我们称之为动态路由(也是路由传递数据的一种方式)。</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222338914.png" alt="image-20200923222338914"></p><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>官方给出了解释：<code>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。</code><br><code>如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</code><br>官方在说什么呢?<br>首先, 我们知道路由中通常会定义很多不同的页面。这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.</p><p>但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大。</p><p>如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.</p><p>如何避免这种情况呢? 使用路由懒加载就可以了.</p><p>路由懒加载做了什么?</p><p>路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块。只有在这个路由被访问到的时候, 才加载对应的组件。</p><h4 id="懒加载的实现"><a href="#懒加载的实现" class="headerlink" title="懒加载的实现"></a>懒加载的实现</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222609010.png" alt="image-20200923222609010"></p><h4 id="懒加载的方式"><a href="#懒加载的方式" class="headerlink" title="懒加载的方式"></a>懒加载的方式</h4><ol><li><p>结合Vue的异步组件和Webpack的代码分析.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">resolve</span> =&gt;</span> { <span class="built_in">require</span>.ensure([<span class="string">'../components/Home.vue'</span>], <span class="function">() =&gt;</span> { resolve(<span class="built_in">require</span>(<span class="string">'../components/Home.vue'</span>)) })};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>AMD写法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'../components/About.vue'</span>], resolve);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>在ES6中, 我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/Home.vue'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><h4 id="认识嵌套路由"><a href="#认识嵌套路由" class="headerlink" title="认识嵌套路由"></a>认识嵌套路由</h4><p>嵌套路由是一个很常见的功能。比如在home页面中, 我们希望通过/home/news和/home/message访问一些内容.</p><p>一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件。路径和组件的关系如下:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923222909623.png" alt="image-20200923222909623"></p><p>实现嵌套路由有两个步骤:</p><ol><li>创建对应的子组件, 并且在路由映射中配置对应的子路由.</li><li>在组件内部使用<router-view>标签.</router-view></li></ol><h4 id="嵌套路由的实现"><a href="#嵌套路由的实现" class="headerlink" title="嵌套路由的实现"></a>嵌套路由的实现</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223014241.png" alt="image-20200923223014241"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223026910.png" alt="image-20200923223026910"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223036217.png" alt="image-20200923223036217"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223046378.png" alt="image-20200923223046378"></p><h4 id="嵌套默认路径"><a href="#嵌套默认路径" class="headerlink" title="嵌套默认路径"></a>嵌套默认路径</h4><p>嵌套路由也可以配置默认的路径, 配置方式如下: </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223136320.png" alt="image-20200923223136320"></p><h3 id="路由传递参数"><a href="#路由传递参数" class="headerlink" title="路由传递参数"></a>路由传递参数</h3><p>为了演示传递参数, 我们这里再创建一个组件, 并且将其配置好</p><ol><li>创建新的组件Profile.vue </li><li>配置路由映射 </li><li>添加跳转的<router-link> </router-link></li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223252508.png" alt="image-20200923223252508"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223303292.png" alt="image-20200923223303292"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223310568.png" alt="image-20200923223310568"></p><h4 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h4><p>传递参数主要有两种类型: params和query</p><ul><li><p>params的类型：配置路由格式: /router/:id。</p><p>传递的方式: 在path后面跟上对应的值</p><p>传递后形成的路径: /router/123, /router/abc</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223510447.png" alt="image-20200923223510447"></p><p>获取参数通过$route对象获取的。在使用了 vue-router 的应用中，路由对象会被注入每个组件中，赋值为 this.$route ，并且当路由切换时，路由对象会被更新。通过$route获取传递的信息如下:</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223541240.png" alt="image-20200923223541240"></p></li><li><p>query的类型：配置路由格式: /router, 也就是普通配置</p><p>传递的方式: 对象中使用query的key作为传递方式</p><p>传递后形成的路径: /router?id=123, /router?id=abc</p></li></ul><p>注意：<code>$route和$router是有区别的</code></p><p>$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法</p><p>$route为当前router跳转对象里面可以获取name、path、query、params等 </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200923223639810.png" alt="image-20200923223639810"></p><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>我们来考虑一个需求: <code>在一个SPA应用中, 如何改变网页的标题呢?</code></p><p>网页标题是通过<title>来显示的, 但是SPA只有一个固定的HTML, 切换不同的页面时, 标题并不会改变.&lt;/p&gt;&lt;p&gt;但是我们可以通过JavaScript来修改&lt;title&gt;的内容.window.document.title = ‘新的标题’.&lt;/p&gt;&lt;p&gt;那么在Vue项目中, 在哪里修改? 什么时候修改比较合适呢?&lt;/p&gt;&lt;p&gt;&lt;code&gt;普通的修改方式：我们比较容易想到的修改标题的位置是每一个路由对应的组件.vue文件中.&lt;/code&gt;&lt;br&gt;&lt;code&gt;通过mounted声明周期函数, 执行对应的代码进行修改即可.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;但是当页面比较多时, 这种方式不容易维护(因为需要在多个页面执行类似的代码).&lt;br&gt;有没有更好的办法呢? 使用导航守卫即可。&lt;/p&gt;&lt;p&gt;什么是导航守卫?&lt;br&gt;vue-router 提供的导航守卫&lt;code&gt;主要用来监听监听路由的进入和离开的.&lt;/code&gt;&lt;br&gt;vue-router 提供了&lt;code&gt;beforeEach和afterEach的钩子函数, 它们会在路由即将改变前和改变后触发.&lt;/code&gt;&lt;/p&gt;&lt;h4 id="导航守卫的使用"&gt;&lt;a href="#导航守卫的使用" class="headerlink" title="导航守卫的使用"&gt;&lt;/a&gt;导航守卫的使用&lt;/h4&gt;&lt;p&gt;我们可以利用beforeEach来完成标题的修改.&lt;/p&gt;&lt;p&gt;首先, 我们可以在钩子当中定义一些标题, 可以利用meta来定义&lt;/p&gt;&lt;p&gt;其次, 利用导航守卫,修改我们的标题.&lt;/p&gt;&lt;p&gt;导航钩子的三个参数解析:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;to: 即将要进入的目标的路由对象.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;from: 当前导航即将要离开的路由对象.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;next: 调用该方法后, 才能进入下一个钩子.&lt;/p&gt;&lt;p&gt;&lt;img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.sky123.top/img/image-20200923223934004.png"                      alt="image-20200923223934004"                &gt;&lt;/p&gt;&lt;p&gt;&lt;img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.sky123.top/img/image-20200923223940612.png"                      alt="image-20200923223940612"                &gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id="导航守卫的补充"&gt;&lt;a href="#导航守卫的补充" class="headerlink" title="导航守卫的补充"&gt;&lt;/a&gt;导航守卫的补充&lt;/h4&gt;&lt;p&gt;补充一：如果是后置钩子, 也就是afterEach, 不需要主动调用next()函数.&lt;br&gt;补充二：上面我们使用的导航守卫, 被称之为全局守卫.&lt;/p&gt;&lt;p&gt;更多内容, 可以查看官网进行学习:&lt;br&gt;&lt;a class="link"   href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB" &gt;https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB&lt;i class="fas fa-external-link-alt"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;h3 id="keep-alive"&gt;&lt;a href="#keep-alive" class="headerlink" title="keep-alive"&gt;&lt;/a&gt;keep-alive&lt;/h3&gt;&lt;p&gt;keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。&lt;br&gt;它们有两个非常重要的属性:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;include - 字符串或正则表达，只有匹配的组件会被缓存&lt;/li&gt;&lt;li&gt;exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：&lt;/p&gt;&lt;p&gt;&lt;img                       lazyload                     src="/images/loading.svg"                     data-src="https://img.sky123.top/img/image-20200923224116134.png"                      alt="image-20200923224116134"                &gt;&lt;/p&gt;&lt;p&gt;通过create声明周期函数来验证&lt;/p&gt;</title></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记05-vue-router&quot;&gt;&lt;a href=&quot;#vue学习笔记05-vue-router&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记05-vue-router&quot;&gt;&lt;/a&gt;vue学习笔记05-vue-router&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记04-前端模块化和vueCli的使用</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8CVueCLI%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8CVueCLI%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-04T20:45:01.000Z</published>
    <updated>2021-02-26T15:06:13.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记04-前端模块化和vueCli的使用"><a href="#vue学习笔记04-前端模块化和vueCli的使用" class="headerlink" title="vue学习笔记04-前端模块化和vueCli的使用"></a>vue学习笔记04-前端模块化和vueCli的使用</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sunset-675847_1280.jpg"></p><hr><h1 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h1><h2 id="为什么需要模块化？"><a href="#为什么需要模块化？" class="headerlink" title="为什么需要模块化？"></a>为什么需要模块化？</h2><h3 id="js原生功能带来的各种问题"><a href="#js原生功能带来的各种问题" class="headerlink" title="js原生功能带来的各种问题"></a>js原生功能带来的各种问题</h3><p>在网页开发的早期，js制作作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的。那个时候的代码是怎么写的呢？直接将代码写在 <code>&lt;script&gt;</code> 标签中即可。随着ajax异步请求的出现，慢慢形成了前后端的分离<br>客户端需要完成的事情越来越多，代码量也是与日俱增。为了应对代码量的剧增，我们通常会将代码组织在多个js文件中，进行维护。但是这种维护方式，依然不能避免一些灾难性的问题。</p><ol><li>比如<code>全局变量同名</code>问题：看下边的例子。<code>小明后来发现代码不能正常运行，去检查自己的变量，发现确实true</code><br><code>最后杯具发生了，小明加班到2点还是没有找到问题出在哪里(所以，某些加班真的是无意义的)</code></li><li>另外，<code>这种代码的编写方式对js文件的依赖顺序几乎是强制性的</code>。但是当js文件过多，比如有几十个的时候，弄清楚它们的顺序是一件比较同时的事情。且即使你弄清楚顺序了，也不能避免上面出现的这种尴尬问题的发生。</li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808122843314.png" alt="image-20200808122843314"></p><h3 id="匿名函数的解决方案"><a href="#匿名函数的解决方案" class="headerlink" title="匿名函数的解决方案"></a>匿名函数的解决方案</h3><p>我们可以使用匿名函数来解决方面的重名问题。在aaa.js文件中，我们使用匿名函数</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123048497.png" alt="image-20200808123048497"></p><p>但是如果我们希望在main.js文件中，用到flag，应该如何处理呢？显然，另外一个文件中不容易使用，因为flag是一个局部变量。</p><h3 id="模块化的解决方案"><a href="#模块化的解决方案" class="headerlink" title="模块化的解决方案"></a>模块化的解决方案</h3><p>我们可以使用将需要暴露到外面的变量，使用一个模块作为出口，什么意思呢？来看下对应的代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123210671.png" alt="image-20200808123210671">非常简单，在匿名函数内部，定义一个对象。</p><p>给对象添加各种需要暴露到外面的属性和方法(不需要暴露的直接定义即可)。</p><blockquote><p>最后将这个对象返回，并且在外面使用了一个MoudleA接受。接下来，我们在man.js中怎么使用呢？我们只需要使用属于自己模块的属性和方法即可。<br>这就是模块最基础的封装，事实上模块的封装还有很多高级的话题：但是我们这里就是要认识一下为什么需要模块，以及模块的原始雏形。幸运的是，前端模块化开发已经有了很多既有的规范，以及对应的实现方案。</p></blockquote><p><code>常见的模块化规范：</code><br><code>CommonJS、AMD、CMD，也有ES6的Modules</code></p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p><code>模块化有两个核心：导出和导入</code><br>CommonJS的导出：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123345858.png" alt="image-20200808123345858"></p><p>CommonJS的导入</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123350759.png" alt="image-20200808123350759"></p><h2 id="ES6的Modules"><a href="#ES6的Modules" class="headerlink" title="ES6的Modules"></a>ES6的Modules</h2><h3 id="export基本使用"><a href="#export基本使用" class="headerlink" title="export基本使用"></a>export基本使用</h3><p>export指令用于导出变量，比如下面的代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123448500.png" alt="image-20200808123448500"></p><p>上面的代码还有另外一种写法：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123453884.png" alt="image-20200808123453884"></p><p>上面我们主要是输出变量，<code>也可以输出函数或者输出类</code><br>上面的代码也可以写成这种形式：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123558628.png" alt="image-20200808123558628"></p><p>某些情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且<code>让导入者可以自己来命名</code><br>这个时候就可以使用export default</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123623210.png" alt="image-20200808123623210"></p><p>我们来到main.js中，这样使用就可以了<br>这里的myFunc是我自己命名的，你可以根据需要命名它对应的名字</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123636533.png" alt="image-20200808123636533"></p><p>另外，需要注意：<code>export default在同一个模块中，不允许同时存在多个。</code></p><h3 id="import使用"><a href="#import使用" class="headerlink" title="import使用"></a>import使用</h3><p>我们使用export指令导出了模块对外提供的接口，下面我们就可以通过import命令来加载对应的这个模块了<br>首先，<code>我们需要在HTML代码中引入两个js文件，并且类型需要设置为module</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123756542.png" alt="image-20200808123756542"></p><p>import 指令用于导入模块中的内容，比如 main.js 的代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123803004.png" alt="image-20200808123803004"></p><p><code>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦：通过*可以导入模块中所有的export变量 但是通常情况下我们需要给*起一个别名，方便后续的使用</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200808123807955.png" alt="image-20200808123807955"></p><h1 id="Vue-CLI相关"><a href="#Vue-CLI相关" class="headerlink" title="Vue CLI相关"></a>Vue CLI相关</h1><p>如果你只是简单写几个Vue的Demo程序, 那么你不需要Vue CLI。</p><p>如果你在开发大型项目, 那么你需要, 并且必然需要使用Vue CLI。</p><p>使用Vue.js开发大型应用时，我们需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情。</p><p>如果每个项目都要手动完成这些工作，那无以效率比较低效，所以通常我们会使用一些脚手架工具来帮助完成这些事情。</p><p>CLI是什么意思?<br><code>CLI是Command-Line Interface,</code> 翻译为命令行界面, 但是俗称脚手架。Vue CLI是一个官方发布 vue.js 项目脚手架</p><p>使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置</p><h2 id="Vue-CLI使用前提-Node"><a href="#Vue-CLI使用前提-Node" class="headerlink" title="Vue CLI使用前提 - Node"></a>Vue CLI使用前提 - Node</h2><h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><p>可以直接在官方网站中下载安装.<br>网址: <a class="link" href="http://nodejs.cn/download/">http://nodejs.cn/download/<i class="fas fa-external-link-alt"></i></a><br>检测安装的版本</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916164951331.png" alt="image-20200916164951331"></p><p>默认情况下自动安装Node和NPM</p><p>Node环境要求8.9以上或者更高版本</p><p>什么是NPM呢?<br><code>NPM的全称是Node Package Manager。是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。后续我们会经常使用NPM来安装一些开发过程中依赖包.</code></p><h3 id="cnpm安装"><a href="#cnpm安装" class="headerlink" title="cnpm安装"></a>cnpm安装</h3><p>由于国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p><p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>这样就可以使用 cnpm 命令来安装模块了：</p><p><code>cnpm install [name]</code></p><h2 id="Vue-CLI使用前提-Webpack"><a href="#Vue-CLI使用前提-Webpack" class="headerlink" title="Vue CLI使用前提 - Webpack"></a>Vue CLI使用前提 - Webpack</h2><p>Vue.js官方脚手架工具就使用了webpack模板。对所有的资源会压缩等优化操作。它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效。Webpack的全局安装</p><p><code>npm install webpack -g</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916165156206.png" alt="image-20200916165156206"></p><h2 id="Vue-CLI的使用"><a href="#Vue-CLI的使用" class="headerlink" title="Vue CLI的使用"></a>Vue CLI的使用</h2><p>安装Vue脚手架<br><code>npm install -g @vue/cli</code></p><p>注意：上面安装的是Vue CLI3的版本，如果需要想按照Vue CLI2的方式初始化项目时不可以的。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916165258454.png" alt="image-20200916165258454"></p><p>Vue CLI2初始化项目<br><code>vue init webpack my-project</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916165316533.png" alt="image-20200916165316533"></p><p>Vue CLI3初始化项目<br><code>vue create my-project</code></p><h2 id="VueCLI4的使用和配置"><a href="#VueCLI4的使用和配置" class="headerlink" title="VueCLI4的使用和配置"></a>VueCLI4的使用和配置</h2><p>一般喜欢用 test、preview、production分别表示测试，预览，生产三种环境。修改 package.json 文件如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line"></span><br><span class="line">    <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"vue-cli-service build --mode test"</span>,           <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"preview"</span>: <span class="string">"vue-cli-service build --mode preview"</span>,     <span class="comment">//预览</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"vue-cli-service build --mode production"</span>,    <span class="comment">//生产</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"vue-cli-service lint"</span></span><br><span class="line"></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><code>在项目根目录下新建 .env.test、.env.preview、 .env.production 文件，分别对应三个环境的配置文件，注意，名字要与 --mode 后面的名字分别对应</code></p><p>.env.test 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"test"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"测试环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>.env.pre 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"preview"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"预览环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>.env.prod 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"production"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"生产环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>ok，这样环境就配置好了，分别用以下命令来打包不同环境的包就可以了</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run test    <span class="comment">//测试</span></span><br><span class="line">npm run pre     <span class="comment">//预发布</span></span><br><span class="line">npm run prod    <span class="comment">//生产</span></span><br></pre></td></tr></tbody></table></figure><p>另外需要说明一点的是，本地环境会默认从 .env.development 文件中读取配置。所以记得有需要记得新建一个然后存放配置。我的 .env.development 代码如下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NODE_ENV=<span class="string">"development"</span></span><br><span class="line">VUE_APP_BASE_URL=<span class="string">"本地环境域名"</span></span><br></pre></td></tr></tbody></table></figure><p>从 vue-cli3.0 开始 build 和 config 目录就取消了，如果需要修改配置，可以在项目的根目录新建一个 vue.config.js 文件来覆盖项目的配置，因为项目的配置比较多，这里就不分别介绍了，可以 <a class="link" href="https://cli.vuejs.org/zh/config/#vue-config-js">访问官方文档<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记04-前端模块化和vueCli的使用&quot;&gt;&lt;a href=&quot;#vue学习笔记04-前端模块化和vueCli的使用&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记04-前端模块化和vueCli的使用&quot;&gt;&lt;/a&gt;vue学习笔记04-前</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记03-webpack</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/webpack/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/webpack/</id>
    <published>2020-05-04T19:45:01.000Z</published>
    <updated>2021-02-26T15:45:06.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记03-webpack"><a href="#vue学习笔记03-webpack" class="headerlink" title="vue学习笔记03-webpack"></a>vue学习笔记03-webpack</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/sunrise-1014712_1280.jpg"></p><hr><h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>什么是webpack？这个webpack还真不是一两句话可以说清楚的。<br>我们先看看官方的解释：<br>At its core, webpack is a static module bundler for modern JavaScript applications.<br>从本质上来讲，<code>webpack是一个现代的JavaScript应用的静态模块打包工具。</code></p><p>但是它是什么呢？用概念解释概念，还是不清晰。</p><p>我们从两个点来解释上面这句话：<code>模块 和 打包</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916170737157.png" alt="image-20200916170737157"></p><h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><p>在前面学习中，我已经用了大量的篇幅解释了为什么前端需要模块化。而且我也提到了目前使用前端模块化的一些方案：AMD、CMD、CommonJS、ES6。在ES6之前，我们要想进行模块化开发，就必须借助于其他的工具，让我们可以进行模块化开发。<br><code>并且在通过模块化开发完成了项目后，还需要处理模块间的各种依赖，并且将其进行整合打包。</code><br><code>而webpack其中一个核心就是让我们可能进行模块化开发，并且会帮助我们处理模块间的依赖关系。</code></p><p>而且不仅仅是JavaScript文件，我们的CSS、图片、json文件等等在webpack中都可以被当做模块来使用（在后续我们会看到）。<br>这就是webpack中模块化的概念。</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>理解了webpack可以帮助我们进行模块化，并且处理模块间的各种复杂关系后，打包的概念就非常好理解了。<br><code>就是将webpack中的各种资源模块进行打包合并成一个或多个包(Bundle)。</code><br><code>并且在打包的过程中，还可以对资源进行处理，比如压缩图片，将scss转成css，将ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。</code><br>但是打包的操作似乎grunt/gulp也可以帮助我们完成，它们有什么不同呢？</p><h2 id="和grunt-gulp的对比"><a href="#和grunt-gulp的对比" class="headerlink" title="和grunt/gulp的对比"></a>和grunt/gulp的对比</h2><p>grunt/gulp的核心是Task。我们可以配置一系列的task，并且定义task要处理的事务（例如ES6、ts转化，图片压缩，scss转成css）<br>之后让grunt/gulp来依次执行这些task，而且让整个流程自动化。<br>所以grunt/gulp也被称为前端自动化任务管理工具。<br>我们来看一个gulp的task</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171020257.png" alt="image-20200916171020257"></p><p>下面的task就是将src下面的所有js文件转成ES5的语法。并且最终输出到dist文件夹中。<br><code>什么时候用grunt/gulp呢？</code><br><code>如果你的工程模块依赖非常简单，甚至是没有用到模块化的概念。只需要进行简单的合并、压缩，就使用grunt/gulp即可。</code></p><p>但是如果整个项目使用了模块化管理，而且相互依赖非常强，我们就可以使用更加强大的webpack了。<br>所以，grunt/gulp和webpack有什么不同呢？</p><p><code>grunt/gulp更加强调的是前端流程的自动化，模块化不是它的核心。</code><br><code>webpack更加强调模块化开发管理，而文件压缩合并、预处理等功能，是他附带的功能。</code></p><h2 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h2><p>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm<br>查看自己的node版本：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171124190.png" alt="image-20200916171124190"></p><p>全局安装webpack(这里我先指定版本号3.6.0，因为vue cli2依赖该版本)</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171142276.png" alt="image-20200916171142276"></p><p>局部安装webpack（后续才需要）</p><p>–save-dev`是开发时依赖，项目打包后不需要继续使用的。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171149910.png" alt="image-20200916171149910"></p><p>为什么全局安装后，还需要局部安装呢？<br>在终端直接执行webpack命令，使用的全局安装的webpack。当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack</p><h2 id="webpack准备工作"><a href="#webpack准备工作" class="headerlink" title="webpack准备工作"></a>webpack准备工作</h2><p>我们创建如下文件和文件夹：<br>文件和文件夹解析：<br><code>dist文件夹：</code>用于存放之后打包的文件<br><code>src文件夹：</code>用于存放我们写的源文件</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171440074.png" alt="image-20200916171440074"></p><p><code>main.js：</code>项目的入口文件。具体内容查看下面详情。<br><code>mathUtils.js：</code>定义了一些数学工具函数，可以在其他地方引用，并且使用。具体内容查看下面的详情。<br><code>index.html：</code>浏览器打开展示的首页html<br><code>package.json：</code>通过npm init生成的，npm包管理的文件（暂时没有用上，后面才会用上）<br><code>mathUtils.js</code>文件中的代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171447743.png" alt="image-20200916171447743"></p><p><code>main.js</code>文件中的代码：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171452474.png" alt="image-20200916171452474"></p><p>现在的js文件中使用了模块化的方式进行开发，他们可以直接使用吗？不可以。</p><p>因为如果直接在index.html引入这两个js文件，浏览器并不识别其中的模块化代码。</p><p>另外，在真实项目中当有许多这样的js文件时，我们一个个引用非常麻烦，并且后期非常不方便对它们进行管理。<br>我们应该怎么做呢？使用webpack工具，对多个js文件进行打包。<br>我们知道，webpack就是一个模块化的打包工具，所以它支持我们代码中写模块化，可以对模块化的代码进行处理。（如何处理的，待会儿在原理中，我会讲解）<br>另外，如果<code>在处理完所有模块之间的关系后，将多个js打包到一个js文件中，引入时就变得非常方便了</code>。<br>OK，如何打包呢？使用webpack的指令即可</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171609338.png" alt="image-20200916171609338"></p><p>打包后会在dist文件下，生成一个bundle.js文件。文件内容有些复杂，这里暂时先不看，后续再进行分析。<br>bundle.js文件，是webpack处理了项目直接文件依赖后生成的一个js文件，我们只需要将这个js文件在index.html中引入即可。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171655376.png" alt="image-20200916171655376"></p><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><p>我们考虑一下，如果每次使用webpack的命令都需要写上入口和出口作为参数，就非常麻烦，有没有一种方法可以将这两个参数写到配置中，在运行时，直接读取呢？<br>当然可以，就是<code>创建一个webpack.config.js文件</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916171752360.png" alt="image-20200916171752360"></p><p>目前，我们使用的webpack是全局的webpack，如果我们想使用局部来打包呢？因为一个项目往往依赖特定的webpack版本，全局的版本可能很这个项目的webpack版本不一致，导出打包出现问题。<br>所以通常一个项目，都有自己局部的webpack。</p><p>第一步，项目中需要安装自己局部的webpack</p><p>这里我们让局部安装webpack3.6.0</p><p><code>见webpack安装</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172013536.png" alt="image-20200916172013536"></p><p>Vue CLI3中已经升级到webpack4，但是它将配置文件隐藏了起来，所以查看起来不是很方便。</p><p>第二步，通过node_modules/.bin/webpack启动webpack打包</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172022013.png" alt="image-20200916172022013"></p><h3 id="package-json中定义启动"><a href="#package-json中定义启动" class="headerlink" title="package.json中定义启动"></a>package.json中定义启动</h3><p>但是，每次执行都敲这么一长串有没有觉得不方便呢？OK，我们可以在package.json的scripts中定义自己的执行脚本。<br>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172152264.png" alt="image-20200916172152264"></p><p>首先，会寻找本地的node_modules/.bin路径中对应的命令。<br>如果没有找到，会去全局的环境变量中寻找。<br>如何执行我们的build指令呢？</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172142724.png" alt="image-20200916172142724"></p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>loader是webpack中一个非常核心的概念。webpack用来做什么呢？<br>在我们之前的实例中，我们主要是用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。<br>但是，在开发中我们<code>不仅仅有基本的js代码处理，我们也需要加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件等等。</code></p><p>对于webpack本身的能力来说，对于这些转化是不支持的。那怎么办呢？给webpack扩展对应的loader就可以啦。<br>loader使用过程：<br><code>步骤一：通过npm安装需要使用的loader</code><br><code>步骤二：在webpack.config.js中的modules关键字下进行配置</code></p><p>大部分loader我们都可以在webpack的官网中找到，并且学习对应的用法。</p><h3 id="css-loader和style-loader"><a href="#css-loader和style-loader" class="headerlink" title="css-loader和style-loader"></a>css-loader和style-loader</h3><p>项目开发过程中，我们必然需要添加很多的样式，而样式我们往往写到一个单独的文件中。<br>在src目录中，创建一个css文件，其中创建一个normal.css文件。<br>我们也可以重新组织文件的目录结构，将零散的js文件放在一个js文件夹中。<br>normal.css中的代码非常简单，就是将body设置为red<br>但是，这个时候normal.css中的样式会生效吗？<br>当然不会，因为我们压根就没有引用它。<br>webpack也不可能找到它，因为我们只有一个入口，webpack会从入口开始查找其他依赖的文件。</p><p>在入口文件中引用：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172345560.png" alt="image-20200916172345560"></p><p>重新打包，会出现如下错误：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172415658.png" alt="image-20200916172415658"></p><p>这个错误告诉我们：加载normal.css文件必须有对应的loader。</p><p>在webpack的官方中，我们可以找到如下关于样式的loader使用方法：按照官方配置webpack.config.js文件</p><p>注意：配置中有一个style-loader，我们并不知道它是什么，所以可以暂时不进行配置。</p><p>重新打包项目：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172509773.png" alt="image-20200916172509773"></p><p>但是，运行index.html，你会发现样式并没有生效。</p><p>原因是css-loader只负责加载css文件，但是并不负责将css具体样式嵌入到文档中。这个时候，我们还需要一个style-loader帮助我们处理。</p><p>我们来安装style-loader</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172609734.png" alt="image-20200916172609734"></p><p>注意：<code>style-loader需要放在css-loader的前面。</code><br>疑惑：不对吧？按照我们的逻辑，在处理css文件过程中，应该是css-loader先加载css文件，再由style-loader来进行进一步的处理，为什么会将style-loader放在前面呢？<br><code>答案：这次因为webpack在读取使用的loader的过程中，是按照从右向左的顺序读取的。</code><br>目前，webpack.config.js的配置如下：</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172619418.png" alt="image-20200916172619418" style="zoom:80%;"><h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h3><p>如果我们希望在项目中使用less、scss、stylus来写样式，webpack是否可以帮助我们处理呢？我们这里以less为例，其他也是一样的。我们还是先创建一个less文件，依然放在css文件夹中.</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172804658.png" alt="image-20200916172804658"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172810288.png" alt="image-20200916172810288"></p><p>继续在官方中查找，我们会找到less-loader相关的使用说明<br>首先，还是需要安装对应的loader</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172847439.png" alt="image-20200916172847439"></p><p>注意：我们这里还安装了less，因为webpack会使用less对less文件进行编译</p><p>其次，修改对应的配置文件<br>添加一个rules选项，用于处理.less文件</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916172854832.png" alt="image-20200916172854832"></p><h3 id="url-loader和file-loader"><a href="#url-loader和file-loader" class="headerlink" title="url-loader和file-loader"></a>url-loader和file-loader</h3><p>首先，我们在项目中加入两张图片：<br>一张较小的图片test01.jpg(小于8kb)，一张较大的图片test02.jpeg(大于8kb)</p><p>待会儿我们会针对这两张图片进行不同的处理。我们先考虑在css样式中引用图片的情况，所以我更改了normal.css中的样式：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173038912.png" alt="image-20200916173038912"></p><p>如果我们现在直接打包，会出现如下问题：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173043885.png" alt="image-20200916173043885"></p><p>图片处理，我们使用url-loader来处理，依然先安装url-loader</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173136102.png" alt="image-20200916173136102"></p><p>修改webpack.config.js配置文件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173139980.png" alt="image-20200916173139980"></p><p>再次打包，运行index.html，就会发现我们的背景图片选出了出来。<br>而仔细观察，你会发现背景图是通过base64显示出来的<br>OK，这也是limit属性的作用，当图片小于8kb时，对图片进行base64编码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173148926.png" alt="image-20200916173148926"></p><p>那么问题来了，如果大于8kb呢？我们将background的图片改成test02.jpg<br>这次因为大于8kb的图片，会通过file-loader进行处理，但是我们的项目中并没有file-loader</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173210446.png" alt="image-20200916173210446"></p><p>所以，我们需要安装file-loader</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173215710.png" alt="image-20200916173215710"></p><p>再次打包，就会发现dist文件夹下多了一个图片文件</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173220793.png" alt="image-20200916173220793"></p><h4 id="图片文件处理-–-修改文件名称"><a href="#图片文件处理-–-修改文件名称" class="headerlink" title="图片文件处理 – 修改文件名称"></a>图片文件处理 – 修改文件名称</h4><p>我们发现webpack自动帮助我们生成一个非常长的名字。这是一个32位hash值，目的是防止名字重复<br>但是，真实开发中，我们可能对打包的图片名字有一定的要求<br>比如，将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复<br>所以，我们可以在options中添加上如下选项：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173337012.png" alt="image-20200916173337012"></p><p><code>img：文件要打包到的文件夹</code><br><code>name：获取图片原来的名字，放在该位置</code><br><code>hash:8：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</code><br><code>ext：使用图片原来的扩展名</code></p><p>但是，我们发现图片并没有显示出来，这是因为图片使用的路径不正确<br>默认情况下，webpack会将生成的路径直接返回给使用者<br>但是，我们整个程序是打包在dist文件夹下的，所以这里我们需要在路径下再添加一个dist/</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173349429.png" alt="image-20200916173349429"></p><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><h4 id="ES6语法处理"><a href="#ES6语法处理" class="headerlink" title="ES6语法处理"></a>ES6语法处理</h4><p>如果你仔细阅读webpack打包的js文件，发现写的ES6语法并没有转成ES5，那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码。<br>在前面我们说过，如果希望将ES6的语法转成ES5，那么就需要使用babel。<br>而在webpack中，我们直接使用babel对应的loader就可以了。</p><p><code>npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</code></p><p>配置webpack.config.js文件</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173541318.png" alt="image-20200916173541318"></p><p>重新打包，查看bundle.js文件，发现其中的内容变成了ES5的语法</p><h3 id="配置vue"><a href="#配置vue" class="headerlink" title="配置vue"></a>配置vue</h3><p>后续项目中，我们会使用Vuejs进行开发，而且会以特殊的文件来组织vue的组件。所以，下面我们来学习一下如何在我们的webpack环境中集成Vuejs<br>现在，我们希望在项目中使用Vuejs，那么必然需要对其有依赖，所以需要先进行安装<br>注：因为我们后续是在实际项目中也会使用vue的，所以并不是开发时依赖</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173644714.png" alt="image-20200916173644714"></p><p>那么，接下来就可以按照我们之前学习的方式来使用Vue了</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173649716.png" alt="image-20200916173649716"></p><p>修改完成后，重新打包，运行程序：<br>打包过程没有任何错误(因为只是多打包了一个vue的js文件而已)<br>但是运行程序，没有出现想要的效果，而且浏览器中有报错</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173711182.png" alt="image-20200916173711182"></p><p>这个错误说的是我们使用的是runtime-only版本的Vue，什么意思呢？<br>这里我只说解决方案<code>：Vue不同版本构建，后续我具体讲解runtime-only和runtime-compiler的区别。</code></p><p>所以我们修改webpack的配置，添加如下内容即可</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916173746318.png" alt="image-20200916173746318"></p><h2 id="el和template区别"><a href="#el和template区别" class="headerlink" title="el和template区别"></a>el和template区别</h2><p>正常运行之后，我们来考虑另外一个问题：<br><code>如果我们希望将data中的数据显示在界面中，就必须是修改index.html</code><br><code>如果我们后面自定义了组件，也必须修改index.html来使用组件</code></p><p>但是html模板在之后的开发中，我并不希望手动的来频繁修改，是否可以做到呢？<br>定义template属性：<br>在前面的Vue实例中，我们定义了el属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容<br>这里，我们可以将div元素中的内容删掉，只保留一个基本的id为div的元素<br>但是如果我依然希望在其中显示的内容，应该怎么处理呢？<br>我们可以再定义一个template属性，代码如下：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916181202401.png" alt="image-20200916181202401"></p><p>重新打包，运行程序，显示一样的结果和HTML代码结构<br>那么，el和template模板的关系是什么呢？</p><p>在我们之前的学习中，<code>我们知道el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等。</code><br><code>而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板。</code></p><p>这样做有什么好处呢？</p><p><code>这样做之后我们就不需要在以后的开发中再次操作index.html，只需要在template中写入对应的标签即可</code><br><code>但是，书写template模块非常麻烦怎么办呢？</code><br>没有关系，稍后我们会将template模板中的内容进行抽离。<br>会分成三部分书写：template、script、style，结构变得非常清晰。</p><h2 id="vue组件化开发的引入"><a href="#vue组件化开发的引入" class="headerlink" title="vue组件化开发的引入"></a>vue组件化开发的引入</h2><p>在学习组件化开发的时候，我说过以后的Vue开发过程中，我们都会采用组件化开发的思想。<br>那么，在当前项目中，如果我也想采用组件化的形式进行开发，应该怎么做呢？<br>查看下面的代码：    </p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916181334306.png" alt="image-20200916181334306"></p><p>当然，我们也可以将下面的代码抽取到一个js文件中，并且导出。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916181340309.png" alt="image-20200916181340309"></p><p>但是一个组件以一个js对象的形式进行组织和使用的时候是非常不方便的。一方面编写template模块非常的麻烦<br>另外一方面如果有样式的话，我们写在哪里比较合适呢？现在，我们以一种全新的方式来组织一个vue的组件<br>但是，这个时候这个文件可以被正确的加载吗？<br>必然不可以，<code>这种特殊的文件以及特殊的格式，必须有人帮助我们处理。</code><br><code>谁来处理呢？vue-loader以及vue-template-compiler。</code></p><p>安装vue-loader和vue-template-compiler</p><p><code>npm install vue-loader vue-template-compiler --save-dev</code></p><p>修改webpack.config.js的配置文件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916181429212.png" alt="image-20200916181429212"></p><h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><h3 id="plugin是什么？"><a href="#plugin是什么？" class="headerlink" title="plugin是什么？"></a>plugin是什么？</h3><p>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。<br>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</p><h3 id="loader和plugin区别"><a href="#loader和plugin区别" class="headerlink" title="loader和plugin区别"></a>loader和plugin区别</h3><p>loader主要用于转换某些类型的模块，它是一个转换器。<br>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</p><h3 id="plugin的使用过程："><a href="#plugin的使用过程：" class="headerlink" title="plugin的使用过程："></a>plugin的使用过程：</h3><p>步骤一：通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)<br>步骤二：在webpack.config.js中的plugins中配置插件。</p><p>下面，我们就来看看可以通过哪些插件对现有的webpack打包过程进行扩容，让我们的webpack变得更加好用。</p><h3 id="版权声明插件"><a href="#版权声明插件" class="headerlink" title="版权声明插件"></a>版权声明插件</h3><p>我们先来使用一个最简单的插件，为打包的文件添加版权声明<br>该插件名字叫BannerPlugin，属于webpack自带的插件。<br>按照下面的方式来修改webpack.config.js的文件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916181814895.png" alt="image-20200916181814895"></p><p>重新打包程序：查看bundle.js文件的头部，看到如下信息</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916181821618.png" alt="image-20200916181821618"></p><h3 id="打包html插件"><a href="#打包html插件" class="headerlink" title="打包html插件"></a>打包html插件</h3><p>目前，<code>我们的index.html文件是存放在项目的根目录下的。我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。</code></p><p>所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用<code>HtmlWebpackPlugin插件</code><br>HtmlWebpackPlugin插件可以为我们做这些事情：<br>自动生成一个index.html文件(可以指定模板来生成)<br>将打包的js文件，自动通过script标签插入到body中<br>安装HtmlWebpackPlugin插件</p><p><code>npm install html-webpack-plugin --save-dev</code></p><p>使用插件，修改webpack.config.js文件中plugins部分的内容如下：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916181959390.png" alt="image-20200916181959390"></p><p>这里的template表示根据什么模板来生成index.html<br>另外，我们需要删除之前在output中添加的publicPath属性<br>否则插入的script标签中的src可能会有问题</p><h3 id="js压缩插件"><a href="#js压缩插件" class="headerlink" title="js压缩插件"></a>js压缩插件</h3><p>在项目发布之前，我们必然需要对js等文件进行压缩处理<br>这里，我们就对打包的js文件进行压缩<br>我们使用一个第三方的插件<code>uglifyjs-webpack-plugin</code>，并且版本号指定1.1.1，和CLI2保持一致</p><p><code>npm install uglifyjs-webpack-plugin@1.1.1 --save-dev</code></p><p>修改webpack.config.js文件，使用插件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916182106424.png" alt="image-20200916182106424"></p><p>查看打包后的bunlde.js文件，是已经被压缩过了。</p><h2 id="搭建本地服务器"><a href="#搭建本地服务器" class="headerlink" title="搭建本地服务器"></a>搭建本地服务器</h2><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，<code>可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</code><br>不过它是一个单独的模块，在webpack中使用之前需要先安装它</p><p>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：<br><code>contentBase：</code>为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写./dist<br><code>port：</code>端口号<br><code>inline：</code>页面实时刷新<br><code>historyApiFallback：</code>在SPA页面中，依赖HTML5的history模式<br>webpack.config.js文件配置修改如下：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200916182215096.png" alt="image-20200916182215096"></p><p>我们可以再配置另外一个scripts：–open参数表示直接打开浏览器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记03-webpack&quot;&gt;&lt;a href=&quot;#vue学习笔记03-webpack&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记03-webpack&quot;&gt;&lt;/a&gt;vue学习笔记03-webpack&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记02-vue的插槽和组件化开发</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Vue%E6%8F%92%E6%A7%BD%E5%92%8C%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Vue%E6%8F%92%E6%A7%BD%E5%92%8C%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%8C%96/</id>
    <published>2020-05-04T18:45:01.000Z</published>
    <updated>2021-02-26T15:00:44.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记02-vue的插槽和组件化开发"><a href="#vue学习笔记02-vue的插槽和组件化开发" class="headerlink" title="vue学习笔记02-vue的插槽和组件化开发"></a>vue学习笔记02-vue的插槽和组件化开发</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/red-lighthouse-6011477_1280.jpg"></p><hr><h1 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h1><h2 id="组件概述"><a href="#组件概述" class="headerlink" title="组件概述"></a>组件概述</h2><p>人面对复杂问题的处理方式：<br>任何一个人处理信息的逻辑能力都是有限的。所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。但是，我们人有一种天生的能力，就是将问题进行拆解。如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解。<br>组件化也是类似的思想：<br>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。<br><code>但如果，我们讲一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802191140360.png" alt="image-20200802191140360"></p><h2 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a>Vue组件化思想</h2><p>组件化是Vue.js中的重要思想。它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。<br><code>任何的应用都会被抽象成一颗组件树。</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802191328402.png" alt="image-20200802191328402"></p><p>组件化思想的应用：<br>有了组件化的思想，我们在之后的开发中就要充分的利用它。尽可能的将页面拆分成一个个小的、可复用的组件。这样让我们的代码更加方便组织和管理，并且扩展性也更强。<br><code>所以，组件是Vue开发中，非常重要的一个篇章，要认真学习。</code></p><h2 id="组件的使用步骤"><a href="#组件的使用步骤" class="headerlink" title="组件的使用步骤"></a>组件的使用步骤</h2><ol><li><p>创建组件构造器</p></li><li><p>注册组件</p></li><li><p>使用组件。</p></li></ol><p>我们来看看通过代码如何注册组件</p><p>查看运行结果：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802192040617.png" alt="image-20200802192040617">和直接使用一个div看起来并没有什么区别。但是我们可以设想，如果很多地方都要显示这样的信息，我们是不是就可以直接使用<code>&lt;my-cpn&gt;&lt;/my-cpn&gt; </code>来完成呢？</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   3.使用组件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycpn</span>&gt;</span><span class="tag">&lt;/<span class="name">mycpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.创建组件构造器</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//模板就是在使用到组件的地方，要显示的HTML代码。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn= Vue.extend({</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>阿斯蒂芬<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    });</span><br><span class="line"><span class="javascript">    <span class="comment">//2.注册组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'mycpn'</span>,cpn);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//0.首先需要先挂载</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里的步骤都代表什么含义呢？</p><ol><li><p>Vue.extend()：调用Vue.extend()创建的是一个组件构造器。<br>通常在创建组件构造器时，传入template代表我们自定义组件的模板。该模板就是在使用到组件的地方，要显示的HTML代码。<code>事实上，这种写法在Vue2.x的文档中几乎已经看不到了，它会直接使用下面我们会讲到的语法糖，但是在很多资料还是会提到这种方式，而且这种方式是学习后面方式的基础</code></p></li><li><p>Vue.component()：调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。所以需要传递两个参数：<code>1、注册组件的标签名 2、组件构造器</code></p></li><li><p>组件必须挂载在某个Vue实例下，否则它不会生效。我们来看下面我使用了三次<my-cpn></my-cpn><br>而第三次其实并没有生效：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802193836934.png" alt="image-20200802193836934"></p></li></ol><h3 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h3><p>在上面注册组件的方式，可能会有些繁琐。Vue为了简化这个过程，提供了注册的语法糖。主要是省去了调用Vue.extend()的步骤，而是可以直接使用一个对象来代替。语法糖注册全局组件和局部组件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802221227261.png" alt="image-20200802221227261"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802221236027.png" alt="image-20200802221236027"></p><h2 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h2><p>当我们通过调用 Vue.component() 注册组件时，组件的注册是全局的。这意味着该组件可以在任意Vue示例下使用。<br>如果我们注册的组件是挂载在某个实例中, 那么就是一个局部组件。</p><p><code>总之，局部组件在父组件中定义，全局组件在任意位置定义。在开发中局部组件会更常用</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802220641657.png" alt="image-20200802220641657"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802220705844.png" alt="image-20200802220705844"></p><h2 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h2><p>在前面我们看到了组件树：组件和组件之间存在层级关系。<br>而其中一种非常重要的关系就是父子组件的关系。我们来看通过代码如何组成的这种层级关系：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802221031932.png" alt="image-20200802221031932"></p><p>父子组件错误用法：以子标签的形式在Vue实例中使用。因为当子组件注册到父组件的components时，Vue会编译好父组件的模块。该模板的内容已经决定了父组件将要渲染的HTML（相当于父组件中已经有了子组件中的内容了）<br><code>&lt;child-cpn&gt;&lt;/child-cpn&gt;</code>是只能在父组件中被识别的。类似这种用法，<code>&lt;child-cpn&gt;&lt;/child-cpn&gt;</code>是会被浏览器忽略的。</p><h2 id="模板的分离写法"><a href="#模板的分离写法" class="headerlink" title="模板的分离写法"></a>模板的分离写法</h2><p>刚才，我们通过语法糖简化了Vue组件的注册过程，另外还有一个地方的写法比较麻烦，就是template模块写法。<br>如果我们能将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰。<br>Vue提供了两种方案来定义HTML模块内容：</p><h3 id="使用-lt-script-gt-标签"><a href="#使用-lt-script-gt-标签" class="headerlink" title="使用< script>标签"></a>使用&lt; script&gt;标签</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802222630560.png" alt="image-20200802222630560"></p><h3 id="使用-lt-template-gt-标签"><a href="#使用-lt-template-gt-标签" class="headerlink" title="使用< template>标签"></a>使用&lt; template&gt;标签</h3><p><code>开发中更常用</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802222637474.png" alt="image-20200802222637474"></p><h2 id="组件使用的简化写法"><a href="#组件使用的简化写法" class="headerlink" title="组件使用的简化写法"></a>组件使用的简化写法</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cparent</span>&gt;</span><span class="tag">&lt;/<span class="name">cparent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cchild</span>&gt;</span><span class="tag">&lt;/<span class="name">cchild</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>子组件内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//子组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cchild=Vue.extend({</span></span><br><span class="line"><span class="javascript">        template:<span class="string">'#child'</span></span></span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//父组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cparent=Vue.extend({</span></span><br><span class="line"><span class="javascript">        template:<span class="string">'#parent'</span>,</span></span><br><span class="line">        components:{</span><br><span class="line"><span class="javascript">            cchild  <span class="comment">//注册子组件</span></span></span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//根组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span></span></span><br><span class="line">        },</span><br><span class="line">        components:{</span><br><span class="line"><span class="javascript">            cparent<span class="comment">//注册父组件</span></span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="组件数据存放"><a href="#组件数据存放" class="headerlink" title="组件数据存放"></a>组件数据存放</h2><h3 id="组件可以访问Vue实例数据吗"><a href="#组件可以访问Vue实例数据吗" class="headerlink" title="组件可以访问Vue实例数据吗?"></a>组件可以访问Vue实例数据吗?</h3><p>组件是一个单独功能模块的封装：这个模块有属于自己的HTML模板，也应该有属性自己的数据data。<br>组件中的数据是保存在哪里呢？顶层的Vue实例中吗？我们先来测试一下，组件中能不能直接访问Vue实例中的data</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802222952579.png" alt="image-20200802222952579"></p><p><code>我们发现不能访问，而且即使可以访问，如果将所有的数据都放在Vue实例中，Vue实例就会变的非常臃肿。</code><br><code>结论：Vue组件应该有自己保存数据的地方。</code></p><h3 id="组件数据的存放"><a href="#组件数据的存放" class="headerlink" title="组件数据的存放"></a>组件数据的存放</h3><p>组件自己的数据存放在哪里呢? 组件对象也有一个data属性(也可以有methods等属性，下面我们有用到)<br><code>只是这个data属性必须是一个函数 。而且这个函数返回一个对象，对象内部保存着数据</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802223120146.png" alt="image-20200802223120146"></p><h3 id="data为什么是一个函数呢"><a href="#data为什么是一个函数呢" class="headerlink" title="data为什么是一个函数呢?"></a>data为什么是一个函数呢?</h3><p>为什么data在组件中必须是一个函数呢?首先，如果不是一个函数，Vue直接就会报错。<br>其次，原因是在于Vue让每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802223409787.png" alt="image-20200802223409787"></p><h2 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h2><p>在开发中，往往一些数据确实需要从上层传递到下层：<br>比如在一个页面中，我们从服务器请求到了很多的数据。其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)。如何进行父子组件间的通信呢？Vue官方提到</p><ul><li><code>通过props向子组件传递数据</code></li><li><code>通过事件向父组件发送消息</code></li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802223556251.png" alt="image-20200802223556251"></p><h3 id="通过props父组件向子组件传递数据"><a href="#通过props父组件向子组件传递数据" class="headerlink" title="通过props父组件向子组件传递数据"></a>通过props父组件向子组件传递数据</h3><p>props基本用法<br>在组件中，使用选项props来声明需要从父级接收到的数据。<br>props的值有两种方式：</p><ol><li><p>字符串数组，数组中的字符串就是传递时的名称。</p></li><li><p>对象，对象可以设置传递时的类型，也可以设置默认值等。</p></li></ol><h4 id="props数组用法"><a href="#props数组用法" class="headerlink" title="props数组用法"></a>props数组用法</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802223714082.png" alt="image-20200802223714082"></p><h4 id="props对象用法"><a href="#props对象用法" class="headerlink" title="props对象用法"></a>props对象用法</h4><p>当需要对props进行类型等验证时，就需要对象写法了。验证都支持哪些数据类型呢？<br><code>String，Number，Boolean，Array，Object，Date，Function，Symbol</code><br>当我们有自定义构造函数时，验证也支持自定义的类型</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802223933078.png" alt="image-20200802223933078"></p><h3 id="通过事件子组件向父组件发送消息"><a href="#通过事件子组件向父组件发送消息" class="headerlink" title="通过事件子组件向父组件发送消息"></a>通过事件子组件向父组件发送消息</h3><p>当子组件需要向父组件传递数据时，就要用到自定义事件了。<br>我们之前学习的v-on不仅仅可以用于监听DOM事件，也可以用于组件间的自定义事件。<br>自定义事件的流程：<br><code>在子组件中，通过 $emit() 来触发事件。</code><br><code>在父组件中，通过 v-on 来监听子组件事件。</code><br>我们来看一个简单的例子：<br>我们之前做过一个两个按钮+1和-1，点击后修改counter。<br>我们整个操作的过程还是在子组件中完成，但是之后的展示交给父组件。<br>这样，我们就需要将子组件中的counter，传给父组件的某个属性，比如total。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200802224200523.png" alt="image-20200802224200523"></p><h3 id="父子组件通信小案例"><a href="#父子组件通信小案例" class="headerlink" title="父子组件通信小案例"></a>父子组件通信小案例</h3><ol><li>父组件 app 的存有 total，需要通过 props 传给 子组件 child</li><li>子组件点击增加减少按钮 ，通过触发函数中的<code>this.$emit('事件名')</code>触发事件，父组件通过<code>@事件名="函数名"</code>监听事件并触发函数，修改total 的值，从而改变传给 child 的值</li></ol><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cchild</span> <span class="attr">:ctotal</span>=<span class="string">"total"</span> @<span class="attr">decrement</span>=<span class="string">"decrement"</span> @<span class="attr">increment</span>=<span class="string">"increment"</span>&gt;</span><span class="tag">&lt;/<span class="name">cchild</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>数量：{{ctotal}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"cincrement"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"cdecrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cchild=Vue.extend({</span></span><br><span class="line"><span class="javascript">        template:<span class="string">'#child'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>{}</span></span><br><span class="line">        },</span><br><span class="line">        props:{</span><br><span class="line">           ctotal:{</span><br><span class="line"><span class="javascript">               <span class="keyword">default</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">               type:<span class="built_in">Number</span></span></span><br><span class="line">           }</span><br><span class="line">        },</span><br><span class="line">        methods:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">cincrement</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">'increment'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"子组件触发增加"</span>);</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">cdecrement</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">'decrement'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"子组件触发减少"</span>);</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span>,</span></span><br><span class="line">            total: 0</span><br><span class="line">        },</span><br><span class="line">        components:{</span><br><span class="line">            cchild</span><br><span class="line">        },</span><br><span class="line">        methods:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.total--;</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.total++;</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="插槽-2-5版本及之前适用"><a href="#插槽-2-5版本及之前适用" class="headerlink" title="插槽(2.5版本及之前适用)"></a>插槽(2.5版本及之前适用)</h1><h2 id="为什么使用插槽？"><a href="#为什么使用插槽？" class="headerlink" title="为什么使用插槽？"></a>为什么使用插槽？</h2><p>slot翻译为插槽：在生活中很多地方都有插槽，电脑的USB插槽，插板当中的电源插槽。<code>插槽的目的是让我们原来的设备具备更多的扩展性。</code><br>组件的插槽：<code>组件的插槽也是为了让我们封装的组件更加具有扩展性。让使用者可以决定组件内部的一些内容到底展示什么。</code><br>例如：移动网站中的导航栏。移动开发中，几乎每个页面都有导航栏。导航栏我们必然会封装成一个插件，比如nav-bar组件。一旦有了这个组件，我们就可以在多个页面中复用了。但是，每个页面的导航是一样的吗？No，我以京东M站为例。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200807224051986.png" alt="image-20200807224051986"></p><h2 id="如何去封装这类的组件呢？"><a href="#如何去封装这类的组件呢？" class="headerlink" title="如何去封装这类的组件呢？"></a>如何去封装这类的组件呢？</h2><p>它们也很多区别，但是也有很多共性。如果，我们每一个单独去封装一个组件，显然不合适：比如每个页面都返回，这部分内容我们就要重复去封装。<br>但是，如果我们封装成一个，好像也不合理：有些左侧是菜单，有些是返回，有些中间是搜索，有些是文字，等等。<br>如何封装合适呢？抽取共性，保留不同。<br><code>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。是搜索框，还是文字，还是菜单。由调用者自己来决定。</code></p><p>这就是为什么我们要学习组件中的插槽slot的原因。</p><h2 id="slot的基本使用"><a href="#slot的基本使用" class="headerlink" title="slot的基本使用"></a>slot的基本使用</h2><p>在子组件中，使用特殊的元素 <code>&lt;slot&gt;</code> 就可以为子组件开启一个插槽。该插槽插入什么内容取决于父组件如何使用。<br>我们通过一个简单的例子，来给子组件定义一个插槽：<br><code>&lt;slot&gt;</code> 中的内容表示，如果没有在该组件中插入任何其他内容，就默认显示该内容有了这个插槽后，父组件如何使用呢？</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200807224414352.png" alt="image-20200807224414352"></p><h2 id="具名插槽slot"><a href="#具名插槽slot" class="headerlink" title="具名插槽slot"></a>具名插槽slot</h2><p>当子组件的功能复杂时，子组件的插槽可能并非是一个。比如我们封装一个导航栏的子组件，可能就需要三个插槽，分别代表左边、中间、右边。那么，外面在给插槽插入内容时，如何区分插入的是哪一个呢？<br>这个时候，我们就需要给插槽起一个名字。如何使用具名插槽呢？非常简单，只要给slot元素一个name属性即可<br><code>&lt;slot name='myslot'&gt;&lt;/slot&gt;</code></p><p>我们来给出一个案例：这里我们先不对导航组件做非常复杂的封装，先了解具名插槽的用法。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200807224630406.png" alt="image-20200807224630406"></p><h2 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h2><p><code>总结一句话：在父组件中使用父组件的数据，在子组件中使用子组件的数据</code></p><p>在真正学习插槽之前，我们需要先理解一个概念：编译作用域。</p><p>官方对于编译的作用域解析比较简单，我们自己来通过一个例子来理解这个概念：<br>我们来考虑下面的代码是否最终是可以渲染出来的：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200807224729470.png" alt="image-20200807224729470"></p><p><code>&lt;my-cpn v-show="isShow"&gt;&lt;/my-cpn&gt;</code>中，我们使用了isShow属性。isShow属性包含在组件中，也包含在Vue实例中。答案：最终可以渲染出来，也就是使用的是Vue实例的属性。<br>为什么呢？<br>官方给出了一条准则：<code>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。</code><br>而我们在使用<code>&lt;my-cpn v-show="isShow"&gt;&lt;/my-cpn&gt;</code>的时候，整个组件的使用过程是相当于在父组件中出现的。<br>那么他的作用域就是父组件，使用的属性也是属于父组件的属性。因此，isShow使用的是Vue实例中的属性，而不是子组件的属性。</p><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p><code>一句话总结：父组件替换插槽的标签，但是内容由子组件来提供。</code><br>我们先提一个需求：子组件中包括一组数据，比如：pLanguages: [‘JavaScript’, ‘Python’, ‘Swift’, ‘Go’, ‘C++’]<br>需要在多个界面进行展示：<br>某些界面是以水平方向一一展示的，某些界面是以列表形式展示的，某些界面直接展示一个数组<br>内容在子组件，希望父组件告诉我们如何展示，怎么办呢？<br>利用slot作用域插槽就可以了<br>我们来看看子组件的定义：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200807225026778.png" alt="image-20200807225026778"></p><p><code>在父组件使用我们的子组件时，从子组件中拿到数据：我们通过&lt;template slot-scope="slotProps"&gt;获取到slotProps属性在通过slotProps.data就可以获取到刚才我们传入的data了</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200807225106536.png" alt="image-20200807225106536"></p><h2 id="案例总结"><a href="#案例总结" class="headerlink" title="案例总结"></a>案例总结</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cchild</span>&gt;</span><span class="tag">&lt;/<span class="name">cchild</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cchild</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>水平展示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"child"</span> <span class="attr">slot</span>=<span class="string">"data"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{child.data.join('----')}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cchild</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cchild"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>默认显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"data"</span> <span class="attr">:data</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"i in info"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>{{i}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span></span></span><br><span class="line">        },</span><br><span class="line">        components: {</span><br><span class="line">            cchild:{</span><br><span class="line"><span class="javascript">                template:<span class="string">'#cchild'</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>{</span></span><br><span class="line"><span class="javascript">                        info:[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>]</span></span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200807230101154.png" alt="image-20200807230101154" style="zoom:50%;"><h1 id="插槽-2-6版本"><a href="#插槽-2-6版本" class="headerlink" title="插槽 (2.6版本)"></a>插槽 (2.6版本)</h1><blockquote><p>该页面假设你已经阅读过了<a class="link" href="https://cn.vuejs.org/v2/guide/components.html">组件基础<i class="fas fa-external-link-alt"></i></a>。如果你还对组件不太了解，推荐你先阅读它。</p></blockquote><blockquote><p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 <code>v-slot</code> 指令)。它取代了 <code>slot</code> 和 <code>slot-scope</code> 这两个目前已被废弃但未被移除且仍在<a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95">文档中<i class="fas fa-external-link-alt"></i></a>的 attribute。新语法的由来可查阅这份 <a class="link" href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md">RFC<i class="fas fa-external-link-alt"></i></a>。</p></blockquote><h2 id="插槽内容"><a href="#插槽内容" class="headerlink" title="插槽内容"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E6%8F%92%E6%A7%BD%E5%86%85%E5%AE%B9">插槽内容<i class="fas fa-external-link-alt"></i></a></h2><p><code>总结一句话：插槽的内容可以是 字符串，一个或多个标签，一个或多个组件</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cslot</span>&gt;</span>。。。。<span class="tag">&lt;/<span class="name">cslot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cslot"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>插槽内容如下：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span></span></span><br><span class="line">        },</span><br><span class="line">        components:{</span><br><span class="line">            cslot:{</span><br><span class="line"><span class="javascript">                template:<span class="string">'#cslot'</span></span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD">具名插槽<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p>自 2.6.0 起有所更新。已废弃的使用 <code>slot</code> attribute 的语法在<a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95">这里<i class="fas fa-external-link-alt"></i></a>。</p></blockquote><p>有时我们需要多个插槽。例如对于一个带有如下模板的 <code>&lt;base-layout&gt;</code> 组件：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页头放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把主要内容放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页脚放这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>对于这样的情况，<code>&lt;slot&gt;</code> 元素有一个特殊的 attribute：<code>name</code>。这个 attribute 可以用来定义额外的插槽：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p><p>在向具名插槽提供内容的时候，我们可以在一个 <code>元素上使用</code>v-slot<code>指令，并以</code>v-slot` 的参数的形式提供其名称：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在 元素中的所有内容都将会被传入相应的插槽。任何没有被包裹在带有 <code>v-slot</code> 的 <code>&lt;template&gt;&lt;/template&gt;</code>中的内容都会被视为默认插槽的内容。</p><p>然而，如果你希望更明确一些，仍然可以在一个 <code>&lt;template&gt;&lt;/template&gt;</code> 中包裹默认插槽的内容：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>任何一种写法都会渲染出：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="作用域插槽-1"><a href="#作用域插槽-1" class="headerlink" title="作用域插槽"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD">作用域插槽<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p>自 2.6.0 起有所更新。已废弃的使用 <code>slot-scope</code> attribute 的语法在<a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95">这里<i class="fas fa-external-link-alt"></i></a>。</p></blockquote><p>有时让插槽内容能够访问子组件中才有的数据是很有用的。例如，设想一个带有如下模板的 <code>&lt;current-user&gt;</code> 组件：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>{{ user.lastName }}<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>我们可能想换掉备用内容，用名而非姓来显示。如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  {{ user.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然而上述代码不会正常工作，因为只有 <code>&lt;current-user&gt;</code> 组件可以访问到 <code>user</code> 而我们提供的内容是在父级渲染的。</p><p>为了让 <code>user</code> 在父级的插槽内容中可用，我们可以将 <code>user</code> 作为 <code>&lt;slot&gt;</code> 元素的一个 attribute 绑定上去：</p><p><code>多个用逗号隔开</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">"user,username"</span>&gt;</span></span><br><span class="line">    {{ user.lastName }}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为<strong>插槽 prop</strong>。现在在父级作用域中，我们可以使用带值的 <code>v-slot</code> 来定义我们提供的插槽 prop 的名字：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">    {{ slotProps.user.firstName }}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们选择将包含所有插槽 prop 的对象命名为 <code>slotProps</code>，但你也可以使用任意你喜欢的名字。</p><h3 id="独占默认插槽的缩写语法"><a href="#独占默认插槽的缩写语法" class="headerlink" title="独占默认插槽的缩写语法"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E7%8B%AC%E5%8D%A0%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD%E7%9A%84%E7%BC%A9%E5%86%99%E8%AF%AD%E6%B3%95">独占默认插槽的缩写语法<i class="fas fa-external-link-alt"></i></a></h3><p>在上述情况下，当被提供的内容<em>只有</em>默认插槽时，组件的标签才可以被当作插槽的模板来使用。这样我们就可以把 <code>v-slot</code> 直接用在组件上：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">  {{ slotProps.user.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这种写法还可以更简单。就像假定未指明的内容对应默认插槽一样，不带参数的 <code>v-slot</code> 被假定对应默认插槽：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">  {{ slotProps.user.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意默认插槽的缩写语法<strong>不能</strong>和具名插槽混用，因为它会导致作用域不明确：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无效，会导致警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">  {{ slotProps.user.firstName }}</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:other</span>=<span class="string">"otherSlotProps"</span>&gt;</span></span><br><span class="line">    slotProps is NOT available here</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>只要出现多个插槽，请始终为<em>所有的</em>插槽使用完整的基于 <code>&lt;template&gt; </code>的语法：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">    {{ slotProps.user.firstName }}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:other</span>=<span class="string">"otherSlotProps"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="解构插槽-Prop"><a href="#解构插槽-Prop" class="headerlink" title="解构插槽 Prop"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E8%A7%A3%E6%9E%84%E6%8F%92%E6%A7%BD-Prop">解构插槽 Prop<i class="fas fa-external-link-alt"></i></a></h3><p>作用域插槽的内部工作原理是将你的插槽内容包括在一个传入单个参数的函数里：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function (slotProps) {</span><br><span class="line">  // 插槽内容</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这意味着 <code>v-slot</code> 的值实际上可以是任何能够作为函数定义中的参数的 JavaScript 表达式。所以在支持的环境下 (<a class="link" href="https://cn.vuejs.org/v2/guide/single-file-components.html">单文件组件<i class="fas fa-external-link-alt"></i></a>或<a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9">现代浏览器<i class="fas fa-external-link-alt"></i></a>)，你也可以使用 <a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#%E8%A7%A3%E6%9E%84%E5%AF%B9%E8%B1%A1">ES2015 解构<i class="fas fa-external-link-alt"></i></a>来传入具体的插槽 prop，如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">"{ user }"</span>&gt;</span></span><br><span class="line">  {{ user.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这样可以使模板更简洁，尤其是在该插槽提供了多个 prop 的时候。它同样开启了 prop 重命名等其它可能，例如将 <code>user</code> 重命名为 <code>person</code>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">"{ user: person }"</span>&gt;</span></span><br><span class="line">  {{ person.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>你甚至可以定义后备内容，用于插槽 prop 是 undefined 的情形：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">"{ user = { firstName: 'Guest' } }"</span>&gt;</span></span><br><span class="line">  {{ user.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%8A%A8%E6%80%81%E6%8F%92%E6%A7%BD%E5%90%8D">动态插槽名<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p>2.6.0 新增</p></blockquote><p><a class="link" href="https://cn.vuejs.org/v2/guide/syntax.html#%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0">动态指令参数<i class="fas fa-external-link-alt"></i></a>也可以用在 <code>v-slot</code> 上，来定义动态的插槽名：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="具名插槽的缩写"><a href="#具名插槽的缩写" class="headerlink" title="具名插槽的缩写"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD%E7%9A%84%E7%BC%A9%E5%86%99">具名插槽的缩写<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p>2.6.0 新增</p></blockquote><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然而，和其它指令一样，该缩写只在其有参数的时候才可用。这意味着以下语法是无效的：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这样会触发一个警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> #=<span class="string">"{ user }"</span>&gt;</span></span><br><span class="line">  {{ user.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果你希望使用缩写的话，你必须始终以明确插槽名取而代之：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> #<span class="attr">default</span>=<span class="string">"{ user }"</span>&gt;</span></span><br><span class="line">  {{ user.firstName }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="其它示例"><a href="#其它示例" class="headerlink" title="其它示例"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%85%B6%E5%AE%83%E7%A4%BA%E4%BE%8B">其它示例<i class="fas fa-external-link-alt"></i></a></h2><p><strong>插槽 prop 允许我们将插槽转换为可复用的模板，这些模板可以基于输入的 prop 渲染出不同的内容。</strong>这在设计封装数据逻辑同时允许父级组件自定义部分布局的可复用组件时是最有用的。</p><p>例如，我们要实现一个 <code>&lt;todo-list&gt;</code> 组件，它是一个列表且包含布局和过滤逻辑：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &lt;li</span><br><span class="line">    v-for="todo in filteredTodos"</span><br><span class="line">    v-bind:key="todo.id"</span><br><span class="line">  &gt;</span><br><span class="line">    {{ todo.text }}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以将每个 todo 作为父级组件的插槽，以此通过父级组件对其进行控制，然后将 <code>todo</code> 作为一个插槽 prop 进行绑定：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  &lt;li</span><br><span class="line">    v-for="todo in filteredTodos"</span><br><span class="line">    v-bind:key="todo.id"</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    我们为每个 todo 准备了一个插槽，</span></span><br><span class="line"><span class="comment">    将 `todo` 对象作为一个插槽的 prop 传入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"todo"</span> <span class="attr">v-bind:todo</span>=<span class="string">"todo"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 后备内容 --&gt;</span></span><br><span class="line">      {{ todo.text }}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在当我们使用 <code>&lt;todo-list&gt;</code> 组件的时候，我们可以选择为 todo 定义一个不一样的 <code>&lt;template&gt;</code> 作为替代方案，并且可以从子组件获取数据：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">v-bind:todos</span>=<span class="string">"todos"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">"{ todo }"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"todo.isComplete"</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    {{ todo.text }}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这只是作用域插槽用武之地的冰山一角。想了解更多现实生活中的作用域插槽的用法，我们推荐浏览诸如 <a class="link" href="https://github.com/Akryum/vue-virtual-scroller">Vue Virtual Scroller<i class="fas fa-external-link-alt"></i></a>、<a class="link" href="https://github.com/posva/vue-promised">Vue Promised<i class="fas fa-external-link-alt"></i></a> 和 <a class="link" href="https://github.com/LinusBorg/portal-vue">Portal Vue<i class="fas fa-external-link-alt"></i></a> 等库。</p><h2 id="废弃了的语法"><a href="#废弃了的语法" class="headerlink" title="废弃了的语法"></a><a class="link" href="https://cn.vuejs.org/v2/guide/components-slots.html#%E5%BA%9F%E5%BC%83%E4%BA%86%E7%9A%84%E8%AF%AD%E6%B3%95">废弃了的语法<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p><code>v-slot</code> 指令自 Vue 2.6.0 起被引入，提供更好的支持 <code>slot</code> 和 <code>slot-scope</code> attribute 的 API 替代方案。<code>v-slot</code> 完整的由来参见这份 <a class="link" href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md">RFC<i class="fas fa-external-link-alt"></i></a>。在接下来所有的 2.x 版本中 <code>slot</code> 和 <code>slot-scope</code> attribute 仍会被支持，但已经被官方废弃且不会出现在 Vue 3 中。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记02-vue的插槽和组件化开发&quot;&gt;&lt;a href=&quot;#vue学习笔记02-vue的插槽和组件化开发&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记02-vue的插槽和组件化开发&quot;&gt;&lt;/a&gt;vue学习笔记02-vue的插槽和组件化</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue学习笔记01-vue的基本介绍和语法</title>
    <link href="http://blog.sky123.top/2020/05/05/vue/Vue%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://blog.sky123.top/2020/05/05/vue/Vue%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2020-05-04T17:45:01.000Z</published>
    <updated>2021-02-26T15:35:54.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习笔记01-vue的基本介绍和语法"><a href="#vue学习笔记01-vue的基本介绍和语法" class="headerlink" title="vue学习笔记01-vue的基本介绍和语法"></a>vue学习笔记01-vue的基本介绍和语法</h1><hr><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/cat-5496162_1280.jpg"></p><hr><h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><h2 id="let块级作用域"><a href="#let块级作用域" class="headerlink" title="let块级作用域"></a>let块级作用域</h2><p>不再使用 <code>var</code> 定义变量，而使用 <code>let</code>定义</p><blockquote><p>在ES5之前，由于 IF  和 FOR 是没有块级作用域的，所以在很多时候，是借助 function 的作用域来解决应用外部变量的问题，在ES6中，加入了 let  ，它在  IF  和 FOR 是有块级作用域的.</p></blockquote><ol><li><p>变量作用域：变量在什么范围内是可用的</p><ol><li><p><code>if（）{}</code>的块级是没有作用域的</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a){</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//仍然会打印</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>for（）{}</code>的块级没有作用域</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">4</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;<span class="number">5</span>&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btns=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){</span><br><span class="line">        btns[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log(i+<span class="string">"按钮"</span>);<span class="comment">//只会打印 5按钮</span></span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>function(){}</code>块级是有作用域的</p></li></ol></li><li><p>没有块级作用域会导致的问题：变量访问没有限制</p></li></ol><h2 id="const常量赋值"><a href="#const常量赋值" class="headerlink" title="const常量赋值"></a>const常量赋值</h2><ol><li>被 const 修饰的变量不能再次被赋值，称为常量，保证数据的安全性，在ES6中优先使用  const</li><li>在使用 const 时，必须进行赋值</li><li>常量的含义是指向的对象不能修改，但是<code>可以修改对象内部的属性</code>，</li></ol><h2 id="对象字面量的增强写法"><a href="#对象字面量的增强写法" class="headerlink" title="对象字面量的增强写法"></a>对象字面量的增强写法</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age=<span class="number">16</span>;</span><br><span class="line"><span class="keyword">let</span> name=<span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">const</span> obj= {</span><br><span class="line">    age , <span class="comment">//这么写相当于 age:age; 把变量名做 key ,值 做 value</span></span><br><span class="line">    name,</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    },<span class="comment">//常用这种写法</span></span><br><span class="line">    eat:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        </span><br><span class="line">    }<span class="comment">//不推荐这种写法</span></span><br><span class="line">};</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></tbody></table></figure><h1 id="认识Vue"><a href="#认识Vue" class="headerlink" title="认识Vue"></a>认识Vue</h1><p>Vue (读音 /vjuː/，类似于 view)，不要读错。</p><p><code>Vue是一个渐进式的框架，什么是渐进式的呢？</code></p><p>渐进式意味着你可以将Vue作为你应用的一部分嵌入其中，带来更丰富的交互体验。或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统。比如Core+Vue-router+Vuex，也可以满足你各种各样的需求。<br><code>Vue有很多特点和Web开发中常见的高级功能</code><br>解耦视图和数据，可复用的组件，前端路由技术，状态管理，虚拟DOM</p><p><code>Vue的前景广阔</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200717092243649.png" alt="image-20200717092243649"></p><h1 id="Vue-js安装"><a href="#Vue-js安装" class="headerlink" title="Vue.js安装"></a>Vue.js安装</h1><p>使用一个框架，我们第一步要做什么呢？安装下载它<br>安装Vue的方式有很多：</p><h3 id="方式一：直接CDN引入"><a href="#方式一：直接CDN引入" class="headerlink" title="方式一：直接CDN引入"></a>方式一：直接CDN引入</h3><p>你可以选择引入开发环境版本还是生产环境版本</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="方式二：下载和引入"><a href="#方式二：下载和引入" class="headerlink" title="方式二：下载和引入"></a>方式二：下载和引入</h3><p><strong>开发环境</strong> <a class="link" href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js<i class="fas fa-external-link-alt"></i></a><br> <strong>生产环境</strong> <a class="link" href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js<i class="fas fa-external-link-alt"></i></a></p><h3 id="方式三：NPM安装"><a href="#方式三：NPM安装" class="headerlink" title="方式三：NPM安装"></a>方式三：NPM安装</h3><p>后续通过webpack和CLI的使用，我们使用该方式。</p><h1 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h1><p>MVVM：维基百科解释：<a class="link" href="https://zh.wikipedia.org/wiki/MVVM">https://zh.wikipedia.org/wiki/MVVM<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>MVVM有助于将图形用户界面的开发与业务逻辑或后端逻辑（数据模型）的开发分离开来，这是通过置标语言或GUI代码实现的。MVVM的视图模型是一个值转换器，这意味着视图模型负责从模型中暴露（转换）数据对象，以便轻松管理和呈现对象。在这方面，视图模型比视图做得更多，并且处理大部分视图的显示逻辑。视图模型可以实现中介者模式，组织对视图所支持的用例集的后端逻辑的访问。 </p></blockquote><p>Vue中的MVVM：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200717093934052.png" alt="image-20200717093934052"></p><h3 id="View层："><a href="#View层：" class="headerlink" title="View层："></a>View层：</h3><p>视图层：在我们前端开发中，通常就是DOM层。主要的作用是给用户展示各种信息。</p><h3 id="Model层："><a href="#Model层：" class="headerlink" title="Model层："></a>Model层：</h3><p>数据层：数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。</p><h3 id="VueModel层："><a href="#VueModel层：" class="headerlink" title="VueModel层："></a>VueModel层：</h3><p>视图模型层：视图模型层是View和Model沟通的桥梁。一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中。另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</p><h4 id="案例分析："><a href="#案例分析：" class="headerlink" title="案例分析："></a>案例分析：</h4><p>View依然是我们的DOM<br>Model就是我们我们抽离出来的obj<br>ViewModel就是我们创建的Vue对象实例<br>它们之间如何工作呢？<br><code>首先ViewModel通过Data Binding让obj中的数据实时的在DOM中显示。</code><br><code>其次ViewModel通过DOM Listener来监听DOM事件，并且通过methods中的操作，来改变obj中的数据。</code><br><code>有了Vue帮助我们完成VueModel层的任务，在后续的开发，我们就可以专注于数据的处理，以及DOM的编写工作了。</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">。。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前计数：{{sum}}<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;button v-on:click="increment"&gt;+&lt;/button&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line">            sum: 0</span><br><span class="line">        },</span><br><span class="line">        methods:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sum++;</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sum--;</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">。。</span><br></pre></td></tr></tbody></table></figure><h1 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h1><p>生命周期：事物从诞生到消亡的整个过程</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200725201354383.png" alt="image-20200725201354383" style="zoom:150%;"><h1 id="Vue基础语法"><a href="#Vue基础语法" class="headerlink" title="Vue基础语法"></a>Vue基础语法</h1><h2 id="插值操作："><a href="#插值操作：" class="headerlink" title="插值操作："></a>插值操作：</h2><h3 id="Mustache语法："><a href="#Mustache语法：" class="headerlink" title="Mustache语法："></a>Mustache语法：</h3><p>不仅可以使用变量，也可以使用表达式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{firstName+" "+lastName}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-once指令："><a href="#v-once指令：" class="headerlink" title="v-once指令："></a>v-once指令：</h3><p>该指令后面不需要跟任何表达式(比如之前的v-for后面是由跟表达式的)<br>该指令表示元素和组件(组件后面才会学习)只渲染一次，不会随着数据的改变而改变。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-once</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200725204551619.png" alt="image-20200725204551619"></p><h3 id="v-html指令："><a href="#v-html指令：" class="headerlink" title="v-html指令："></a>v-html指令：</h3><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码，如果我们直接通过<code>{{}}`来输出，会将HTML代码也一起输出。但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容。如果我们希望解析出HTML展示，可以使用v-html指令。该指令后面往往会跟上一个string类型，会将string的html解析出来并且进行渲染![image-20200725205058025](https://img.sky123.top/img/image-20200725205058025.png)### v-text指令：v-text作用和Mustache比较相似：都是用于将数据显示在界面中v-text通常情况下，接受一个string类型，但是不够灵活![image-20200725205515022](https://img.sky123.top/img/image-20200725205515022.png)### v-pre指令：v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。比如下面的代码：第一个h2元素中的内容会被编译解析出来对应的内容第二个h2元素中会直接显示`{{message}}</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200725205500027.png" alt="image-20200725205500027"></p><h3 id="v-cloak指令："><a href="#v-cloak指令：" class="headerlink" title="v-cloak指令："></a>v-cloak指令：</h3><p>在某些情况下，我们浏览器可能会直接显然出未编译的Mustache标签。<br>cloak: 斗篷</p><p>在 vue 解析之前，div中有一个属性 v-cloak</p><p>在 vue 解析之后，div中没有一个属性 v-cloak</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200725205918844.png" alt="image-20200725205918844"></p><h2 id="绑定属性值："><a href="#绑定属性值：" class="headerlink" title="绑定属性值："></a>绑定属性值：</h2><p>前面我们学习的指令主要作用是将值插入到我们模板的内容当中。但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。<br>比如动态绑定a元素的href属性，比如动态绑定img元素的src属性。这个时候，我们可以使用v-bind指令：</p><h3 id="v-bind指令："><a href="#v-bind指令：" class="headerlink" title="v-bind指令："></a>v-bind指令：</h3><p>v-bind用于绑定一个或多个属性值，或者向另一个组件传递props值(这个学到组件时再介绍)<br>在开发中，有哪些属性需要动态进行绑定呢？<br>还是有很多的，比如图片的链接src、网站的链接href、动态绑定一些类、样式等等</p><blockquote><p>作用：动态绑定属性<br>缩写：:<br>预期：any (with argument) | Object (without argument)<br>参数：attrOrProp (optional)</p></blockquote><p>比如通过Vue实例中的data绑定元素的src和href，代码如下：</p><p><code>在前面加上 v-bind：表示需要动态获取</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200725211020889.png" alt="image-20200725211020889"></p><h3 id="v-bind语法糖（简写方法）："><a href="#v-bind语法糖（简写方法）：" class="headerlink" title="v-bind语法糖（简写方法）："></a>v-bind语法糖（简写方法）：</h3><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200725211238118.png" alt="image-20200725211238118" style="zoom:80%;"><h3 id="v-bind绑定class"><a href="#v-bind绑定class" class="headerlink" title="v-bind绑定class:"></a>v-bind绑定class:</h3><p>很多时候，我们希望动态的来切换class，比如：<br>当数据为某个状态时，字体显示红色。当数据另一个状态时，字体显示黑色。<br>绑定class有两种方式：对象语法，数组语法</p><h4 id="绑定方式：对象语法"><a href="#绑定方式：对象语法" class="headerlink" title="绑定方式：对象语法"></a>绑定方式：对象语法</h4><p>对象语法的含义是:class后面跟的是一个对象。<br>对象语法有下面这些用法：<br>用法一：直接通过{}绑定一个类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"{'active': isActive}"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">true</span>,<span class="comment">//根据boolen决定class属性值是否存在</span></span></span><br><span class="line"><span class="javascript">            isLine:<span class="literal">false</span></span></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>用法二：也可以通过判断，传入多个值</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"{'active': isActive, 'line': isLine}"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>用法三：和普通的类同时存在，并不冲突<br>注：如果isActive和isLine都为true，那么会有title/active/line三个类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"{'active': isActive, 'line': isLine}"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"getClass()"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span>,</span></span><br><span class="line"><span class="javascript">            imgUrl:<span class="string">'https://cn.vuejs.org/images/logo.png'</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            isLine:<span class="literal">false</span></span></span><br><span class="line">        },</span><br><span class="line">        methods:{</span><br><span class="line"><span class="javascript">            btnClick:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.isActive=!<span class="built_in">this</span>.isActive;</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            getClass:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> {<span class="string">'active'</span>: <span class="built_in">this</span>.isActive, <span class="string">'line'</span>: <span class="built_in">this</span>.isLine};</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="绑定方式：数组语法："><a href="#绑定方式：数组语法：" class="headerlink" title="绑定方式：数组语法："></a>绑定方式：数组语法：</h4><p>数组语法的含义是:class后面跟的是一个数组。<br>数组语法有下面这些用法<br>用法一：直接通过{}绑定一个类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"['active']"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>用法二：也可以传入多个值，如果去掉引号，则是变量</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> '<span class="attr">line</span>']"&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>用法三：和普通的类同时存在，并不冲突<br>注：会有title/active/line三个类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> '<span class="attr">line</span>']"&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="v-bind绑定style："><a href="#v-bind绑定style：" class="headerlink" title="v-bind绑定style："></a>v-bind绑定style：</h3><p>我们可以利用 v-bind:style 来绑定一些CSS内联样式。<br>在写CSS属性名的时候，比如 font-size<br>我们可以使用驼峰式   fontSize 或短横线分隔 (记得用单引号括起来) ‘font-size’<br>绑定class有两种方式：</p><h4 id="绑定方式一：对象语法："><a href="#绑定方式一：对象语法：" class="headerlink" title="绑定方式一：对象语法："></a>绑定方式一：对象语法：</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:style="{color: currentColor, fontSize: fontSize + 'px'}"</span><br></pre></td></tr></tbody></table></figure><p>style后面跟的是一个对象类型<br>对象的key是CSS属性名称<br>对象的value是具体赋的值，值可以来自于data中的属性</p><h4 id="绑定方式二：数组语法："><a href="#绑定方式二：数组语法：" class="headerlink" title="绑定方式二：数组语法："></a>绑定方式二：数组语法：</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>style后面跟的是一个数组类型，多个值以 ” ，“ 分割</p><h2 id="计算属性："><a href="#计算属性：" class="headerlink" title="计算属性："></a>计算属性：</h2><p>我们知道，在模板中可以直接通过插值语法显示一些data中的数据。但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示。比如我们有firstName和lastName两个变量，我们需要显示完整的名称。<br>但是如果多个地方都需要显示完整的名称，我们就需要写多个<code>{{firstName}} {{lastName}}</code>。我们可以将上面的代码换成计算属性：OK，我们发现计算属性是写在实例的computed选项中的。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200726200213755.png" alt="image-20200726200213755"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{fullMessage2() 调用方法}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>{{fullMessage  调用计算属性}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span>,</span></span><br><span class="line"><span class="javascript">            message2:<span class="string">'kobe'</span></span></span><br><span class="line">        },</span><br><span class="line">        computed:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullMessage</span>(<span class="params"></span>)</span>{<span class="comment">//按照属性来命名</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.message+<span class="built_in">this</span>.message2;</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        methods:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullMessage2</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.message+<span class="built_in">this</span>.message2;</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="计算属性的复杂操作："><a href="#计算属性的复杂操作：" class="headerlink" title="计算属性的复杂操作："></a>计算属性的复杂操作：</h3><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200726201218057.png" alt="image-20200726201218057" style="zoom: 80%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{fullPrice}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span>,</span></span><br><span class="line">            books:[</span><br><span class="line">                {money: 100,count: 20},</span><br><span class="line">                {money: 200,count: 30}</span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        computed:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullPrice</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> result=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//一般方法</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// for(let i=0;i&lt;this.books.length;i++){</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     result+=this.books[i].money*this.books[i].count;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// }</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//es6语法</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> book <span class="keyword">of</span> <span class="built_in">this</span>.books){</span></span><br><span class="line">                    result+=book.money*book.count;</span><br><span class="line">                }</span><br><span class="line">                </span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> result;</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="计算属性的setter和getter："><a href="#计算属性的setter和getter：" class="headerlink" title="计算属性的setter和getter："></a>计算属性的setter和getter：</h3><p>每个计算属性都包含一个getter和一个setter，在上面的例子中，我们只是使用getter来读取。<br>在某些情况下，你也可以提供一个setter方法（不常用）。在需要写setter的时候，代码如下：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200726203043060.png" alt="image-20200726203043060"></p><h3 id="计算属性的缓存："><a href="#计算属性的缓存：" class="headerlink" title="计算属性的缓存："></a>计算属性的缓存：</h3><p>我们可能会考虑这样的一个问题：<br>methods和computed看起来都可以实现我们的功能，<br>那么为什么还要多一个计算属性这个东西呢？<br>原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。<br>我们来看下面的代码：</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200726203607405.png" alt="image-20200726203607405" style="zoom: 200%;"><h2 id="事件监听："><a href="#事件监听：" class="headerlink" title="事件监听："></a>事件监听：</h2><p>在前端开发中，我们需要经常和用于交互。<br>这个时候，我们就必须监听用户发生的时间，比如点击、拖拽、键盘事件等等<br>在Vue中如何监听事件呢？使用v-on指令</p><blockquote><p>v-on介绍<br>作用：绑定事件监听器<br>缩写：@<br>预期：Function | Inline Statement | Object<br>参数：event</p></blockquote><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731115414373.png"></p><h3 id="v-on参数"><a href="#v-on参数" class="headerlink" title="v-on参数"></a>v-on参数</h3><p>当通过 methods 中定义方法，以供@click调用时，需要注意参数问题：</p><ol><li><p>如果该方法不需要额外参数，那么方法后的()可以不添加。<br><code>但是注意：如果方法本身中有一个参数且方法后的()不添加。，那么会默认将原生事件event参数传递进第一个方法形参</code></p></li><li><p>如果需要同时传入某个参数，同时需要event时，可以通过 <code>$event</code>传入事件</p></li></ol><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731120258562.png" alt="image-20200731120258562"></p><h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h3><p>在某些情况下，我们拿到event的目的可能是进行一些事件处理。Vue提供了修饰符来帮助我们方便的处理一些事件：</p><ul><li>.stop - 调用 event.stopPropagation()。阻止事件冒泡</li><li>.prevent - 调用 event.preventDefault()。阻止表单自动提交</li><li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调（即调用监听函数）。</li><li>.native - 监听组件根元素的原生事件。组件时使用</li><li>.once - 只触发一次回调。</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731120639118.png" alt="image-20200731120639118"></p><h2 id="条件判断："><a href="#条件判断：" class="headerlink" title="条件判断："></a>条件判断：</h2><h3 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h3><p><code>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</code><br>简单的案例演示：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731165442411.png" alt="image-20200731165442411"></p><p>v-if的原理：<br>v-if后面的条件为false时，对应的元素以及其子元素不会渲染。<br>也就是根本没有不会有对应的标签出现在DOM中。</p><h3 id="条件渲染案例"><a href="#条件渲染案例" class="headerlink" title="条件渲染案例"></a>条件渲染案例</h3><p>我们来做一个简单的小案例：<br>用户再登录时，可以切换使用用户账号登录还是邮箱地址登录。<br>类似如下情景：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731165615614.png" alt="image-20200731165615614"></p><p><code>小问题：</code><br>如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前的输入的内容。但是按道理讲，我们应该切换到另外一个input元素中了。在另一个input元素中，我们并没有输入内容。<br>为什么会出现这个问题呢？<br><code>问题解答：</code><br>这是因为Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。在上面的案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了。<br><code>解决方案：</code><br>如果我们不希望Vue出现类似重复利用的问题，可以给对应的input添加key。并且我们需要保证key的不同。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731165907400.png" alt="image-20200731165907400"></p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>v-show的用法和v-if非常相似，也用于决定一个元素是否渲染：<br>v-if和v-show对比<br>v-if和v-show都可以决定一个元素是否渲染，那么开发中我们如何选择呢？v-if当条件为false时，压根不会有对应的元素在DOM中。v-show当条件为false时，仅仅是将元素的display属性设置为none而已。<br>开发中如何选择呢？<br>当需要在显示与隐藏之间切片很频繁时，使用v-show。当只有一次切换时，通过使用v-if。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731170017796.png" alt="image-20200731170017796"></p><h2 id="循环遍历："><a href="#循环遍历：" class="headerlink" title="循环遍历："></a>循环遍历：</h2><p>当我们有一组数据需要进行渲染时，我们就可以使用v-for来完成。v-for的语法类似于JavaScript中的for循环。<br>格式如下：<code>item in items</code></p><p>我们来看一个简单的案例：<br>如果在遍历的过程中不需要使用索引值<br><code>v-for="movie in movies"</code><br>依次从movies中取出movie，并且在元素的内容中，我们可以使用Mustache语法，来使用movie<br>如果在遍历的过程中，我们需要拿到元素在数组中的索引值呢？<br>语法格式：<code>v-for=(item, index) in items</code></p><p>其中的index就代表了取出的item在原数组的索引值。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731170221651.png" alt="image-20200731170221651"></p><h3 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h3><p>v-for可以用于遍历对象：比如某个对象中存储着你的个人信息，我们希望以列表的形式显示出来。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731170402540.png" alt="image-20200731170402540"></p><h3 id="组件的key属性"><a href="#组件的key属性" class="headerlink" title="组件的key属性"></a>组件的key属性</h3><p>官方推荐我们在使用v-for时，给对应的元素或组件添加上一个:key属性。<br>为什么需要这个key属性呢（了解）？<br>这个其实和Vue的虚拟DOM的Diff算法有关系。这里我们借用React’s diff algorithm中的一张图来简单说明一下：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731170637408.png" alt="image-20200731170637408"></p><p>当某一层有很多相同的节点时，也就是列表节点时，我们希望插入一个新的节点。我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的。即把C更新成F，D更新成C，E更新成D，最后再插入E，是不是很没有效率？<br>所以我们需要使用key来给每个节点做一个唯一标识。Diff算法就可以正确的识别此节点<br>找到正确的位置区插入新的节点。<br><code>所以一句话，key的作用主要是为了高效的更新虚拟DOM。</code></p><h3 id="检测数组更新"><a href="#检测数组更新" class="headerlink" title="检测数组更新"></a>检测数组更新</h3><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新。<br><code>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</code><br>push()     pop()  shift()   unshift()   splice()  sort()   reverse()</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200731170738671.png" alt="image-20200731170738671"></p><h2 id="v-model："><a href="#v-model：" class="headerlink" title="v-model："></a>v-model：</h2><p>Vue中使用v-model指令来实现表单元素和数据的双向绑定。（界面操作和数据改变，都会引起界面改变）</p><p>v-model其实是一个语法糖，它的背后本质上是包含两个操作：</p><ol><li>v-bind绑定一个value属性</li><li>v-on指令给当前元素绑定input事件。也就是说下面的代码：等同于下面的代码：</li><li><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801210058016.png" alt="image-20200801210058016" style="zoom:80%;"></li></ol><p><code>&lt;input type="text" v-model="message"&gt;</code></p><p>等同于<br><code>&lt;input type="text" v-bind:value="message" v-on:input="message = $event.target.value"&gt;</code></p><h3 id="text和textarea"><a href="#text和textarea" class="headerlink" title="text和textarea"></a>text和textarea</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801205920127.png" alt="image-20200801205920127"></p><h3 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h3><p>当 v-model 绑定单选按钮时 ，可以给  gender 默认值，这样会默认选中某个单选按钮，可以不用加  name 属性，也能实现单选，只要它绑定的是相同的变量值。</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801210143486.png" alt="image-20200801210143486" style="zoom:80%;"><h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><p>复选框分为两种情况：单个勾选框和多个勾选框<br><code>单个勾选框：v-model即为布尔值。此时input的value并不影响v-model的值。</code><br>多个复选框：<br>当是多个复选框时，因为可以选中多个，所以对应的data中属性是一个数组。<br>当选中某一个时，就会将input的value添加到数组中。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801210633540.png" alt="image-20200801210633540"></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>和checkbox一样，select也分单选和多选两种情况。</p><p><code>单选：只能选中一个值。v-model绑定的是一个值。</code></p><p>当我们选中option中的一个时，会将它对应的value赋值到mySelect中</p><p><code>多选：可以选中多个值。v-model绑定的是一个数组。</code></p><p>当选中多个值时，就会将选中的option对应的value添加到数组mySelects中</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801210812558.png" alt="image-20200801210812558"></p><h3 id="lazy修饰符："><a href="#lazy修饰符：" class="headerlink" title="lazy修饰符："></a>lazy修饰符：</h3><p>默认情况下，v-model默认是在input事件中同步输入框的数据的。也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变。lazy修饰符可以让数据在失去焦点或者回车时才会更新：</p><h3 id="number修饰符："><a href="#number修饰符：" class="headerlink" title="number修饰符："></a>number修饰符：</h3><p>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。number修饰符可以让在输入框中输入的内容自动转成数字类型：</p><h3 id="trim修饰符："><a href="#trim修饰符：" class="headerlink" title="trim修饰符："></a>trim修饰符：</h3><p>如果输入的内容首尾有很多空格，通常我们希望将其去除。trim修饰符可以过滤内容左右两边的空格</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801210925199.png" alt="image-20200801210925199"></p><h2 id="数组的高阶函数："><a href="#数组的高阶函数：" class="headerlink" title="数组的高阶函数："></a>数组的高阶函数：</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//高阶函数，函数的参数还是一个函数</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//数组过滤器，遍历数组的每一个元素时调用参数的函数，</span></span><br><span class="line"> <span class="comment">//filter 参数的函数（回调函数），返回一个boolean ，true保留元素，false过滤元素</span></span><br><span class="line"><span class="keyword">let</span> newNums= nums.filter(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>{</span><br><span class="line">   <span class="keyword">return</span> n &gt; <span class="number">3</span>;</span><br><span class="line"> });</span><br><span class="line"> <span class="built_in">console</span>.log(newNums);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//数组遍历器，遍历数组的每一个元素时调用参数的函数，</span></span><br><span class="line"> <span class="comment">//map 参数的函数（回调函数），返回的值作为新数组的新元素 </span></span><br><span class="line"><span class="keyword">let</span> news2Nums= newNums.map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>{</span><br><span class="line">     <span class="keyword">return</span> n*<span class="number">2</span>;</span><br><span class="line"> });</span><br><span class="line"><span class="built_in">console</span>.log(news2Nums);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//数组汇总器，对数组中的内容进行汇总</span></span><br><span class="line"> <span class="comment">//pre参数，第一次初始化为 0,第二次，的值是回调函数的返回值</span></span><br><span class="line"><span class="keyword">let</span> sum=news2Nums.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre,curr</span>) </span>{</span><br><span class="line">     <span class="keyword">return</span> pre+curr;</span><br><span class="line">},<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数式编程</span></span><br><span class="line"><span class="keyword">let</span> result=nums.filter(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">3</span>;</span><br><span class="line">   }).map(<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*n;</span><br><span class="line">   }).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre,n</span>) </span>{</span><br><span class="line">       <span class="keyword">return</span> pre+n;</span><br><span class="line">   },<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(result);</span><br></pre></td></tr></tbody></table></figure><h1 id="两个案例："><a href="#两个案例：" class="headerlink" title="两个案例："></a>两个案例：</h1><h2 id="1-列表项的选中并改变颜色"><a href="#1-列表项的选中并改变颜色" class="headerlink" title="1.列表项的选中并改变颜色"></a>1.列表项的选中并改变颜色</h2><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801190628117.png" alt="image-20200801190628117" style="zoom:80%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .active{</span><br><span class="line"><span class="css">            <span class="attribute">color</span>:red;</span></span><br><span class="line">        }</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{message}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"(movie,index) in movies"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"{active:true}"</span> <span class="attr">v-if</span>=<span class="string">"index==colorIndex"</span> @<span class="attr">click</span>=<span class="string">"change(index)"</span>&gt;</span>{{movie}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">"{active:false}"</span> <span class="attr">v-else</span> @<span class="attr">click</span>=<span class="string">"change(index)"</span>&gt;</span>{{movie}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            message: <span class="string">'Hello Vue!'</span>,</span></span><br><span class="line"><span class="javascript">            movies:[<span class="string">'肖申克的救赎'</span>,<span class="string">'海贼王'</span>,<span class="string">'无名之辈'</span>,<span class="string">'后来'</span>,<span class="string">'归来'</span>,<span class="string">'无言以对'</span>],</span></span><br><span class="line">            colorIndex:0</span><br><span class="line">        },</span><br><span class="line">        methods:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">change</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.colorIndex = index;</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    })</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-购物车案例"><a href="#2-购物车案例" class="headerlink" title="2.购物车案例"></a>2.购物车案例</h2><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/image-20200801191453741.png" alt="image-20200801191453741"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>购物车案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/shopping.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>  <span class="attr">v-for</span>=<span class="string">"(s,index) in books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{index+1}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{s.name}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{s.date}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>${{s.price.toFixed(2)}}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement(index)"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>{{s.num}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment(index)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"deleteItem(index)"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    总价：{{sum}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app=<span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#data'</span>,<span class="comment">//用于挂载要管理的元素</span></span></span><br><span class="line"><span class="javascript">        data: {<span class="comment">//定义一些数据</span></span></span><br><span class="line"><span class="javascript">            books:[{<span class="attr">name</span>:<span class="string">'&lt;&lt;算法导论&gt;&gt;'</span>,<span class="attr">date</span>:<span class="string">'2006-09'</span>,<span class="attr">price</span>:<span class="number">29.00</span>,<span class="attr">num</span>:<span class="number">1</span>},</span></span><br><span class="line"><span class="javascript">                {<span class="attr">name</span>:<span class="string">'&lt;&lt;算法导论&gt;&gt;'</span>,<span class="attr">date</span>:<span class="string">'2006-09'</span>,<span class="attr">price</span>:<span class="number">29.00</span>,<span class="attr">num</span>:<span class="number">1</span>},</span></span><br><span class="line"><span class="javascript">                {<span class="attr">name</span>:<span class="string">'&lt;&lt;算法导论&gt;&gt;'</span>,<span class="attr">date</span>:<span class="string">'2006-09'</span>,<span class="attr">price</span>:<span class="number">29.00</span>,<span class="attr">num</span>:<span class="number">1</span>}</span></span><br><span class="line">            ]</span><br><span class="line">        },</span><br><span class="line">        computed:{</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> result=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">for</span>(<span class="keyword">let</span> book <span class="keyword">of</span> <span class="built_in">this</span>.books){</span></span><br><span class="line">                  result+=book.price*book.num;</span><br><span class="line">              }</span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> result.toFixed(<span class="number">2</span>);</span></span><br><span class="line">          },</span><br><span class="line"></span><br><span class="line">        },</span><br><span class="line">        methods:{</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">increment</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.books[index].num++;</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">decrement</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.books[index].num--;</span></span><br><span class="line">            },</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">deleteItem</span>(<span class="params">index</span>)</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.books.splice(index,<span class="number">1</span>);</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue学习笔记01-vue的基本介绍和语法&quot;&gt;&lt;a href=&quot;#vue学习笔记01-vue的基本介绍和语法&quot; class=&quot;headerlink&quot; title=&quot;vue学习笔记01-vue的基本介绍和语法&quot;&gt;&lt;/a&gt;vue学习笔记01-vue的基本介绍和语法&lt;/</summary>
      
    
    
    
    
    <category term="vue" scheme="http://blog.sky123.top/tags/vue/"/>
    
    <category term="前端" scheme="http://blog.sky123.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客中插入b站视频</title>
    <link href="http://blog.sky123.top/2020/05/01/hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5b%E7%AB%99%E8%A7%86%E9%A2%91/"/>
    <id>http://blog.sky123.top/2020/05/01/hexo%E5%8D%9A%E5%AE%A2/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5b%E7%AB%99%E8%A7%86%E9%A2%91/</id>
    <published>2020-05-01T06:53:47.000Z</published>
    <updated>2021-02-26T15:31:40.903Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://cdn.pixabay.com/photo/2016/08/09/21/54/lake-1581879_1280.jpg"></p><hr><h1 id="Hexo博客中插入b站视频"><a href="#Hexo博客中插入b站视频" class="headerlink" title="Hexo博客中插入b站视频"></a>Hexo博客中插入b站视频</h1><ol><li>在B站网页上获取视频嵌入代码</li></ol><p>进入网页版的b站视频，点击分享按钮，即可得到用于分享的html代码</p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/20210225202303.png"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/img/20210225202425.png"></p><hr><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=801652859&amp;bvid=BV18y4y1E7jG&amp;cid=296179537&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>关键还是提取里面的<code>src</code>的属性值：<code>//player.bilibili.com/player.html?aid=801652859&amp;bvid=BV18y4y1E7jG&amp;cid=296179537&amp;page=1</code> ，默认的分享代码不太适配我们的博客界面，因此需要将该属性值复制到下面对应的src位置中。</p><ol start="2"><li>在文章中添加视频外链</li></ol><p>我们知道在 Markdown 中可以直接插入 html 代码，但是为了防止一些其他因素的干扰，Hexo 给我们特意准备了一个 raw 标签来插入 html 代码。这里我们就使用 raw 来插入视频外链。（实际测试中发现raw标签可加可不加，根据自己博客的具体情况判断是否加上）</p><p>视频外链代码如下，在需要显示视频的地方粘贴即可</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{% raw %}</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative; width: 100%; height: 0; padding-bottom: 75%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=801652859&amp;bvid=BV18y4y1E7jG&amp;cid=296179537&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">{% endraw %}</span><br></pre></td></tr></tbody></table></figure><p>实现效果如下:</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=801652859&amp;bvid=BV18y4y1E7jG&amp;cid=296179537&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">    </iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://cdn.pixabay.com/photo/2016/08/09/21/54/lake-1581879_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
      
    
    
    
    
    <category term="Hexo博客" scheme="http://blog.sky123.top/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot11配置JSP和thymeleaf模板解析</title>
    <link href="http://blog.sky123.top/2020/04/11/springboot/SpringBoot11%E9%85%8D%E7%BD%AEJSP%E5%92%8Cthymeleaf%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.sky123.top/2020/04/11/springboot/SpringBoot11%E9%85%8D%E7%BD%AEJSP%E5%92%8Cthymeleaf%E6%A8%A1%E6%9D%BF%E8%A7%A3%E6%9E%90/</id>
    <published>2020-04-11T06:53:47.000Z</published>
    <updated>2021-02-25T11:51:22.592Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img lazyload="" src="/images/loading.svg" data-src="https://cdn.pixabay.com/photo/2014/10/07/13/48/mountain-477832_1280.jpg"></p><hr><h1 id="SpringBoot11配置JSP和thymeleaf模板解析"><a href="#SpringBoot11配置JSP和thymeleaf模板解析" class="headerlink" title="SpringBoot11配置JSP和thymeleaf模板解析"></a>SpringBoot11配置JSP和thymeleaf模板解析</h1><h2 id="1-集成jsp模板"><a href="#1-集成jsp模板" class="headerlink" title="1 集成jsp模板"></a>1 集成jsp模板</h2><h3 id="引入jsp的集成jar包"><a href="#引入jsp的集成jar包" class="headerlink" title="引入jsp的集成jar包"></a>引入jsp的集成jar包</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="引入jsp运行插件"><a href="#引入jsp运行插件" class="headerlink" title="引入jsp运行插件"></a>引入jsp运行插件</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>springboot_day1<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入jsp运行插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置视图解析器"><a href="#配置视图解析器" class="headerlink" title="配置视图解析器"></a>配置视图解析器</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在配置文件中引入视图解析器</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/</span>   <span class="comment"># /代表访问项目中webapp中页面</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="第一种方式使用插件启动"><a href="#第一种方式使用插件启动" class="headerlink" title="第一种方式使用插件启动"></a>第一种方式使用插件启动</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20191129124602959.png" alt="image-20191129124602959"></p><h3 id="第二种方式使用idea中指定工作目录启动-推荐"><a href="#第二种方式使用idea中指定工作目录启动-推荐" class="headerlink" title="第二种方式使用idea中指定工作目录启动  [推荐]"></a>第二种方式使用idea中指定工作目录启动  [推荐]</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20191129124727562.png" alt="image-20191129124727562"></p><h3 id="启动访问jsp页面"><a href="#启动访问jsp页面" class="headerlink" title="启动访问jsp页面"></a>启动访问jsp页面</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/cmfz/index.jsp</span><br></pre></td></tr></tbody></table></figure><h3 id="修改jsp无须重启应用"><a href="#修改jsp无须重启应用" class="headerlink" title="修改jsp无须重启应用"></a>修改jsp无须重启应用</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.servlet.jsp.init-parameters.development</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2-集成thymelaf模板"><a href="#2-集成thymelaf模板" class="headerlink" title="2 集成thymelaf模板"></a>2 集成thymelaf模板</h2><blockquote><p>Thymeleaf是一个用于web和独立环境的现代服务器端Java模板引擎。  –摘自官网<a class="link" href="https://www.thymeleaf.org/">https://www.thymeleaf.org/<i class="fas fa-external-link-alt"></i></a></p></blockquote><p><code>Thymeleaf</code>是跟<code>Velocity</code>、<code>FreeMarker</code>类似的模板引擎，它可以完全替代JSP，相较与其他的模板引擎相比, <code>Thymeleaf</code>在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用thymelaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/      #使用模板目录</span></span><br><span class="line"><span class="meta">spring.thymeleaf.suffix</span>=<span class="string">.html                      #使用模板后缀</span></span><br><span class="line"><span class="meta">spring.thymeleaf.encoding</span>=<span class="string">UTF-8                    #使用模板编码</span></span><br><span class="line"><span class="meta">spring.thymeleaf.enabled</span>=<span class="string">true                      #开始thymelaf模板</span></span><br><span class="line"><span class="meta">spring.thymeleaf.servlet.content-type</span>=<span class="string">text/html    #使用模板响应类型</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编写控制器测试"><a href="#编写控制器测试" class="headerlink" title="编写控制器测试"></a>编写控制器测试</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>    <span class="comment">//一定要是@Controller 不能再使用@RestController注解</span></span><br><span class="line"><span class="meta">@RequestMapping("hello")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"测试与 thymeleaf 的集成"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="在templates目录中定义模板"><a href="#在templates目录中定义模板" class="headerlink" title="在templates目录中定义模板"></a>在templates目录中定义模板</h3><p><img lazyload="" src="/images/loading.svg" data-src="http://img.sky123.top/springboot/image-20200323085834206.png" alt="image-20200323085834206"></p><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/springboot_day3/hello/hello</span><br></pre></td></tr></tbody></table></figure><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323085948499.png" alt="image-20200323085948499"></p><h3 id="开启直接访问html页面"><a href="#开启直接访问html页面" class="headerlink" title="开启直接访问html页面"></a>开启直接访问html页面</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/templates/,classpath:/static/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8989/springboot_day3/index.html</span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323090142705.png" alt="image-20200323090142705"></p><h2 id="3-Thymeleaf基本使用"><a href="#3-Thymeleaf基本使用" class="headerlink" title="3 Thymeleaf基本使用"></a>3 Thymeleaf基本使用</h2><p><code>使用时必须在页面中加入thymeleaf如下命名空间:</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="展示单个数据"><a href="#展示单个数据" class="headerlink" title="展示单个数据"></a>展示单个数据</h3><h4 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"name"</span>,<span class="string">"张三"</span>); 或 request.setAttribute(<span class="string">"name"</span>,<span class="string">"小黑"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${name}"</span>/&gt;</span>  ---&gt;获取数据</span><br></pre></td></tr></tbody></table></figure><p><code>注意:在springboot2.x版本中必须加入国际化配置文件才能正常展示:</code></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323100724749.png" alt="image-20200323100724749"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323100747881.png" alt="image-20200323100747881"></p><h4 id="获取并解析含有html标签数据"><a href="#获取并解析含有html标签数据" class="headerlink" title="获取并解析含有html标签数据"></a>获取并解析含有html标签数据</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"name"</span>,<span class="string">"&lt;a href=''&gt;张三&lt;/a&gt;"</span>);</span><br><span class="line">model.addAttribute(<span class="string">"username"</span>,<span class="string">"小陈"</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>直接获取原样输出</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${name}"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323100956740.png" alt="image-20200323100956740"></p><ul><li>获取并解析</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">"${name}"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323101457134.png" alt="image-20200323101457134"></p><ul><li><p>将数据赋值给表单元素</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:value</span>=<span class="string">"${username}"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323103452620.png" alt="image-20200323103452620"></p></li></ul><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 总结</span></span><br><span class="line"><span class="code">1.使用 th:text="${属性名}"  获取对应数据,获取数据时会将对应标签中数据清空,因此最好是空标签</span></span><br><span class="line"><span class="code">2.使用 th:utext="${属性名}" 获取对应的数据,可以将数据中html先解析在渲染到页面</span></span><br><span class="line"><span class="code">3.使用 th:value="${属性名}" 获取数据直接作为表单元素value属性</span></span><br></pre></td></tr></tbody></table></figure><h3 id="展示对象数据"><a href="#展示对象数据" class="headerlink" title="展示对象数据"></a>展示对象数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"user"</span>,<span class="keyword">new</span> User(<span class="string">"21"</span>,<span class="string">"xiaochen"</span>,<span class="number">23</span>,<span class="keyword">new</span> Date()));</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.id}"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">name:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.name}"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">age:<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.age}"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">bir: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.bir}"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>  ====  <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${#dates.format(user.bir, 'yyyy-MM-dd HH:mm')}"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 日期格式化</span><br></pre></td></tr></tbody></table></figure><h3 id="条件展示数据"><a href="#条件展示数据" class="headerlink" title="条件展示数据"></a>条件展示数据</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.addAttribute(<span class="string">"user"</span>,<span class="keyword">new</span> User(<span class="string">"21"</span>,<span class="string">"xiaochen"</span>,<span class="number">23</span>,<span class="keyword">new</span> Date()));</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">"${user.age} eq 23"</span>&gt;</span></span><br><span class="line">  青年</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 运算符</span></span><br><span class="line"><span class="code">    gt：great than（大于）&gt;</span></span><br><span class="line"><span class="code">    ge：great equal（大于等于）&gt;=</span></span><br><span class="line"><span class="code">    eq：equal（等于）==</span></span><br><span class="line"><span class="code">    lt：less than（小于）&lt;</span></span><br><span class="line"><span class="code">    le：less equal（小于等于）&lt;=</span></span><br><span class="line"><span class="code">    ne：not equal（不等于）!=</span></span><br></pre></td></tr></tbody></table></figure><h3 id="展示多条数据"><a href="#展示多条数据" class="headerlink" title="展示多条数据"></a>展示多条数据</h3><ul><li>直接遍历集合</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">"user:${users}"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"${user.id}"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"${user.name}"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"${user.age}"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:text</span>=<span class="string">"${#dates.format(user.bir,'yyyy-MM-dd')}"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>遍历时获取遍历状态</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">th:each</span>=<span class="string">"user,userStat:${users}"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${userStat.count}"</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.id}"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取遍历次数  count 从1开始 index 从0开始</span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${userStat.odd}"</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.name}"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取当前遍历是否是奇数行</span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${userStat.even}"</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.age}"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取当前遍历是否是偶数行</span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${userStat.size}"</span>/&gt;</span>-<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"${user.bir}"</span>/&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   获取当前集合的总条数</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h3><p><code>使用thymeleaf模板项目中静态资源默认放在resources路径小static目录中</code></p><ul><li><p>项目中放入对应静态资源</p><img lazyload="" src="/images/loading.svg" data-src="https://img.sky123.top/springboot/image-20200323142307411.png" alt="image-20200323142307411" style="zoom:200%;"></li><li><p>页面中引入</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@{/css/index.css}"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@{/js/jquery-min.js}"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img lazyload=&quot;&quot; src=&quot;/images/loading.svg&quot; data-src=&quot;https://cdn.pixabay.com/photo/2014/10/07/13/48/mountain-477832_1280.jpg&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="JavaWeb" scheme="http://blog.sky123.top/tags/JavaWeb/"/>
    
    <category term="SpringBoot" scheme="http://blog.sky123.top/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
